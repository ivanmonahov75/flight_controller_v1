
flight_controller_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e344  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800e4e8  0800e4e8  0000f4e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e610  0800e610  00010180  2**0
                  CONTENTS
  4 .ARM          00000008  0800e610  0800e610  0000f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e618  0800e618  00010180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e618  0800e618  0000f618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e61c  0800e61c  0000f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  0800e620  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000060e8  20000180  0800e7a0  00010180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006268  0800e7a0  00010268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002355f  00000000  00000000  000101b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051e2  00000000  00000000  0003370f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  000388f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016bb  00000000  00000000  0003a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000703d  00000000  00000000  0003bd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000231cc  00000000  00000000  00042d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a898c  00000000  00000000  00065f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e8c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008280  00000000  00000000  0010e904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00116b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e4cc 	.word	0x0800e4cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800e4cc 	.word	0x0800e4cc

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <MPU6050_init>:
I2C_HandleTypeDef *local_hi2c;
const static float accel_offset[3] = { +0.055, -0.03, -0.1 }; // accel offset is measured manually

// MPU6050
// just init
void MPU6050_init(I2C_HandleTypeDef *hi2c, uint8_t sampling_rate, uint8_t guro_sens, uint8_t accel_sens) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4603      	mov	r3, r0
 8000e58:	70fb      	strb	r3, [r7, #3]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70bb      	strb	r3, [r7, #2]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	707b      	strb	r3, [r7, #1]
	// set i2c channel
	local_hi2c = hi2c;
 8000e62:	4a3d      	ldr	r2, [pc, #244]	@ (8000f58 <MPU6050_init+0x110>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6013      	str	r3, [r2, #0]
	uint8_t temp = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	// check if device is working correctly
	HAL_I2C_Mem_Read(local_hi2c, MPU6050_ADR, 0x75, 1, &temp, 1, I2C_TIMEOUT);
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <MPU6050_init+0x110>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f107 030f 	add.w	r3, r7, #15
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	2275      	movs	r2, #117	@ 0x75
 8000e84:	21d0      	movs	r1, #208	@ 0xd0
 8000e86:	f002 fdcd 	bl	8003a24 <HAL_I2C_Mem_Read>
	// if return value is correct proceed
	if (temp == 104) {
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b68      	cmp	r3, #104	@ 0x68
 8000e8e:	d14c      	bne.n	8000f2a <MPU6050_init+0xe2>
		// wake device up
		temp = 0b00000000;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(local_hi2c, MPU6050_ADR, PWR_MGMT_1_REG, 1, &temp, 1,
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <MPU6050_init+0x110>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	226b      	movs	r2, #107	@ 0x6b
 8000eac:	21d0      	movs	r1, #208	@ 0xd0
 8000eae:	f002 fcbf 	bl	8003830 <HAL_I2C_Mem_Write>
		I2C_TIMEOUT);

		// set correct sample rate (in this case 1 KHz)
		HAL_I2C_Mem_Write(local_hi2c, MPU6050_ADR, SMPLRT_DIV_REG, 1, &sampling_rate, 1,
 8000eb2:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <MPU6050_init+0x110>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	1cfb      	adds	r3, r7, #3
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2219      	movs	r2, #25
 8000ec8:	21d0      	movs	r1, #208	@ 0xd0
 8000eca:	f002 fcb1 	bl	8003830 <HAL_I2C_Mem_Write>
		I2C_TIMEOUT);

		// set accel register value (4g)
		HAL_I2C_Mem_Write(local_hi2c, MPU6050_ADR, ACCEL_CONFIG_REG, 1, &guro_sens, 1,
 8000ece:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <MPU6050_init+0x110>)
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	1cbb      	adds	r3, r7, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	221c      	movs	r2, #28
 8000ee4:	21d0      	movs	r1, #208	@ 0xd0
 8000ee6:	f002 fca3 	bl	8003830 <HAL_I2C_Mem_Write>
		I2C_TIMEOUT);

		// set gyro register value (500 degree/sec)
		HAL_I2C_Mem_Write(local_hi2c, MPU6050_ADR, GYRO_CONFIG_REG, 1, &accel_sens, 1,
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <MPU6050_init+0x110>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	1c7b      	adds	r3, r7, #1
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	221b      	movs	r2, #27
 8000f00:	21d0      	movs	r1, #208	@ 0xd0
 8000f02:	f002 fc95 	bl	8003830 <HAL_I2C_Mem_Write>
		I2C_TIMEOUT);
		// set up low pass filter (pre-installed)
		temp = 0x05;
 8000f06:	2305      	movs	r3, #5
 8000f08:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(local_hi2c, MPU6050_ADR, LOW_PASS_FILTER_REG, 1, &temp, 1, I2C_TIMEOUT);
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <MPU6050_init+0x110>)
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f107 030f 	add.w	r3, r7, #15
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	221a      	movs	r2, #26
 8000f22:	21d0      	movs	r1, #208	@ 0xd0
 8000f24:	f002 fc84 	bl	8003830 <HAL_I2C_Mem_Write>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
			osDelay(800);
		}
	}

}
 8000f28:	e013      	b.n	8000f52 <MPU6050_init+0x10a>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <MPU6050_init+0x114>)
 8000f32:	f001 ffef 	bl	8002f14 <HAL_GPIO_WritePin>
			osDelay(200);
 8000f36:	20c8      	movs	r0, #200	@ 0xc8
 8000f38:	f009 fd2c 	bl	800a994 <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f42:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <MPU6050_init+0x114>)
 8000f44:	f001 ffe6 	bl	8002f14 <HAL_GPIO_WritePin>
			osDelay(800);
 8000f48:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f4c:	f009 fd22 	bl	800a994 <osDelay>
		while (1) {
 8000f50:	e7eb      	b.n	8000f2a <MPU6050_init+0xe2>
}
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000019c 	.word	0x2000019c
 8000f5c:	40020800 	.word	0x40020800

08000f60 <MPU6050_calibrate>:

// sets up gyro offset
float gyro_offset[3] = { 0, 0, 0 }; // inital offset
void MPU6050_calibrate(uint16_t sample_amount) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); 	// turn on led
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f70:	4829      	ldr	r0, [pc, #164]	@ (8001018 <MPU6050_calibrate+0xb8>)
 8000f72:	f001 ffcf 	bl	8002f14 <HAL_GPIO_WritePin>
	uint16_t calibration; // temp value
	int16_t Rec_data_raw[3];

	for (calibration = 0; calibration < sample_amount; calibration++) {
 8000f76:	2300      	movs	r3, #0
 8000f78:	82fb      	strh	r3, [r7, #22]
 8000f7a:	e02b      	b.n	8000fd4 <MPU6050_calibrate+0x74>
		MPU6050_getGyroValues(Rec_data_raw); // get gyro values
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f84d 	bl	8001020 <MPU6050_getGyroValues>
		for (uint8_t i = 0; i < 3; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	757b      	strb	r3, [r7, #21]
 8000f8a:	e01d      	b.n	8000fc8 <MPU6050_calibrate+0x68>
			gyro_offset[i] += Rec_data_raw[i]; // add them to total sum
 8000f8c:	7d7b      	ldrb	r3, [r7, #21]
 8000f8e:	4a23      	ldr	r2, [pc, #140]	@ (800101c <MPU6050_calibrate+0xbc>)
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	ed93 7a00 	vldr	s14, [r3]
 8000f98:	7d7b      	ldrb	r3, [r7, #21]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	3318      	adds	r3, #24
 8000f9e:	443b      	add	r3, r7
 8000fa0:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fac:	7d7b      	ldrb	r3, [r7, #21]
 8000fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <MPU6050_calibrate+0xbc>)
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	edc3 7a00 	vstr	s15, [r3]
			osDelay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f009 fce9 	bl	800a994 <osDelay>
		for (uint8_t i = 0; i < 3; i++) {
 8000fc2:	7d7b      	ldrb	r3, [r7, #21]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	757b      	strb	r3, [r7, #21]
 8000fc8:	7d7b      	ldrb	r3, [r7, #21]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d9de      	bls.n	8000f8c <MPU6050_calibrate+0x2c>
	for (calibration = 0; calibration < sample_amount; calibration++) {
 8000fce:	8afb      	ldrh	r3, [r7, #22]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	82fb      	strh	r3, [r7, #22]
 8000fd4:	8afa      	ldrh	r2, [r7, #22]
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3cf      	bcc.n	8000f7c <MPU6050_calibrate+0x1c>
		}
	}
	for (uint8_t i = 0; i < 3; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	e00c      	b.n	8000ffc <MPU6050_calibrate+0x9c>
		gyro_offset[i] = (float) gyro_offset[i]; // / sample_amount; // normalize values
 8000fe2:	7d3a      	ldrb	r2, [r7, #20]
 8000fe4:	7d3b      	ldrb	r3, [r7, #20]
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <MPU6050_calibrate+0xbc>)
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	440a      	add	r2, r1
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	490b      	ldr	r1, [pc, #44]	@ (800101c <MPU6050_calibrate+0xbc>)
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8000ff6:	7d3b      	ldrb	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	753b      	strb	r3, [r7, #20]
 8000ffc:	7d3b      	ldrb	r3, [r7, #20]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d9ef      	bls.n	8000fe2 <MPU6050_calibrate+0x82>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);  	// turn off led
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MPU6050_calibrate+0xb8>)
 800100a:	f001 ff83 	bl	8002f14 <HAL_GPIO_WritePin>

}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40020800 	.word	0x40020800
 800101c:	200001a0 	.word	0x200001a0

08001020 <MPU6050_getGyroValues>:

// get gyro samples, copies them in angles
void MPU6050_getGyroValues(int16_t *angles) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
	// define and write
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(local_hi2c, MPU6050_ADR, GYRO_XOUT_H_REG, 1, Rec_Data, 6,
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <MPU6050_getGyroValues+0xe4>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	2306      	movs	r3, #6
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2301      	movs	r3, #1
 800103e:	2243      	movs	r2, #67	@ 0x43
 8001040:	21d0      	movs	r1, #208	@ 0xd0
 8001042:	f002 fcef 	bl	8003a24 <HAL_I2C_Mem_Read>
	I2C_TIMEOUT);

	// transform to raw
	angles[0] = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); // X values
 8001046:	7a3b      	ldrb	r3, [r7, #8]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7a7b      	ldrb	r3, [r7, #9]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	801a      	strh	r2, [r3, #0]
	angles[1] = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]); // Y values
 8001058:	7abb      	ldrb	r3, [r7, #10]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b219      	sxth	r1, r3
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3302      	adds	r3, #2
 8001066:	430a      	orrs	r2, r1
 8001068:	b212      	sxth	r2, r2
 800106a:	801a      	strh	r2, [r3, #0]
	angles[2] = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]); // Z values
 800106c:	7b3b      	ldrb	r3, [r7, #12]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b219      	sxth	r1, r3
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	430a      	orrs	r2, r1
 800107c:	b212      	sxth	r2, r2
 800107e:	801a      	strh	r2, [r3, #0]

	angles[0] = angles[0] - gyro_offset[0];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <MPU6050_getGyroValues+0xe8>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	801a      	strh	r2, [r3, #0]
	angles[1] = angles[1] - gyro_offset[1];
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3302      	adds	r3, #2
 80010aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b6:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <MPU6050_getGyroValues+0xe8>)
 80010b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3302      	adds	r3, #2
 80010c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c8:	ee17 2a90 	vmov	r2, s15
 80010cc:	b212      	sxth	r2, r2
 80010ce:	801a      	strh	r2, [r3, #0]
	angles[2] = angles[2] - gyro_offset[2];
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3304      	adds	r3, #4
 80010d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <MPU6050_getGyroValues+0xe8>)
 80010e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80010e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f2:	ee17 2a90 	vmov	r2, s15
 80010f6:	b212      	sxth	r2, r2
 80010f8:	801a      	strh	r2, [r3, #0]

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000019c 	.word	0x2000019c
 8001108:	200001a0 	.word	0x200001a0
 800110c:	00000000 	.word	0x00000000

08001110 <MPU6050_getGyroRates>:

void MPU6050_getGyroRates(float *angles) {
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	int16_t Raw_data[3];
	MPU6050_getGyroValues(Raw_data);
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff7f 	bl	8001020 <MPU6050_getGyroValues>
	angles[0] = Raw_data[0] / 65.5;
 8001122:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f9ac 	bl	8000484 <__aeabi_i2d>
 800112c:	a31e      	add	r3, pc, #120	@ (adr r3, 80011a8 <MPU6050_getGyroRates+0x98>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fb3b 	bl	80007ac <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcbb 	bl	8000ab8 <__aeabi_d2f>
 8001142:	4602      	mov	r2, r0
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
	angles[1] = Raw_data[1] / 65.5;
 8001148:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f999 	bl	8000484 <__aeabi_i2d>
 8001152:	a315      	add	r3, pc, #84	@ (adr r3, 80011a8 <MPU6050_getGyroRates+0x98>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f7ff fb28 	bl	80007ac <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	1d1c      	adds	r4, r3, #4
 8001168:	f7ff fca6 	bl	8000ab8 <__aeabi_d2f>
 800116c:	4603      	mov	r3, r0
 800116e:	6023      	str	r3, [r4, #0]
	angles[2] = Raw_data[2] / 65.5;
 8001170:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f985 	bl	8000484 <__aeabi_i2d>
 800117a:	a30b      	add	r3, pc, #44	@ (adr r3, 80011a8 <MPU6050_getGyroRates+0x98>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fb14 	bl	80007ac <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 0408 	add.w	r4, r3, #8
 8001192:	f7ff fc91 	bl	8000ab8 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	6023      	str	r3, [r4, #0]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd90      	pop	{r4, r7, pc}
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40506000 	.word	0x40506000

080011b0 <MPU6050_getAccelValues>:

// same for accel
void MPU6050_getAccelValues(int16_t *acceleration) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	6078      	str	r0, [r7, #4]
	// define and write
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read(local_hi2c, MPU6050_ADR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6,
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MPU6050_getAccelValues+0x68>)
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2306      	movs	r3, #6
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2301      	movs	r3, #1
 80011ce:	223b      	movs	r2, #59	@ 0x3b
 80011d0:	21d0      	movs	r1, #208	@ 0xd0
 80011d2:	f002 fc27 	bl	8003a24 <HAL_I2C_Mem_Read>
	I2C_TIMEOUT);

	// transform to raw
	acceleration[0] = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); // X values
 80011d6:	7a3b      	ldrb	r3, [r7, #8]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7a7b      	ldrb	r3, [r7, #9]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	801a      	strh	r2, [r3, #0]
	acceleration[1] = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]); // Y values
 80011e8:	7abb      	ldrb	r3, [r7, #10]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b219      	sxth	r1, r3
 80011ee:	7afb      	ldrb	r3, [r7, #11]
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3302      	adds	r3, #2
 80011f6:	430a      	orrs	r2, r1
 80011f8:	b212      	sxth	r2, r2
 80011fa:	801a      	strh	r2, [r3, #0]
	acceleration[2] = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]); // Z values
 80011fc:	7b3b      	ldrb	r3, [r7, #12]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	b219      	sxth	r1, r3
 8001202:	7b7b      	ldrb	r3, [r7, #13]
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	430a      	orrs	r2, r1
 800120c:	b212      	sxth	r2, r2
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000019c 	.word	0x2000019c
 800121c:	00000000 	.word	0x00000000

08001220 <MPU6050_getAccelAngles>:

// gets angles from accel data and copies them into float array
void MPU6050_getAccelAngles(float *angles) {
 8001220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001224:	b088      	sub	sp, #32
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	// init values
	int16_t dataRaw[3];
	float angles_accel_raw[3];

	// get values
	MPU6050_getAccelValues(dataRaw);
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffbe 	bl	80011b0 <MPU6050_getAccelValues>

	// from raw to G`s
	for (uint8_t i = 0; i < 3; i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	77fb      	strb	r3, [r7, #31]
 8001238:	e01f      	b.n	800127a <MPU6050_getAccelAngles+0x5a>
		angles_accel_raw[i] = (float) dataRaw[i] / 8192 - accel_offset[i];
 800123a:	7ffb      	ldrb	r3, [r7, #31]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	3320      	adds	r3, #32
 8001240:	443b      	add	r3, r7
 8001242:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80013c0 <MPU6050_getAccelAngles+0x1a0>
 8001252:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001256:	7ffb      	ldrb	r3, [r7, #31]
 8001258:	4a5a      	ldr	r2, [pc, #360]	@ (80013c4 <MPU6050_getAccelAngles+0x1a4>)
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	7ffb      	ldrb	r3, [r7, #31]
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	3320      	adds	r3, #32
 800126c:	443b      	add	r3, r7
 800126e:	3b14      	subs	r3, #20
 8001270:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < 3; i++) {
 8001274:	7ffb      	ldrb	r3, [r7, #31]
 8001276:	3301      	adds	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d9dc      	bls.n	800123a <MPU6050_getAccelAngles+0x1a>
	}

	// from G`s to angles (only x and y axis angles)
	angles[0] = atan(angles_accel_raw[1] / sqrt(angles_accel_raw[0] * angles_accel_raw[0] + angles_accel_raw[2] * angles_accel_raw[2])) * M_1_PI * 180;
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f910 	bl	80004a8 <__aeabi_f2d>
 8001288:	4680      	mov	r8, r0
 800128a:	4689      	mov	r9, r1
 800128c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001290:	edd7 7a03 	vldr	s15, [r7, #12]
 8001294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001298:	edd7 6a05 	vldr	s13, [r7, #20]
 800129c:	edd7 7a05 	vldr	s15, [r7, #20]
 80012a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	ee17 0a90 	vmov	r0, s15
 80012ac:	f7ff f8fc 	bl	80004a8 <__aeabi_f2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b10 	vmov	d0, r2, r3
 80012b8:	f00c fe3c 	bl	800df34 <sqrt>
 80012bc:	ec53 2b10 	vmov	r2, r3, d0
 80012c0:	4640      	mov	r0, r8
 80012c2:	4649      	mov	r1, r9
 80012c4:	f7ff fa72 	bl	80007ac <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	ec43 2b17 	vmov	d7, r2, r3
 80012d0:	eeb0 0a47 	vmov.f32	s0, s14
 80012d4:	eef0 0a67 	vmov.f32	s1, s15
 80012d8:	f00c fe5a 	bl	800df90 <atan>
 80012dc:	ec51 0b10 	vmov	r0, r1, d0
 80012e0:	a335      	add	r3, pc, #212	@ (adr r3, 80013b8 <MPU6050_getAccelAngles+0x198>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f937 	bl	8000558 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b34      	ldr	r3, [pc, #208]	@ (80013c8 <MPU6050_getAccelAngles+0x1a8>)
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fbd8 	bl	8000ab8 <__aeabi_d2f>
 8001308:	4602      	mov	r2, r0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	601a      	str	r2, [r3, #0]
	angles[1] = -atan(angles_accel_raw[0] / sqrt(angles_accel_raw[1] * angles_accel_raw[1] + angles_accel_raw[2] * angles_accel_raw[2])) * M_1_PI * 180;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8c9 	bl	80004a8 <__aeabi_f2d>
 8001316:	4680      	mov	r8, r0
 8001318:	4689      	mov	r9, r1
 800131a:	ed97 7a04 	vldr	s14, [r7, #16]
 800131e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	edd7 6a05 	vldr	s13, [r7, #20]
 800132a:	edd7 7a05 	vldr	s15, [r7, #20]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001336:	ee17 0a90 	vmov	r0, s15
 800133a:	f7ff f8b5 	bl	80004a8 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	ec43 2b10 	vmov	d0, r2, r3
 8001346:	f00c fdf5 	bl	800df34 <sqrt>
 800134a:	ec53 2b10 	vmov	r2, r3, d0
 800134e:	4640      	mov	r0, r8
 8001350:	4649      	mov	r1, r9
 8001352:	f7ff fa2b 	bl	80007ac <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	ec43 2b17 	vmov	d7, r2, r3
 800135e:	eeb0 0a47 	vmov.f32	s0, s14
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	f00c fe13 	bl	800df90 <atan>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	4614      	mov	r4, r2
 8001370:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001374:	a310      	add	r3, pc, #64	@ (adr r3, 80013b8 <MPU6050_getAccelAngles+0x198>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7ff f8eb 	bl	8000558 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <MPU6050_getAccelAngles+0x1a8>)
 8001390:	f7ff f8e2 	bl	8000558 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1d1c      	adds	r4, r3, #4
 80013a0:	f7ff fb8a 	bl	8000ab8 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	6023      	str	r3, [r4, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013b2:	bf00      	nop
 80013b4:	f3af 8000 	nop.w
 80013b8:	6dc9c883 	.word	0x6dc9c883
 80013bc:	3fd45f30 	.word	0x3fd45f30
 80013c0:	46000000 	.word	0x46000000
 80013c4:	0800e560 	.word	0x0800e560
 80013c8:	40668000 	.word	0x40668000

080013cc <MPU6050_getAnglesKalman>:
// updates values of angles in given array if floats
float uncert[2] = { 02.0 * 2.0, 2.0 * 2.0 }; // our uncertanity level
float kalman_state[2] = { 0.0, 0.0 }; // our angle

void MPU6050_getAnglesKalman(float *input_angle, uint32_t tik) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	float time_delta = (float) (HAL_GetTick() - tik); // get time  delta
 80013d6:	f001 f8a5 	bl	8002524 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e8:	edc7 7a08 	vstr	s15, [r7, #32]
	time_delta = 4 * 0.001;
 80013ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001558 <MPU6050_getAnglesKalman+0x18c>)
 80013ee:	623b      	str	r3, [r7, #32]
	float angles_rates[3];
	MPU6050_getGyroRates(angles_rates); // get gyro
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe8b 	bl	8001110 <MPU6050_getGyroRates>

	float accel_angles[2];
	MPU6050_getAccelAngles(accel_angles); // get accel
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff0e 	bl	8001220 <MPU6050_getAccelAngles>

	for (uint8_t i = 0; i < 2; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800140a:	e097      	b.n	800153c <MPU6050_getAnglesKalman+0x170>
		input_angle[1-i] = input_angle[1-i] + angles_rates[i] * time_delta;
 800140c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001410:	f1c3 0301 	rsb	r3, r3, #1
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	ed93 7a00 	vldr	s14, [r3]
 800141e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	3328      	adds	r3, #40	@ 0x28
 8001426:	443b      	add	r3, r7
 8001428:	3b18      	subs	r3, #24
 800142a:	edd3 6a00 	vldr	s13, [r3]
 800142e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800143a:	f1c3 0301 	rsb	r3, r3, #1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001448:	edc3 7a00 	vstr	s15, [r3]
		uncert[i] += time_delta * time_delta * 4 * 4;
 800144c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001450:	4a42      	ldr	r2, [pc, #264]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	edd7 7a08 	vldr	s15, [r7, #32]
 800145e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001462:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001466:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800146a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800146e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147a:	4a38      	ldr	r2, [pc, #224]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	edc3 7a00 	vstr	s15, [r3]
		float gain = uncert[i] * 1 / (uncert[i] + 3 * 3);
 8001484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001488:	4a34      	ldr	r2, [pc, #208]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	edd3 6a00 	vldr	s13, [r3]
 8001492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001496:	4a31      	ldr	r2, [pc, #196]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4413      	add	r3, r2
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80014a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ac:	edc7 7a07 	vstr	s15, [r7, #28]
		input_angle[1-i] += gain * (accel_angles[i] - input_angle[1-i]);
 80014b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014b4:	f1c3 0301 	rsb	r3, r3, #1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	3328      	adds	r3, #40	@ 0x28
 80014ca:	443b      	add	r3, r7
 80014cc:	3b20      	subs	r3, #32
 80014ce:	edd3 6a00 	vldr	s13, [r3]
 80014d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014d6:	f1c3 0301 	rsb	r3, r3, #1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014f4:	f1c3 0301 	rsb	r3, r3, #1
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	edc3 7a00 	vstr	s15, [r3]
		uncert[i] = uncert[i] * (1 - gain);
 8001506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	ed93 7a00 	vldr	s14, [r3]
 8001514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001518:	edd7 7a07 	vldr	s15, [r7, #28]
 800151c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001528:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <MPU6050_getAnglesKalman+0x190>)
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < 2; i++) {
 8001532:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001536:	3301      	adds	r3, #1
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800153c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001540:	2b01      	cmp	r3, #1
 8001542:	f67f af63 	bls.w	800140c <MPU6050_getAnglesKalman+0x40>


	}
	input_angle[2] = angles_rates[2];
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3308      	adds	r3, #8
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	3b83126f 	.word	0x3b83126f
 800155c:	20000000 	.word	0x20000000

08001560 <BMP180_ReadReg>:

// BMP180
// functions to make life easier
uint8_t BMP180_ReadReg(uint8_t reg) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(local_hi2c, BMP180_ADR, &reg, 1, I2C_TIMEOUT);
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <BMP180_ReadReg+0x40>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	1dfa      	adds	r2, r7, #7
 8001570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2301      	movs	r3, #1
 8001578:	21ee      	movs	r1, #238	@ 0xee
 800157a:	f001 fe29 	bl	80031d0 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(local_hi2c, BMP180_ADR, &result, 1, I2C_TIMEOUT);
 800157e:	4b08      	ldr	r3, [pc, #32]	@ (80015a0 <BMP180_ReadReg+0x40>)
 8001580:	6818      	ldr	r0, [r3, #0]
 8001582:	f107 020f 	add.w	r2, r7, #15
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	21ee      	movs	r1, #238	@ 0xee
 8001590:	f001 ff1c 	bl	80033cc <HAL_I2C_Master_Receive>
	return result;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000019c 	.word	0x2000019c

080015a4 <BMP180_initCalibrate>:
uint8_t oss;
// define register places
const uint8_t BMP180_eep_msb[11] = { 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe };
const uint8_t BMP180_eep_lsb[11] = { 0xab, 0xad, 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

void BMP180_initCalibrate(I2C_HandleTypeDef *hi2c){
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	// setup i2c channel (in case we use different channels for MPU and BMP)
	local_hi2c = hi2c;
 80015ac:	4a63      	ldr	r2, [pc, #396]	@ (800173c <BMP180_initCalibrate+0x198>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]

	// read all msb/lsb regs and write them to struct
	bmp180_epp.BMP180_AC1 = (BMP180_ReadReg(BMP180_eep_msb[0]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[0]);
 80015b2:	23aa      	movs	r3, #170	@ 0xaa
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffd3 	bl	8001560 <BMP180_ReadReg>
 80015ba:	4603      	mov	r3, r0
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b21c      	sxth	r4, r3
 80015c0:	23ab      	movs	r3, #171	@ 0xab
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ffcc 	bl	8001560 <BMP180_ReadReg>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4323      	orrs	r3, r4
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 80015d2:	801a      	strh	r2, [r3, #0]
	bmp180_epp.BMP180_AC2 = (BMP180_ReadReg(BMP180_eep_msb[1]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[1]);
 80015d4:	23ac      	movs	r3, #172	@ 0xac
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ffc2 	bl	8001560 <BMP180_ReadReg>
 80015dc:	4603      	mov	r3, r0
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21c      	sxth	r4, r3
 80015e2:	23ad      	movs	r3, #173	@ 0xad
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ffbb 	bl	8001560 <BMP180_ReadReg>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4323      	orrs	r3, r4
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 80015f4:	805a      	strh	r2, [r3, #2]
	bmp180_epp.BMP180_AC3 = (BMP180_ReadReg(BMP180_eep_msb[2]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[2]);
 80015f6:	23ae      	movs	r3, #174	@ 0xae
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ffb1 	bl	8001560 <BMP180_ReadReg>
 80015fe:	4603      	mov	r3, r0
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21c      	sxth	r4, r3
 8001604:	23af      	movs	r3, #175	@ 0xaf
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffaa 	bl	8001560 <BMP180_ReadReg>
 800160c:	4603      	mov	r3, r0
 800160e:	b21b      	sxth	r3, r3
 8001610:	4323      	orrs	r3, r4
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 8001616:	809a      	strh	r2, [r3, #4]
	bmp180_epp.BMP180_AC4 = (BMP180_ReadReg(BMP180_eep_msb[3]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[3]);
 8001618:	23b0      	movs	r3, #176	@ 0xb0
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ffa0 	bl	8001560 <BMP180_ReadReg>
 8001620:	4603      	mov	r3, r0
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21c      	sxth	r4, r3
 8001626:	23b1      	movs	r3, #177	@ 0xb1
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff99 	bl	8001560 <BMP180_ReadReg>
 800162e:	4603      	mov	r3, r0
 8001630:	b21b      	sxth	r3, r3
 8001632:	4323      	orrs	r3, r4
 8001634:	b21b      	sxth	r3, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 800163a:	80da      	strh	r2, [r3, #6]
	bmp180_epp.BMP180_AC5 = (BMP180_ReadReg(BMP180_eep_msb[4]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[4]);
 800163c:	23b2      	movs	r3, #178	@ 0xb2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff8e 	bl	8001560 <BMP180_ReadReg>
 8001644:	4603      	mov	r3, r0
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21c      	sxth	r4, r3
 800164a:	23b3      	movs	r3, #179	@ 0xb3
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff87 	bl	8001560 <BMP180_ReadReg>
 8001652:	4603      	mov	r3, r0
 8001654:	b21b      	sxth	r3, r3
 8001656:	4323      	orrs	r3, r4
 8001658:	b21b      	sxth	r3, r3
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b38      	ldr	r3, [pc, #224]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 800165e:	811a      	strh	r2, [r3, #8]
	bmp180_epp.BMP180_AC6 = (BMP180_ReadReg(BMP180_eep_msb[5]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[5]);
 8001660:	23b4      	movs	r3, #180	@ 0xb4
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff7c 	bl	8001560 <BMP180_ReadReg>
 8001668:	4603      	mov	r3, r0
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21c      	sxth	r4, r3
 800166e:	23b5      	movs	r3, #181	@ 0xb5
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff75 	bl	8001560 <BMP180_ReadReg>
 8001676:	4603      	mov	r3, r0
 8001678:	b21b      	sxth	r3, r3
 800167a:	4323      	orrs	r3, r4
 800167c:	b21b      	sxth	r3, r3
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 8001682:	815a      	strh	r2, [r3, #10]
	bmp180_epp.BMP180_B1 = (BMP180_ReadReg(BMP180_eep_msb[6]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[6]);
 8001684:	23b6      	movs	r3, #182	@ 0xb6
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff6a 	bl	8001560 <BMP180_ReadReg>
 800168c:	4603      	mov	r3, r0
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	b21c      	sxth	r4, r3
 8001692:	23b7      	movs	r3, #183	@ 0xb7
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff63 	bl	8001560 <BMP180_ReadReg>
 800169a:	4603      	mov	r3, r0
 800169c:	b21b      	sxth	r3, r3
 800169e:	4323      	orrs	r3, r4
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 80016a4:	819a      	strh	r2, [r3, #12]
	bmp180_epp.BMP180_B2 = (BMP180_ReadReg(BMP180_eep_msb[7]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[7]);
 80016a6:	23b8      	movs	r3, #184	@ 0xb8
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff59 	bl	8001560 <BMP180_ReadReg>
 80016ae:	4603      	mov	r3, r0
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21c      	sxth	r4, r3
 80016b4:	23b9      	movs	r3, #185	@ 0xb9
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff52 	bl	8001560 <BMP180_ReadReg>
 80016bc:	4603      	mov	r3, r0
 80016be:	b21b      	sxth	r3, r3
 80016c0:	4323      	orrs	r3, r4
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 80016c6:	81da      	strh	r2, [r3, #14]
	bmp180_epp.BMP180_MB = (BMP180_ReadReg(BMP180_eep_msb[8]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[8]);
 80016c8:	23ba      	movs	r3, #186	@ 0xba
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff48 	bl	8001560 <BMP180_ReadReg>
 80016d0:	4603      	mov	r3, r0
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21c      	sxth	r4, r3
 80016d6:	23bb      	movs	r3, #187	@ 0xbb
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff41 	bl	8001560 <BMP180_ReadReg>
 80016de:	4603      	mov	r3, r0
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4323      	orrs	r3, r4
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 80016e8:	821a      	strh	r2, [r3, #16]
	bmp180_epp.BMP180_MC = (BMP180_ReadReg(BMP180_eep_msb[9]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[9]);
 80016ea:	23bc      	movs	r3, #188	@ 0xbc
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff37 	bl	8001560 <BMP180_ReadReg>
 80016f2:	4603      	mov	r3, r0
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b21c      	sxth	r4, r3
 80016f8:	23bd      	movs	r3, #189	@ 0xbd
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff30 	bl	8001560 <BMP180_ReadReg>
 8001700:	4603      	mov	r3, r0
 8001702:	b21b      	sxth	r3, r3
 8001704:	4323      	orrs	r3, r4
 8001706:	b21a      	sxth	r2, r3
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 800170a:	825a      	strh	r2, [r3, #18]
	bmp180_epp.BMP180_MD = (BMP180_ReadReg(BMP180_eep_msb[10]) << 8) | BMP180_ReadReg(BMP180_eep_lsb[10]);
 800170c:	23be      	movs	r3, #190	@ 0xbe
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff26 	bl	8001560 <BMP180_ReadReg>
 8001714:	4603      	mov	r3, r0
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21c      	sxth	r4, r3
 800171a:	23bf      	movs	r3, #191	@ 0xbf
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff1f 	bl	8001560 <BMP180_ReadReg>
 8001722:	4603      	mov	r3, r0
 8001724:	b21b      	sxth	r3, r3
 8001726:	4323      	orrs	r3, r4
 8001728:	b21a      	sxth	r2, r3
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <BMP180_initCalibrate+0x19c>)
 800172c:	829a      	strh	r2, [r3, #20]

	// setup sensetivity
	oss = 3;
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <BMP180_initCalibrate+0x1a0>)
 8001730:	2203      	movs	r2, #3
 8001732:	701a      	strb	r2, [r3, #0]

}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bd90      	pop	{r4, r7, pc}
 800173c:	2000019c 	.word	0x2000019c
 8001740:	200001ac 	.word	0x200001ac
 8001744:	200001c2 	.word	0x200001c2

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f000 feb4 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f82c 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f000 fa0a 	bl	8001b6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001758:	f000 f894 	bl	8001884 <MX_ADC1_Init>
  MX_TIM2_Init();
 800175c:	f000 f912 	bl	8001984 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001760:	f000 f8e2 	bl	8001928 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001764:	f000 f988 	bl	8001a78 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001768:	f009 f838 	bl	800a7dc <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of machTask */
  machTaskHandle = osThreadNew(StartMechTask, NULL, &machTask_attributes);
 800176c:	4a09      	ldr	r2, [pc, #36]	@ (8001794 <main+0x4c>)
 800176e:	2100      	movs	r1, #0
 8001770:	4809      	ldr	r0, [pc, #36]	@ (8001798 <main+0x50>)
 8001772:	f009 f87d 	bl	800a870 <osThreadNew>
 8001776:	4603      	mov	r3, r0
 8001778:	4a08      	ldr	r2, [pc, #32]	@ (800179c <main+0x54>)
 800177a:	6013      	str	r3, [r2, #0]

  /* creation of serialTask */
  serialTaskHandle = osThreadNew(StartSerialTask, NULL, &serialTask_attributes);
 800177c:	4a08      	ldr	r2, [pc, #32]	@ (80017a0 <main+0x58>)
 800177e:	2100      	movs	r1, #0
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <main+0x5c>)
 8001782:	f009 f875 	bl	800a870 <osThreadNew>
 8001786:	4603      	mov	r3, r0
 8001788:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <main+0x60>)
 800178a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800178c:	f009 f84a 	bl	800a824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <main+0x48>
 8001794:	0800e56c 	.word	0x0800e56c
 8001798:	08001c2d 	.word	0x08001c2d
 800179c:	200002f0 	.word	0x200002f0
 80017a0:	0800e590 	.word	0x0800e590
 80017a4:	08001c51 	.word	0x08001c51
 80017a8:	200002f4 	.word	0x200002f4

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	@ 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2230      	movs	r2, #48	@ 0x30
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00c facc 	bl	800dd58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	4b29      	ldr	r3, [pc, #164]	@ (800187c <SystemClock_Config+0xd0>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	4a28      	ldr	r2, [pc, #160]	@ (800187c <SystemClock_Config+0xd0>)
 80017da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e0:	4b26      	ldr	r3, [pc, #152]	@ (800187c <SystemClock_Config+0xd0>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	4b23      	ldr	r3, [pc, #140]	@ (8001880 <SystemClock_Config+0xd4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017f8:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <SystemClock_Config+0xd4>)
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <SystemClock_Config+0xd4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800180c:	2301      	movs	r3, #1
 800180e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001810:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001816:	2302      	movs	r3, #2
 8001818:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800181a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800181e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001820:	2319      	movs	r3, #25
 8001822:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001824:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800182a:	2304      	movs	r3, #4
 800182c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800182e:	2307      	movs	r3, #7
 8001830:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001832:	f107 0320 	add.w	r3, r7, #32
 8001836:	4618      	mov	r0, r3
 8001838:	f004 fa7a 	bl	8005d30 <HAL_RCC_OscConfig>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001842:	f000 fb05 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	230f      	movs	r3, #15
 8001848:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001852:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001856:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001858:	2300      	movs	r3, #0
 800185a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	2102      	movs	r1, #2
 8001862:	4618      	mov	r0, r3
 8001864:	f004 fcdc 	bl	8006220 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800186e:	f000 faef 	bl	8001e50 <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	@ 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800188a:	463b      	mov	r3, r7
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <MX_ADC1_Init+0x98>)
 8001898:	4a21      	ldr	r2, [pc, #132]	@ (8001920 <MX_ADC1_Init+0x9c>)
 800189a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800189c:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <MX_ADC1_Init+0x98>)
 800189e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <MX_ADC1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018aa:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <MX_ADC1_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_ADC1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <MX_ADC1_Init+0x98>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <MX_ADC1_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018c4:	4b15      	ldr	r3, [pc, #84]	@ (800191c <MX_ADC1_Init+0x98>)
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <MX_ADC1_Init+0xa0>)
 80018c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_ADC1_Init+0x98>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <MX_ADC1_Init+0x98>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_ADC1_Init+0x98>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018de:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_ADC1_Init+0x98>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <MX_ADC1_Init+0x98>)
 80018e6:	f000 fe4d 	bl	8002584 <HAL_ADC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018f0:	f000 faae 	bl	8001e50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	463b      	mov	r3, r7
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_ADC1_Init+0x98>)
 8001906:	f000 fe81 	bl	800260c <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001910:	f000 fa9e 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001c4 	.word	0x200001c4
 8001920:	40012000 	.word	0x40012000
 8001924:	0f000001 	.word	0x0f000001

08001928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <MX_I2C1_Init+0x50>)
 800192e:	4a13      	ldr	r2, [pc, #76]	@ (800197c <MX_I2C1_Init+0x54>)
 8001930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <MX_I2C1_Init+0x58>)
 8001936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001938:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <MX_I2C1_Init+0x50>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001946:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800194a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001952:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001958:	4b07      	ldr	r3, [pc, #28]	@ (8001978 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195e:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001964:	4804      	ldr	r0, [pc, #16]	@ (8001978 <MX_I2C1_Init+0x50>)
 8001966:	f001 faef 	bl	8002f48 <HAL_I2C_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001970:	f000 fa6e 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000020c 	.word	0x2000020c
 800197c:	40005400 	.word	0x40005400
 8001980:	000186a0 	.word	0x000186a0

08001984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80019ae:	4b31      	ldr	r3, [pc, #196]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019b0:	2253      	movs	r2, #83	@ 0x53
 80019b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80019ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019bc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ce:	4829      	ldr	r0, [pc, #164]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019d0:	f004 fef4 	bl	80067bc <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019da:	f000 fa39 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4619      	mov	r1, r3
 80019ec:	4821      	ldr	r0, [pc, #132]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 80019ee:	f005 fb27 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019f8:	f000 fa2a 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	@ 0x60
 80019fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4818      	ldr	r0, [pc, #96]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 8001a14:	f005 f812 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a1e:	f000 fa17 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2204      	movs	r2, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	4812      	ldr	r0, [pc, #72]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 8001a2a:	f005 f807 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a34:	f000 fa0c 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 8001a40:	f004 fffc 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001a4a:	f000 fa01 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	220c      	movs	r2, #12
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 8001a56:	f004 fff1 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001a60:	f000 f9f6 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a64:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <MX_TIM2_Init+0xf0>)
 8001a66:	f000 fbcb 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	@ 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000260 	.word	0x20000260

08001a78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	f107 0320 	add.w	r3, r7, #32
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]
 8001a96:	615a      	str	r2, [r3, #20]
 8001a98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001a9c:	4a32      	ldr	r2, [pc, #200]	@ (8001b68 <MX_TIM3_Init+0xf0>)
 8001a9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001aa2:	2253      	movs	r2, #83	@ 0x53
 8001aa4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001aae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ac0:	4828      	ldr	r0, [pc, #160]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001ac2:	f004 fe7b 	bl	80067bc <HAL_TIM_PWM_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001acc:	f000 f9c0 	bl	8001e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad8:	f107 0320 	add.w	r3, r7, #32
 8001adc:	4619      	mov	r1, r3
 8001ade:	4821      	ldr	r0, [pc, #132]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001ae0:	f005 faae 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001aea:	f000 f9b1 	bl	8001e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aee:	2360      	movs	r3, #96	@ 0x60
 8001af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4817      	ldr	r0, [pc, #92]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001b06:	f004 ff99 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b10:	f000 f99e 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2204      	movs	r2, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4812      	ldr	r0, [pc, #72]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001b1c:	f004 ff8e 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b26:	f000 f993 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001b32:	f004 ff83 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001b3c:	f000 f988 	bl	8001e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	220c      	movs	r2, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001b48:	f004 ff78 	bl	8006a3c <HAL_TIM_PWM_ConfigChannel>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001b52:	f000 f97d 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b56:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <MX_TIM3_Init+0xec>)
 8001b58:	f000 fb52 	bl	8002200 <HAL_TIM_MspPostInit>

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200002a8 	.word	0x200002a8
 8001b68:	40000400 	.word	0x40000400

08001b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b24      	ldr	r3, [pc, #144]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0304 	and.w	r3, r3, #4
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b1d      	ldr	r3, [pc, #116]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a18      	ldr	r2, [pc, #96]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b16      	ldr	r3, [pc, #88]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <MX_GPIO_Init+0xb8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf8:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <MX_GPIO_Init+0xbc>)
 8001bfa:	f001 f98b 	bl	8002f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_GPIO_Init+0xbc>)
 8001c18:	f000 fff8 	bl	8002c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	@ 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020800 	.word	0x40020800

08001c2c <StartMechTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMechTask */
void StartMechTask(void *argument)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001c34:	f00b fb80 	bl	800d338 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	uint8_t data[24];
	for (;;)
	{
		CDC_Transmit_FS(data, 24);
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2118      	movs	r1, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00b fc38 	bl	800d4b4 <CDC_Transmit_FS>
		osDelay(40);
 8001c44:	2028      	movs	r0, #40	@ 0x28
 8001c46:	f008 fea5 	bl	800a994 <osDelay>
	{
 8001c4a:	bf00      	nop
 8001c4c:	e7f4      	b.n	8001c38 <StartMechTask+0xc>
	...

08001c50 <StartSerialTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSerialTask */
void StartSerialTask(void *argument)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSerialTask */
	/* Infinite loop */
	osDelay(500);
 8001c58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c5c:	f008 fe9a 	bl	800a994 <osDelay>
	MPU6050_init(&hi2c1, SAMPLING_RATE_1KHZ, GYRO_500DS, ACCEL_8G);
 8001c60:	2310      	movs	r3, #16
 8001c62:	2208      	movs	r2, #8
 8001c64:	2107      	movs	r1, #7
 8001c66:	486b      	ldr	r0, [pc, #428]	@ (8001e14 <StartSerialTask+0x1c4>)
 8001c68:	f7ff f8ee 	bl	8000e48 <MPU6050_init>
	MPU6050_calibrate(1000);
 8001c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c70:	f7ff f976 	bl	8000f60 <MPU6050_calibrate>
	BMP180_initCalibrate(&hi2c1);
 8001c74:	4867      	ldr	r0, [pc, #412]	@ (8001e14 <StartSerialTask+0x1c4>)
 8001c76:	f7ff fc95 	bl	80015a4 <BMP180_initCalibrate>

	float error_x = 0, error_y = 0; // init values for kalman filter
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
	float error_prev_x = 0, error_prev_y = 0;
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
	float iterm_prev_x = 0, iterm_prev_y = 0;
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
	float out_x = 0, out_y = 0;
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]

	// set start time
	uint32_t time_from_start = xTaskGetTickCount();
 8001caa:	f009 ff81 	bl	800bbb0 <xTaskGetTickCount>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cb6:	4858      	ldr	r0, [pc, #352]	@ (8001e18 <StartSerialTask+0x1c8>)
 8001cb8:	f001 f92c 	bl	8002f14 <HAL_GPIO_WritePin>

	for (;;)
	{
		MPU6050_getAnglesKalman(angles_kal, time_from_start);
 8001cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cbe:	4857      	ldr	r0, [pc, #348]	@ (8001e1c <StartSerialTask+0x1cc>)
 8001cc0:	f7ff fb84 	bl	80013cc <MPU6050_getAnglesKalman>

		// calculate PID
		error_x = 2 * (angles_des[0] - angles_kal[0]);
 8001cc4:	4b56      	ldr	r3, [pc, #344]	@ (8001e20 <StartSerialTask+0x1d0>)
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	4b54      	ldr	r3, [pc, #336]	@ (8001e1c <StartSerialTask+0x1cc>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cd8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		error_y = 2 * (angles_des[1] - angles_kal[1]);
 8001cdc:	4b50      	ldr	r3, [pc, #320]	@ (8001e20 <StartSerialTask+0x1d0>)
 8001cde:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <StartSerialTask+0x1cc>)
 8001ce4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cf0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		calculatePID_xy(error_x, &error_prev_x, &iterm_prev_x, &out_x);
 8001cf4:	f107 0210 	add.w	r2, r7, #16
 8001cf8:	f107 0118 	add.w	r1, r7, #24
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	4618      	mov	r0, r3
 8001d02:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001d06:	f000 f8db 	bl	8001ec0 <calculatePID_xy>
		calculatePID_xy(error_y, &error_prev_y, &iterm_prev_y, &out_y);
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	f107 0114 	add.w	r1, r7, #20
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4618      	mov	r0, r3
 8001d18:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001d1c:	f000 f8d0 	bl	8001ec0 <calculatePID_xy>

		// TODO do someth with z angle
		//		calculatePID_z(error_z, &error_prev_z, &iterm_prev_z, &out_z);

		motors[0] = roundf(1000 + out_x + out_y);
 8001d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d24:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001e24 <StartSerialTask+0x1d4>
 8001d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	f00c fba4 	bl	800e484 <roundf>
 8001d3c:	eef0 7a40 	vmov.f32	s15, s0
 8001d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d44:	ee17 3a90 	vmov	r3, s15
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001d4c:	801a      	strh	r2, [r3, #0]
		motors[1] = roundf(1000 - out_x + out_y);
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001e24 <StartSerialTask+0x1d4>
 8001d56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	f00c fb8d 	bl	800e484 <roundf>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001d7a:	805a      	strh	r2, [r3, #2]
		motors[2] = roundf(1000 - out_x - out_y);
 8001d7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d80:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001e24 <StartSerialTask+0x1d4>
 8001d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d90:	eeb0 0a67 	vmov.f32	s0, s15
 8001d94:	f00c fb76 	bl	800e484 <roundf>
 8001d98:	eef0 7a40 	vmov.f32	s15, s0
 8001d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da0:	ee17 3a90 	vmov	r3, s15
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001da8:	809a      	strh	r2, [r3, #4]
		motors[3] = roundf(1000 + out_x - out_y);
 8001daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dae:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e24 <StartSerialTask+0x1d4>
 8001db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	f00c fb5f 	bl	800e484 <roundf>
 8001dc6:	eef0 7a40 	vmov.f32	s15, s0
 8001dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001dd6:	80da      	strh	r2, [r3, #6]
		norm_motors(motors);
 8001dd8:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001dda:	f000 f83f 	bl	8001e5c <norm_motors>
		motors[0] += 50; // not really necessary, just for fun
 8001dde:	4b12      	ldr	r3, [pc, #72]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	3332      	adds	r3, #50	@ 0x32
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001de8:	801a      	strh	r2, [r3, #0]
		motors[1] += 50;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001dec:	885b      	ldrh	r3, [r3, #2]
 8001dee:	3332      	adds	r3, #50	@ 0x32
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001df4:	805a      	strh	r2, [r3, #2]
		motors[2] += 50;
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	3332      	adds	r3, #50	@ 0x32
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001e00:	809a      	strh	r2, [r3, #4]
		motors[3] += 50;
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001e04:	88db      	ldrh	r3, [r3, #6]
 8001e06:	3332      	adds	r3, #50	@ 0x32
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <StartSerialTask+0x1d8>)
 8001e0c:	80da      	strh	r2, [r3, #6]
	{
 8001e0e:	bf00      	nop
 8001e10:	e754      	b.n	8001cbc <StartSerialTask+0x6c>
 8001e12:	bf00      	nop
 8001e14:	2000020c 	.word	0x2000020c
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	200002f8 	.word	0x200002f8
 8001e20:	20000304 	.word	0x20000304
 8001e24:	447a0000 	.word	0x447a0000
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e3e:	f000 fb5d 	bl	80024fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <Error_Handler+0x8>

08001e5c <norm_motors>:
float P_rate_xy = 1.5, I_rate_xy = 1.0, D_rate_xy = 0.5;
float P_rate_z = 2, I_rate_z = 12, D_rate_z = 0.03;

#include "main.h"

void norm_motors(uint16_t *motors){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 5; i++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e020      	b.n	8001eac <norm_motors+0x50>
		if(motors[i] < 1000) motors[i] = 1000;
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e78:	d206      	bcs.n	8001e88 <norm_motors+0x2c>
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e86:	801a      	strh	r2, [r3, #0]
		if(motors[i] > 2000) motors[i] = 2000;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001e96:	d906      	bls.n	8001ea6 <norm_motors+0x4a>
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001ea4:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < 5; i++){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d9db      	bls.n	8001e6a <norm_motors+0xe>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <calculatePID_xy>:

	TIM3->CCR1 = motors[5]; // camera servo
}


void calculatePID_xy(float error, float *error_prev, float *itemr_prev, float *output){
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001eca:	60b8      	str	r0, [r7, #8]
 8001ecc:	6079      	str	r1, [r7, #4]
 8001ece:	603a      	str	r2, [r7, #0]
	float Pterm = P_rate_xy * error;
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8002008 <calculatePID_xy+0x148>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	edc7 7a05 	vstr	s15, [r7, #20]

	float Iterm = *itemr_prev + I_rate_xy * (error + *error_prev) * 0.002;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fade 	bl	80004a8 <__aeabi_f2d>
 8001eec:	4604      	mov	r4, r0
 8001eee:	460d      	mov	r5, r1
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001efe:	4b43      	ldr	r3, [pc, #268]	@ (800200c <calculatePID_xy+0x14c>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	ee17 0a90 	vmov	r0, s15
 8001f0c:	f7fe facc 	bl	80004a8 <__aeabi_f2d>
 8001f10:	a339      	add	r3, pc, #228	@ (adr r3, 8001ff8 <calculatePID_xy+0x138>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb1f 	bl	8000558 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7fe f963 	bl	80001ec <__adddf3>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fdc3 	bl	8000ab8 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61fb      	str	r3, [r7, #28]
	if (Iterm > 400.0) Iterm = 400;
 8001f36:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f3a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002010 <calculatePID_xy+0x150>
 8001f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	dd01      	ble.n	8001f4c <calculatePID_xy+0x8c>
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <calculatePID_xy+0x154>)
 8001f4a:	61fb      	str	r3, [r7, #28]
	if (Iterm < -400.0) Iterm = -400;
 8001f4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f50:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002018 <calculatePID_xy+0x158>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d501      	bpl.n	8001f62 <calculatePID_xy+0xa2>
 8001f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800201c <calculatePID_xy+0x15c>)
 8001f60:	61fb      	str	r3, [r7, #28]

	float Dterm = D_rate_xy*(error - *error_prev)/0.004;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f70:	4b2b      	ldr	r3, [pc, #172]	@ (8002020 <calculatePID_xy+0x160>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7a:	ee17 0a90 	vmov	r0, s15
 8001f7e:	f7fe fa93 	bl	80004a8 <__aeabi_f2d>
 8001f82:	a31f      	add	r3, pc, #124	@ (adr r3, 8002000 <calculatePID_xy+0x140>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fc10 	bl	80007ac <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fd90 	bl	8000ab8 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	61bb      	str	r3, [r7, #24]
	if (Dterm > 400.0) Dterm = 400;
 8001f9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fa0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002010 <calculatePID_xy+0x150>
 8001fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fac:	dd01      	ble.n	8001fb2 <calculatePID_xy+0xf2>
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <calculatePID_xy+0x154>)
 8001fb0:	61bb      	str	r3, [r7, #24]
	if (Dterm < -400.0) Dterm = -400;
 8001fb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fb6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002018 <calculatePID_xy+0x158>
 8001fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d501      	bpl.n	8001fc8 <calculatePID_xy+0x108>
 8001fc4:	4b15      	ldr	r3, [pc, #84]	@ (800201c <calculatePID_xy+0x15c>)
 8001fc6:	61bb      	str	r3, [r7, #24]

	*output = Pterm + Iterm + Dterm;
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	edc3 7a00 	vstr	s15, [r3]
	*error_prev = error;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]
	*itemr_prev = Iterm;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	601a      	str	r2, [r3, #0]


}
 8001fee:	bf00      	nop
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ffc:	3f60624d 	.word	0x3f60624d
 8002000:	d2f1a9fc 	.word	0xd2f1a9fc
 8002004:	3f70624d 	.word	0x3f70624d
 8002008:	20000014 	.word	0x20000014
 800200c:	20000018 	.word	0x20000018
 8002010:	43c80000 	.word	0x43c80000
 8002014:	43c80000 	.word	0x43c80000
 8002018:	c3c80000 	.word	0xc3c80000
 800201c:	c3c80000 	.word	0xc3c80000
 8002020:	2000001c 	.word	0x2000001c

08002024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <HAL_MspInit+0x54>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002038:	6453      	str	r3, [r2, #68]	@ 0x44
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <HAL_MspInit+0x54>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <HAL_MspInit+0x54>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	@ 0x40
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_MspInit+0x54>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f000 fda5 	bl	8002bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_ADC_MspInit+0x7c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d127      	bne.n	80020ee <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	4a15      	ldr	r2, [pc, #84]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	4a0e      	ldr	r2, [pc, #56]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_ADC_MspInit+0x80>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020d6:	2310      	movs	r3, #16
 80020d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020da:	2303      	movs	r3, #3
 80020dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <HAL_ADC_MspInit+0x84>)
 80020ea:	f000 fd8f 	bl	8002c0c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	@ 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40012000 	.word	0x40012000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <HAL_I2C_MspInit+0x84>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12b      	bne.n	800217e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b18      	ldr	r3, [pc, #96]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a17      	ldr	r2, [pc, #92]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002146:	2312      	movs	r3, #18
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002152:	2304      	movs	r3, #4
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <HAL_I2C_MspInit+0x8c>)
 800215e:	f000 fd55 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002170:	6413      	str	r3, [r2, #64]	@ 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40005400 	.word	0x40005400
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a4:	d10e      	bne.n	80021c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b13      	ldr	r3, [pc, #76]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021c2:	e012      	b.n	80021ea <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0c      	ldr	r2, [pc, #48]	@ (80021fc <HAL_TIM_PWM_MspInit+0x68>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10d      	bne.n	80021ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	4a08      	ldr	r2, [pc, #32]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_TIM_PWM_MspInit+0x64>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40000400 	.word	0x40000400

08002200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002220:	d11e      	bne.n	8002260 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b31      	ldr	r3, [pc, #196]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a30      	ldr	r2, [pc, #192]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800223e:	230f      	movs	r3, #15
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800224e:	2301      	movs	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4825      	ldr	r0, [pc, #148]	@ (80022f0 <HAL_TIM_MspPostInit+0xf0>)
 800225a:	f000 fcd7 	bl	8002c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800225e:	e040      	b.n	80022e2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_TIM_MspPostInit+0xf4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d13b      	bne.n	80022e2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_TIM_MspPostInit+0xec>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a2:	23c0      	movs	r3, #192	@ 0xc0
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022b2:	2302      	movs	r3, #2
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	480c      	ldr	r0, [pc, #48]	@ (80022f0 <HAL_TIM_MspPostInit+0xf0>)
 80022be:	f000 fca5 	bl	8002c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c2:	2303      	movs	r3, #3
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022d2:	2302      	movs	r3, #2
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4806      	ldr	r0, [pc, #24]	@ (80022f8 <HAL_TIM_MspPostInit+0xf8>)
 80022de:	f000 fc95 	bl	8002c0c <HAL_GPIO_Init>
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40020400 	.word	0x40020400

080022fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08c      	sub	sp, #48	@ 0x30
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <HAL_InitTick+0xd0>)
 8002312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002314:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <HAL_InitTick+0xd0>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6453      	str	r3, [r2, #68]	@ 0x44
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_InitTick+0xd0>)
 800231e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002328:	f107 020c 	add.w	r2, r7, #12
 800232c:	f107 0310 	add.w	r3, r7, #16
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 f954 	bl	80065e0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002338:	f004 f93e 	bl	80065b8 <HAL_RCC_GetPCLK2Freq>
 800233c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <HAL_InitTick+0xd4>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	3b01      	subs	r3, #1
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800234c:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <HAL_InitTick+0xd8>)
 800234e:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_InitTick+0xdc>)
 8002350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002352:	4b20      	ldr	r3, [pc, #128]	@ (80023d4 <HAL_InitTick+0xd8>)
 8002354:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002358:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800235a:	4a1e      	ldr	r2, [pc, #120]	@ (80023d4 <HAL_InitTick+0xd8>)
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002360:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <HAL_InitTick+0xd8>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002366:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_InitTick+0xd8>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236c:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <HAL_InitTick+0xd8>)
 800236e:	2200      	movs	r2, #0
 8002370:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002372:	4818      	ldr	r0, [pc, #96]	@ (80023d4 <HAL_InitTick+0xd8>)
 8002374:	f004 f966 	bl	8006644 <HAL_TIM_Base_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800237e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11b      	bne.n	80023be <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002386:	4813      	ldr	r0, [pc, #76]	@ (80023d4 <HAL_InitTick+0xd8>)
 8002388:	f004 f9b6 	bl	80066f8 <HAL_TIM_Base_Start_IT>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002392:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002396:	2b00      	cmp	r3, #0
 8002398:	d111      	bne.n	80023be <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800239a:	2019      	movs	r0, #25
 800239c:	f000 fc28 	bl	8002bf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b0f      	cmp	r3, #15
 80023a4:	d808      	bhi.n	80023b8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023a6:	2200      	movs	r2, #0
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	2019      	movs	r0, #25
 80023ac:	f000 fc04 	bl	8002bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023b0:	4a0a      	ldr	r2, [pc, #40]	@ (80023dc <HAL_InitTick+0xe0>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e002      	b.n	80023be <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80023be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3730      	adds	r7, #48	@ 0x30
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	431bde83 	.word	0x431bde83
 80023d4:	20000310 	.word	0x20000310
 80023d8:	40010000 	.word	0x40010000
 80023dc:	20000024 	.word	0x20000024

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <NMI_Handler+0x4>

080023e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <HardFault_Handler+0x4>

080023f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <MemManage_Handler+0x4>

080023f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fc:	bf00      	nop
 80023fe:	e7fd      	b.n	80023fc <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	bf00      	nop
 8002406:	e7fd      	b.n	8002404 <UsageFault_Handler+0x4>

08002408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4802      	ldr	r0, [pc, #8]	@ (8002428 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800241e:	f004 fa1c 	bl	800685a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000310 	.word	0x20000310

0800242c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002430:	4802      	ldr	r0, [pc, #8]	@ (800243c <OTG_FS_IRQHandler+0x10>)
 8002432:	f002 fb71 	bl	8004b18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20005a24 	.word	0x20005a24

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800249c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002468:	f7ff ffea 	bl	8002440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246e:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002484:	4c0a      	ldr	r4, [pc, #40]	@ (80024b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002492:	f00b fcc5 	bl	800de20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7ff f957 	bl	8001748 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800249c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80024a8:	0800e620 	.word	0x0800e620
  ldr r2, =_sbss
 80024ac:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80024b0:	20006268 	.word	0x20006268

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024bc:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_Init+0x40>)
 80024c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_Init+0x40>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <HAL_Init+0x40>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 fb5e 	bl	8002ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f7ff ff08 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fd9a 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00

080024fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000028 	.word	0x20000028
 8002520:	20000358 	.word	0x20000358

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000358 	.word	0x20000358

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000028 	.word	0x20000028

08002584 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e033      	b.n	8002602 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fd6a 	bl	800207c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d118      	bne.n	80025f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025ca:	f023 0302 	bic.w	r3, r3, #2
 80025ce:	f043 0202 	orr.w	r2, r3, #2
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f93a 	bl	8002850 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025f2:	e001      	b.n	80025f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1c>
 8002624:	2302      	movs	r3, #2
 8002626:	e105      	b.n	8002834 <HAL_ADC_ConfigChannel+0x228>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b09      	cmp	r3, #9
 8002636:	d925      	bls.n	8002684 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68d9      	ldr	r1, [r3, #12]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	3b1e      	subs	r3, #30
 800264e:	2207      	movs	r2, #7
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43da      	mvns	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	400a      	ands	r2, r1
 800265c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68d9      	ldr	r1, [r3, #12]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	b29b      	uxth	r3, r3
 800266e:	4618      	mov	r0, r3
 8002670:	4603      	mov	r3, r0
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4403      	add	r3, r0
 8002676:	3b1e      	subs	r3, #30
 8002678:	409a      	lsls	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e022      	b.n	80026ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	2207      	movs	r2, #7
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	400a      	ands	r2, r1
 80026a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	4603      	mov	r3, r0
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4403      	add	r3, r0
 80026c0:	409a      	lsls	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b06      	cmp	r3, #6
 80026d0:	d824      	bhi.n	800271c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b05      	subs	r3, #5
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43da      	mvns	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	400a      	ands	r2, r1
 80026f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	4618      	mov	r0, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3b05      	subs	r3, #5
 800270e:	fa00 f203 	lsl.w	r2, r0, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	635a      	str	r2, [r3, #52]	@ 0x34
 800271a:	e04c      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d824      	bhi.n	800276e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b23      	subs	r3, #35	@ 0x23
 8002736:	221f      	movs	r2, #31
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43da      	mvns	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	400a      	ands	r2, r1
 8002744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	3b23      	subs	r3, #35	@ 0x23
 8002760:	fa00 f203 	lsl.w	r2, r0, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	631a      	str	r2, [r3, #48]	@ 0x30
 800276c:	e023      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	3b41      	subs	r3, #65	@ 0x41
 8002780:	221f      	movs	r2, #31
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	400a      	ands	r2, r1
 800278e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	3b41      	subs	r3, #65	@ 0x41
 80027aa:	fa00 f203 	lsl.w	r2, r0, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_ADC_ConfigChannel+0x234>)
 80027b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_ADC_ConfigChannel+0x238>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d109      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1cc>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b12      	cmp	r3, #18
 80027ca:	d105      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	@ (8002844 <HAL_ADC_ConfigChannel+0x238>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d123      	bne.n	800282a <HAL_ADC_ConfigChannel+0x21e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d003      	beq.n	80027f2 <HAL_ADC_ConfigChannel+0x1e6>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b11      	cmp	r3, #17
 80027f0:	d11b      	bne.n	800282a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d111      	bne.n	800282a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_ADC_ConfigChannel+0x23c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a10      	ldr	r2, [pc, #64]	@ (800284c <HAL_ADC_ConfigChannel+0x240>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9a      	lsrs	r2, r3, #18
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800281c:	e002      	b.n	8002824 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40012300 	.word	0x40012300
 8002844:	40012000 	.word	0x40012000
 8002848:	20000020 	.word	0x20000020
 800284c:	431bde83 	.word	0x431bde83

08002850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002858:	4b79      	ldr	r3, [pc, #484]	@ (8002a40 <ADC_Init+0x1f0>)
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	021a      	lsls	r2, r3, #8
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6899      	ldr	r1, [r3, #8]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	4a58      	ldr	r2, [pc, #352]	@ (8002a44 <ADC_Init+0x1f4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d022      	beq.n	800292e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80028f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6899      	ldr	r1, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6899      	ldr	r1, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e00f      	b.n	800294e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800293c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800294c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0202 	bic.w	r2, r2, #2
 800295c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
 8002968:	005a      	lsls	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800298a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800299a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a6:	3b01      	subs	r3, #1
 80029a8:	035a      	lsls	r2, r3, #13
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	e007      	b.n	80029c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	3b01      	subs	r3, #1
 80029e0:	051a      	lsls	r2, r3, #20
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80029f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a06:	025a      	lsls	r2, r3, #9
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6899      	ldr	r1, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	029a      	lsls	r2, r3, #10
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012300 	.word	0x40012300
 8002a44:	0f000001 	.word	0x0f000001

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	@ (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	@ (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	@ (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	@ (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	@ 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ff4c 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bca:	f7ff ff61 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002bce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6978      	ldr	r0, [r7, #20]
 8002bd6:	f7ff ffb1 	bl	8002b3c <NVIC_EncodePriority>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ff80 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002be8:	bf00      	nop
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff54 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	@ 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e159      	b.n	8002edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8148 	bne.w	8002ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a2 	beq.w	8002ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	4b57      	ldr	r3, [pc, #348]	@ (8002ef4 <HAL_GPIO_Init+0x2e8>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9a:	4a56      	ldr	r2, [pc, #344]	@ (8002ef4 <HAL_GPIO_Init+0x2e8>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da2:	4b54      	ldr	r3, [pc, #336]	@ (8002ef4 <HAL_GPIO_Init+0x2e8>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dae:	4a52      	ldr	r2, [pc, #328]	@ (8002ef8 <HAL_GPIO_Init+0x2ec>)
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a49      	ldr	r2, [pc, #292]	@ (8002efc <HAL_GPIO_Init+0x2f0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d019      	beq.n	8002e0e <HAL_GPIO_Init+0x202>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a48      	ldr	r2, [pc, #288]	@ (8002f00 <HAL_GPIO_Init+0x2f4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d013      	beq.n	8002e0a <HAL_GPIO_Init+0x1fe>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a47      	ldr	r2, [pc, #284]	@ (8002f04 <HAL_GPIO_Init+0x2f8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00d      	beq.n	8002e06 <HAL_GPIO_Init+0x1fa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a46      	ldr	r2, [pc, #280]	@ (8002f08 <HAL_GPIO_Init+0x2fc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d007      	beq.n	8002e02 <HAL_GPIO_Init+0x1f6>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a45      	ldr	r2, [pc, #276]	@ (8002f0c <HAL_GPIO_Init+0x300>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d101      	bne.n	8002dfe <HAL_GPIO_Init+0x1f2>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x204>
 8002dfe:	2307      	movs	r3, #7
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x204>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x204>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x204>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x204>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e20:	4935      	ldr	r1, [pc, #212]	@ (8002ef8 <HAL_GPIO_Init+0x2ec>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b38      	ldr	r3, [pc, #224]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a24      	ldr	r2, [pc, #144]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e82:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eac:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f10 <HAL_GPIO_Init+0x304>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	f67f aea2 	bls.w	8002c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40013c00 	.word	0x40013c00

08002f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	807b      	strh	r3, [r7, #2]
 8002f20:	4613      	mov	r3, r2
 8002f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f24:	787b      	ldrb	r3, [r7, #1]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f30:	e003      	b.n	8002f3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f32:	887b      	ldrh	r3, [r7, #2]
 8002f34:	041a      	lsls	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	619a      	str	r2, [r3, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e12b      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff f8c8 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	@ 0x24
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fac:	f003 faf0 	bl	8006590 <HAL_RCC_GetPCLK1Freq>
 8002fb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4a81      	ldr	r2, [pc, #516]	@ (80031bc <HAL_I2C_Init+0x274>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d807      	bhi.n	8002fcc <HAL_I2C_Init+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4a80      	ldr	r2, [pc, #512]	@ (80031c0 <HAL_I2C_Init+0x278>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	bf94      	ite	ls
 8002fc4:	2301      	movls	r3, #1
 8002fc6:	2300      	movhi	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e006      	b.n	8002fda <HAL_I2C_Init+0x92>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4a7d      	ldr	r2, [pc, #500]	@ (80031c4 <HAL_I2C_Init+0x27c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	bf94      	ite	ls
 8002fd4:	2301      	movls	r3, #1
 8002fd6:	2300      	movhi	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0e7      	b.n	80031b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4a78      	ldr	r2, [pc, #480]	@ (80031c8 <HAL_I2C_Init+0x280>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0c9b      	lsrs	r3, r3, #18
 8002fec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4a6a      	ldr	r2, [pc, #424]	@ (80031bc <HAL_I2C_Init+0x274>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d802      	bhi.n	800301c <HAL_I2C_Init+0xd4>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3301      	adds	r3, #1
 800301a:	e009      	b.n	8003030 <HAL_I2C_Init+0xe8>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003022:	fb02 f303 	mul.w	r3, r2, r3
 8003026:	4a69      	ldr	r2, [pc, #420]	@ (80031cc <HAL_I2C_Init+0x284>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	3301      	adds	r3, #1
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003042:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	495c      	ldr	r1, [pc, #368]	@ (80031bc <HAL_I2C_Init+0x274>)
 800304c:	428b      	cmp	r3, r1
 800304e:	d819      	bhi.n	8003084 <HAL_I2C_Init+0x13c>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e59      	subs	r1, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fbb1 f3f3 	udiv	r3, r1, r3
 800305e:	1c59      	adds	r1, r3, #1
 8003060:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003064:	400b      	ands	r3, r1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_I2C_Init+0x138>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1e59      	subs	r1, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fbb1 f3f3 	udiv	r3, r1, r3
 8003078:	3301      	adds	r3, #1
 800307a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307e:	e051      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003080:	2304      	movs	r3, #4
 8003082:	e04f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d111      	bne.n	80030b0 <HAL_I2C_Init+0x168>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e58      	subs	r0, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6859      	ldr	r1, [r3, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	440b      	add	r3, r1
 800309a:	fbb0 f3f3 	udiv	r3, r0, r3
 800309e:	3301      	adds	r3, #1
 80030a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e012      	b.n	80030d6 <HAL_I2C_Init+0x18e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	0099      	lsls	r1, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_Init+0x196>
 80030da:	2301      	movs	r3, #1
 80030dc:	e022      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10e      	bne.n	8003104 <HAL_I2C_Init+0x1bc>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1e58      	subs	r0, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6859      	ldr	r1, [r3, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003102:	e00f      	b.n	8003124 <HAL_I2C_Init+0x1dc>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	6809      	ldr	r1, [r1, #0]
 8003128:	4313      	orrs	r3, r2
 800312a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003152:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6911      	ldr	r1, [r2, #16]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68d2      	ldr	r2, [r2, #12]
 800315e:	4311      	orrs	r1, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	430b      	orrs	r3, r1
 8003166:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	000186a0 	.word	0x000186a0
 80031c0:	001e847f 	.word	0x001e847f
 80031c4:	003d08ff 	.word	0x003d08ff
 80031c8:	431bde83 	.word	0x431bde83
 80031cc:	10624dd3 	.word	0x10624dd3

080031d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	461a      	mov	r2, r3
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
 80031e0:	4613      	mov	r3, r2
 80031e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff f99e 	bl	8002524 <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	f040 80e0 	bne.w	80033b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	4970      	ldr	r1, [pc, #448]	@ (80033c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f001 f90e 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
 8003210:	e0d3      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_I2C_Master_Transmit+0x50>
 800321c:	2302      	movs	r3, #2
 800321e:	e0cc      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d007      	beq.n	8003246 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003254:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2221      	movs	r2, #33	@ 0x21
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2210      	movs	r2, #16
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	893a      	ldrh	r2, [r7, #8]
 8003276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a50      	ldr	r2, [pc, #320]	@ (80033c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003286:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003288:	8979      	ldrh	r1, [r7, #10]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 fdfa 	bl	8003e88 <I2C_MasterRequestWrite>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e08d      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032b4:	e066      	b.n	8003384 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	6a39      	ldr	r1, [r7, #32]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 f9cc 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00d      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	781a      	ldrb	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d11b      	bne.n	8003358 <HAL_I2C_Master_Transmit+0x188>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	781a      	ldrb	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f001 f9c3 	bl	80046e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2b04      	cmp	r3, #4
 800336e:	d107      	bne.n	8003380 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e01a      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003388:	2b00      	cmp	r3, #0
 800338a:	d194      	bne.n	80032b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	00100002 	.word	0x00100002
 80033c8:	ffff0000 	.word	0xffff0000

080033cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08c      	sub	sp, #48	@ 0x30
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	461a      	mov	r2, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	817b      	strh	r3, [r7, #10]
 80033dc:	4613      	mov	r3, r2
 80033de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff f8a0 	bl	8002524 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	f040 8217 	bne.w	8003822 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2319      	movs	r3, #25
 80033fa:	2201      	movs	r2, #1
 80033fc:	497c      	ldr	r1, [pc, #496]	@ (80035f0 <HAL_I2C_Master_Receive+0x224>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f001 f810 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	e20a      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_I2C_Master_Receive+0x50>
 8003418:	2302      	movs	r3, #2
 800341a:	e203      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d007      	beq.n	8003442 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003450:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2222      	movs	r2, #34	@ 0x22
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2210      	movs	r2, #16
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	893a      	ldrh	r2, [r7, #8]
 8003472:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4a5c      	ldr	r2, [pc, #368]	@ (80035f4 <HAL_I2C_Master_Receive+0x228>)
 8003482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003484:	8979      	ldrh	r1, [r7, #10]
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fd7e 	bl	8003f8c <I2C_MasterRequestRead>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c4      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d113      	bne.n	80034ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a2:	2300      	movs	r3, #0
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e198      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d11b      	bne.n	800350a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e178      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350e:	2b02      	cmp	r3, #2
 8003510:	d11b      	bne.n	800354a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003520:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	61bb      	str	r3, [r7, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	e158      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003570:	e144      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003576:	2b03      	cmp	r3, #3
 8003578:	f200 80f1 	bhi.w	800375e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003580:	2b01      	cmp	r3, #1
 8003582:	d123      	bne.n	80035cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f001 f8f5 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e145      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035ca:	e117      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d14e      	bne.n	8003672 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	2200      	movs	r2, #0
 80035dc:	4906      	ldr	r1, [pc, #24]	@ (80035f8 <HAL_I2C_Master_Receive+0x22c>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 ff20 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e11a      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
 80035ee:	bf00      	nop
 80035f0:	00100002 	.word	0x00100002
 80035f4:	ffff0000 	.word	0xffff0000
 80035f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003670:	e0c4      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003678:	2200      	movs	r2, #0
 800367a:	496c      	ldr	r1, [pc, #432]	@ (800382c <HAL_I2C_Master_Receive+0x460>)
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fed1 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0cb      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800369a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	4955      	ldr	r1, [pc, #340]	@ (800382c <HAL_I2C_Master_Receive+0x460>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fea3 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e09d      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800375c:	e04e      	b.n	80037fc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800375e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f001 f808 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e058      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379a:	b29b      	uxth	r3, r3
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d124      	bne.n	80037fc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d107      	bne.n	80037ca <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	f47f aeb6 	bne.w	8003572 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	00010004 	.word	0x00010004

08003830 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384a:	f7fe fe6b 	bl	8002524 <HAL_GetTick>
 800384e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	f040 80d9 	bne.w	8003a10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2319      	movs	r3, #25
 8003864:	2201      	movs	r2, #1
 8003866:	496d      	ldr	r1, [pc, #436]	@ (8003a1c <HAL_I2C_Mem_Write+0x1ec>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fddb 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
 8003876:	e0cc      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2C_Mem_Write+0x56>
 8003882:	2302      	movs	r3, #2
 8003884:	e0c5      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d007      	beq.n	80038ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2221      	movs	r2, #33	@ 0x21
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2240      	movs	r2, #64	@ 0x40
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a3a      	ldr	r2, [r7, #32]
 80038d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003a20 <HAL_I2C_Mem_Write+0x1f0>)
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ee:	88f8      	ldrh	r0, [r7, #6]
 80038f0:	893a      	ldrh	r2, [r7, #8]
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4603      	mov	r3, r0
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fc12 	bl	8004128 <I2C_RequestMemoryWrite>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d052      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e081      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fea0 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	2b04      	cmp	r3, #4
 8003924:	d107      	bne.n	8003936 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003934:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06b      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b04      	cmp	r3, #4
 8003976:	d11b      	bne.n	80039b0 <HAL_I2C_Mem_Write+0x180>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d017      	beq.n	80039b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	781a      	ldrb	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1aa      	bne.n	800390e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fe93 	bl	80046e8 <I2C_WaitOnBTFFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d107      	bne.n	80039e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e016      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	00100002 	.word	0x00100002
 8003a20:	ffff0000 	.word	0xffff0000

08003a24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	@ 0x30
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	4608      	mov	r0, r1
 8003a2e:	4611      	mov	r1, r2
 8003a30:	461a      	mov	r2, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	460b      	mov	r3, r1
 8003a38:	813b      	strh	r3, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a3e:	f7fe fd71 	bl	8002524 <HAL_GetTick>
 8003a42:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	f040 8214 	bne.w	8003e7a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2319      	movs	r3, #25
 8003a58:	2201      	movs	r2, #1
 8003a5a:	497b      	ldr	r1, [pc, #492]	@ (8003c48 <HAL_I2C_Mem_Read+0x224>)
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fce1 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e207      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x56>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e200      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d007      	beq.n	8003aa0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2222      	movs	r2, #34	@ 0x22
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2240      	movs	r2, #64	@ 0x40
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a5b      	ldr	r2, [pc, #364]	@ (8003c4c <HAL_I2C_Mem_Read+0x228>)
 8003ae0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ae2:	88f8      	ldrh	r0, [r7, #6]
 8003ae4:	893a      	ldrh	r2, [r7, #8]
 8003ae6:	8979      	ldrh	r1, [r7, #10]
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	4603      	mov	r3, r0
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fbae 	bl	8004254 <I2C_RequestMemoryRead>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1bc      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d113      	bne.n	8003b32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	623b      	str	r3, [r7, #32]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	623b      	str	r3, [r7, #32]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e190      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d11b      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e170      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d11b      	bne.n	8003bb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	e150      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bc8:	e144      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	f200 80f1 	bhi.w	8003db6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d123      	bne.n	8003c24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bde:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fdc9 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e145      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c22:	e117      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d14e      	bne.n	8003cca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c32:	2200      	movs	r2, #0
 8003c34:	4906      	ldr	r1, [pc, #24]	@ (8003c50 <HAL_I2C_Mem_Read+0x22c>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fbf4 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e11a      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
 8003c46:	bf00      	nop
 8003c48:	00100002 	.word	0x00100002
 8003c4c:	ffff0000 	.word	0xffff0000
 8003c50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cc8:	e0c4      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	496c      	ldr	r1, [pc, #432]	@ (8003e84 <HAL_I2C_Mem_Read+0x460>)
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fba5 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0cb      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4955      	ldr	r1, [pc, #340]	@ (8003e84 <HAL_I2C_Mem_Read+0x460>)
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 fb77 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e09d      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db4:	e04e      	b.n	8003e54 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fcdc 	bl	8004778 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e058      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d124      	bne.n	8003e54 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d107      	bne.n	8003e22 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f aeb6 	bne.w	8003bca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	e000      	b.n	8003e7c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
  }
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3728      	adds	r7, #40	@ 0x28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	00010004 	.word	0x00010004

08003e88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	460b      	mov	r3, r1
 8003e96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d006      	beq.n	8003eb2 <I2C_MasterRequestWrite+0x2a>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d003      	beq.n	8003eb2 <I2C_MasterRequestWrite+0x2a>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eb0:	d108      	bne.n	8003ec4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	e00b      	b.n	8003edc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	2b12      	cmp	r3, #18
 8003eca:	d107      	bne.n	8003edc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa9b 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f02:	d103      	bne.n	8003f0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e035      	b.n	8003f7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f18:	d108      	bne.n	8003f2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	e01b      	b.n	8003f64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f2c:	897b      	ldrh	r3, [r7, #10]
 8003f2e:	11db      	asrs	r3, r3, #7
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0306 	and.w	r3, r3, #6
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	f063 030f 	orn	r3, r3, #15
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	490e      	ldr	r1, [pc, #56]	@ (8003f84 <I2C_MasterRequestWrite+0xfc>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 fae4 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e010      	b.n	8003f7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f5a:	897b      	ldrh	r3, [r7, #10]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4907      	ldr	r1, [pc, #28]	@ (8003f88 <I2C_MasterRequestWrite+0x100>)
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fad4 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	00010008 	.word	0x00010008
 8003f88:	00010002 	.word	0x00010002

08003f8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d006      	beq.n	8003fc6 <I2C_MasterRequestRead+0x3a>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d003      	beq.n	8003fc6 <I2C_MasterRequestRead+0x3a>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fc4:	d108      	bne.n	8003fd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	e00b      	b.n	8003ff0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	2b11      	cmp	r3, #17
 8003fde:	d107      	bne.n	8003ff0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fa11 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004016:	d103      	bne.n	8004020 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800401e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e079      	b.n	8004118 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800402c:	d108      	bne.n	8004040 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800402e:	897b      	ldrh	r3, [r7, #10]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	e05f      	b.n	8004100 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004040:	897b      	ldrh	r3, [r7, #10]
 8004042:	11db      	asrs	r3, r3, #7
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0306 	and.w	r3, r3, #6
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f063 030f 	orn	r3, r3, #15
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4930      	ldr	r1, [pc, #192]	@ (8004120 <I2C_MasterRequestRead+0x194>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa5a 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e054      	b.n	8004118 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	b2da      	uxtb	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4929      	ldr	r1, [pc, #164]	@ (8004124 <I2C_MasterRequestRead+0x198>)
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fa4a 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e044      	b.n	8004118 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f9af 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00d      	beq.n	80040e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040da:	d103      	bne.n	80040e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e017      	b.n	8004118 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040e8:	897b      	ldrh	r3, [r7, #10]
 80040ea:	11db      	asrs	r3, r3, #7
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	f063 030e 	orn	r3, r3, #14
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	4907      	ldr	r1, [pc, #28]	@ (8004124 <I2C_MasterRequestRead+0x198>)
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fa06 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	00010008 	.word	0x00010008
 8004124:	00010002 	.word	0x00010002

08004128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4608      	mov	r0, r1
 8004132:	4611      	mov	r1, r2
 8004134:	461a      	mov	r2, r3
 8004136:	4603      	mov	r3, r0
 8004138:	817b      	strh	r3, [r7, #10]
 800413a:	460b      	mov	r3, r1
 800413c:	813b      	strh	r3, [r7, #8]
 800413e:	4613      	mov	r3, r2
 8004140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2200      	movs	r2, #0
 800415a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f960 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004178:	d103      	bne.n	8004182 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e05f      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004194:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	492d      	ldr	r1, [pc, #180]	@ (8004250 <I2C_RequestMemoryWrite+0x128>)
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f9bb 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e04c      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6a39      	ldr	r1, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa46 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d107      	bne.n	80041ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e02b      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f4:	893b      	ldrh	r3, [r7, #8]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	611a      	str	r2, [r3, #16]
 80041fe:	e021      	b.n	8004244 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004200:	893b      	ldrh	r3, [r7, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	b29b      	uxth	r3, r3
 8004206:	b2da      	uxtb	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	6a39      	ldr	r1, [r7, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa20 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00d      	beq.n	800423a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b04      	cmp	r3, #4
 8004224:	d107      	bne.n	8004236 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004234:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e005      	b.n	8004246 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800423a:	893b      	ldrh	r3, [r7, #8]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	00010002 	.word	0x00010002

08004254 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800427c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800428c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	2200      	movs	r2, #0
 8004296:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f8c2 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b4:	d103      	bne.n	80042be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0aa      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c2:	897b      	ldrh	r3, [r7, #10]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	4952      	ldr	r1, [pc, #328]	@ (8004420 <I2C_RequestMemoryRead+0x1cc>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f91d 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e097      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	6a39      	ldr	r1, [r7, #32]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f9a8 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	2b04      	cmp	r3, #4
 8004314:	d107      	bne.n	8004326 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004324:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e076      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	893b      	ldrh	r3, [r7, #8]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]
 800433a:	e021      	b.n	8004380 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800433c:	893b      	ldrh	r3, [r7, #8]
 800433e:	0a1b      	lsrs	r3, r3, #8
 8004340:	b29b      	uxth	r3, r3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434c:	6a39      	ldr	r1, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f982 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00d      	beq.n	8004376 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b04      	cmp	r3, #4
 8004360:	d107      	bne.n	8004372 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004370:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e050      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004376:	893b      	ldrh	r3, [r7, #8]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004382:	6a39      	ldr	r1, [r7, #32]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f967 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00d      	beq.n	80043ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	2b04      	cmp	r3, #4
 8004396:	d107      	bne.n	80043a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e035      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f82b 	bl	8004424 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e2:	d103      	bne.n	80043ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e013      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	4906      	ldr	r1, [pc, #24]	@ (8004420 <I2C_RequestMemoryRead+0x1cc>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f886 	bl	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	00010002 	.word	0x00010002

08004424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004434:	e048      	b.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800443c:	d044      	beq.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fe f871 	bl	8002524 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d139      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10d      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x56>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	43da      	mvns	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	e00c      	b.n	8004494 <I2C_WaitOnFlagUntilTimeout+0x70>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	429a      	cmp	r2, r3
 8004498:	d116      	bne.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e023      	b.n	8004510 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10d      	bne.n	80044ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	43da      	mvns	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	e00c      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	d093      	beq.n	8004436 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004526:	e071      	b.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004536:	d123      	bne.n	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004546:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004550:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e067      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004586:	d041      	beq.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fd ffcc 	bl	8002524 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d136      	bne.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	0c1b      	lsrs	r3, r3, #16
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10c      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	bf14      	ite	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	2300      	moveq	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	e00b      	b.n	80045da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	43da      	mvns	r2, r3
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e021      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10c      	bne.n	8004630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	43da      	mvns	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	bf14      	ite	ne
 8004628:	2301      	movne	r3, #1
 800462a:	2300      	moveq	r3, #0
 800462c:	b2db      	uxtb	r3, r3
 800462e:	e00b      	b.n	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	43da      	mvns	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	bf14      	ite	ne
 8004642:	2301      	movne	r3, #1
 8004644:	2300      	moveq	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	f47f af6d 	bne.w	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004664:	e034      	b.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8e3 	bl	8004832 <I2C_IsAcknowledgeFailed>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e034      	b.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800467c:	d028      	beq.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fd ff51 	bl	8002524 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d11d      	bne.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800469e:	2b80      	cmp	r3, #128	@ 0x80
 80046a0:	d016      	beq.n	80046d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046da:	2b80      	cmp	r3, #128	@ 0x80
 80046dc:	d1c3      	bne.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f4:	e034      	b.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f89b 	bl	8004832 <I2C_IsAcknowledgeFailed>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e034      	b.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800470c:	d028      	beq.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fd ff09 	bl	8002524 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11d      	bne.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b04      	cmp	r3, #4
 8004730:	d016      	beq.n	8004760 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e007      	b.n	8004770 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b04      	cmp	r3, #4
 800476c:	d1c3      	bne.n	80046f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004784:	e049      	b.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d119      	bne.n	80047c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0210 	mvn.w	r2, #16
 800479c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e030      	b.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c8:	f7fd feac 	bl	8002524 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d11d      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b40      	cmp	r3, #64	@ 0x40
 80047ea:	d016      	beq.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e007      	b.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004824:	2b40      	cmp	r3, #64	@ 0x40
 8004826:	d1ae      	bne.n	8004786 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004848:	d11b      	bne.n	8004882 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004852:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f043 0204 	orr.w	r2, r3, #4
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e101      	b.n	8004aa6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f008 ff41 	bl	800d744 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2203      	movs	r2, #3
 80048c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048d0:	d102      	bne.n	80048d8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 fd48 	bl	8007372 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	7c1a      	ldrb	r2, [r3, #16]
 80048ea:	f88d 2000 	strb.w	r2, [sp]
 80048ee:	3304      	adds	r3, #4
 80048f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048f2:	f002 fc27 	bl	8007144 <USB_CoreInit>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0ce      	b.n	8004aa6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f002 fd40 	bl	8007394 <USB_SetCurrentMode>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0bf      	b.n	8004aa6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e04a      	b.n	80049c2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	3315      	adds	r3, #21
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	3314      	adds	r3, #20
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004954:	7bfa      	ldrb	r2, [r7, #15]
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	b298      	uxth	r0, r3
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	332e      	adds	r3, #46	@ 0x2e
 8004968:	4602      	mov	r2, r0
 800496a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3318      	adds	r3, #24
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004980:	7bfa      	ldrb	r2, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	440b      	add	r3, r1
 800498e:	331c      	adds	r3, #28
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	3320      	adds	r3, #32
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	3324      	adds	r3, #36	@ 0x24
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	7bfa      	ldrb	r2, [r7, #15]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3af      	bcc.n	800492c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e044      	b.n	8004a5c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	791b      	ldrb	r3, [r3, #4]
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b5      	bcc.n	80049d2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7c1a      	ldrb	r2, [r3, #16]
 8004a6e:	f88d 2000 	strb.w	r2, [sp]
 8004a72:	3304      	adds	r3, #4
 8004a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a76:	f002 fcd9 	bl	800742c <USB_DevInit>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e00c      	b.n	8004aa6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f003 fd1d 	bl	80084de <USB_DevDisconnect>

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_PCD_Start+0x1c>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e022      	b.n	8004b10 <HAL_PCD_Start+0x62>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d105      	bne.n	8004af2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f002 fc2a 	bl	8007350 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f003 fccb 	bl	800849c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b08d      	sub	sp, #52	@ 0x34
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fd89 	bl	8008646 <USB_GetMode>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 848c 	bne.w	8005454 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f003 fced 	bl	8008520 <USB_ReadInterrupts>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8482 	beq.w	8005452 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 fcda 	bl	8008520 <USB_ReadInterrupts>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d107      	bne.n	8004b86 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f002 0202 	and.w	r2, r2, #2
 8004b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f003 fcc8 	bl	8008520 <USB_ReadInterrupts>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b10      	cmp	r3, #16
 8004b98:	d161      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0210 	bic.w	r2, r2, #16
 8004ba8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	0c5b      	lsrs	r3, r3, #17
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d124      	bne.n	8004c20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d035      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	6a38      	ldr	r0, [r7, #32]
 8004bf6:	f003 faff 	bl	80081f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c06:	441a      	add	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	091b      	lsrs	r3, r3, #4
 8004c14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c18:	441a      	add	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	615a      	str	r2, [r3, #20]
 8004c1e:	e016      	b.n	8004c4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	0c5b      	lsrs	r3, r3, #17
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	2b06      	cmp	r3, #6
 8004c2a:	d110      	bne.n	8004c4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c32:	2208      	movs	r2, #8
 8004c34:	4619      	mov	r1, r3
 8004c36:	6a38      	ldr	r0, [r7, #32]
 8004c38:	f003 fade 	bl	80081f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c48:	441a      	add	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0210 	orr.w	r2, r2, #16
 8004c5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fc5c 	bl	8008520 <USB_ReadInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c72:	f040 80a7 	bne.w	8004dc4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f003 fc61 	bl	8008546 <USB_ReadDevAllOutEpInterrupt>
 8004c84:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004c86:	e099      	b.n	8004dbc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 808e 	beq.w	8004db0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fc85 	bl	80085ae <USB_ReadDevOutEPInterrupt>
 8004ca4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fea1 	bl	8005a0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ce6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 ff77 	bl	8005bdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d04:	461a      	mov	r2, r3
 8004d06:	2310      	movs	r3, #16
 8004d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d030      	beq.n	8004d76 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b80      	cmp	r3, #128	@ 0x80
 8004d1e:	d109      	bne.n	8004d34 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d32:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	4413      	add	r3, r2
 8004d46:	3304      	adds	r3, #4
 8004d48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	78db      	ldrb	r3, [r3, #3]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d108      	bne.n	8004d64 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2200      	movs	r2, #0
 8004d56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f008 fdec 	bl	800d93c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	2302      	movs	r3, #2
 8004d74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	2320      	movs	r3, #32
 8004d90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da8:	461a      	mov	r2, r3
 8004daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	3301      	adds	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f47f af62 	bne.w	8004c88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 fba9 	bl	8008520 <USB_ReadInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dd8:	f040 80db 	bne.w	8004f92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f003 fbca 	bl	800857a <USB_ReadDevAllInEpInterrupt>
 8004de6:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004dec:	e0cd      	b.n	8004f8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80c2 	beq.w	8004f7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 fbf0 	bl	80085ea <USB_ReadDevInEPInterrupt>
 8004e0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d057      	beq.n	8004ec6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e36:	4013      	ands	r3, r2
 8004e38:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e46:	461a      	mov	r2, r3
 8004e48:	2301      	movs	r3, #1
 8004e4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	799b      	ldrb	r3, [r3, #6]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d132      	bne.n	8004eba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	3320      	adds	r3, #32
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4403      	add	r3, r0
 8004e74:	331c      	adds	r3, #28
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4419      	add	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4403      	add	r3, r0
 8004e88:	3320      	adds	r3, #32
 8004e8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d113      	bne.n	8004eba <HAL_PCD_IRQHandler+0x3a2>
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e96:	4613      	mov	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	f003 fbf7 	bl	80086a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f008 fcc0 	bl	800d846 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	2308      	movs	r3, #8
 8004ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2310      	movs	r3, #16
 8004efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f14:	461a      	mov	r2, r3
 8004f16:	2340      	movs	r3, #64	@ 0x40
 8004f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d023      	beq.n	8004f6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f26:	6a38      	ldr	r0, [r7, #32]
 8004f28:	f002 fbe4 	bl	80076f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3310      	adds	r3, #16
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	78db      	ldrb	r3, [r3, #3]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d108      	bne.n	8004f5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	4619      	mov	r1, r3
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f008 fd03 	bl	800d960 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f66:	461a      	mov	r2, r3
 8004f68:	2302      	movs	r3, #2
 8004f6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 fcbb 	bl	80058f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	3301      	adds	r3, #1
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f47f af2e 	bne.w	8004dee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f003 fac2 	bl	8008520 <USB_ReadInterrupts>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa6:	d122      	bne.n	8004fee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d108      	bne.n	8004fd8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fea1 	bl	8005d18 <HAL_PCDEx_LPM_Callback>
 8004fd6:	e002      	b.n	8004fde <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f008 fca1 	bl	800d920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695a      	ldr	r2, [r3, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004fec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fa94 	bl	8008520 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005002:	d112      	bne.n	800502a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f008 fc5d 	bl	800d8d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005028:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f003 fa76 	bl	8008520 <USB_ReadInterrupts>
 8005034:	4603      	mov	r3, r0
 8005036:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	f040 80b7 	bne.w	80051b0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005050:	f023 0301 	bic.w	r3, r3, #1
 8005054:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2110      	movs	r1, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f002 fb49 	bl	80076f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005066:	e046      	b.n	80050f6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005074:	461a      	mov	r2, r3
 8005076:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800507a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800508c:	0151      	lsls	r1, r2, #5
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	440a      	add	r2, r1
 8005092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005096:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800509a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f2:	3301      	adds	r3, #1
 80050f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	791b      	ldrb	r3, [r3, #4]
 80050fa:	461a      	mov	r2, r3
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	4293      	cmp	r3, r2
 8005100:	d3b2      	bcc.n	8005068 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005110:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005114:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	7bdb      	ldrb	r3, [r3, #15]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d016      	beq.n	800514c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800512e:	f043 030b 	orr.w	r3, r3, #11
 8005132:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005144:	f043 030b 	orr.w	r3, r3, #11
 8005148:	6453      	str	r3, [r2, #68]	@ 0x44
 800514a:	e015      	b.n	8005178 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	69fa      	ldr	r2, [r7, #28]
 8005156:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800515a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800515e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005162:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005172:	f043 030b 	orr.w	r3, r3, #11
 8005176:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005186:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800518a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800519a:	461a      	mov	r2, r3
 800519c:	f003 fa84 	bl	80086a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80051ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f003 f9b3 	bl	8008520 <USB_ReadInterrupts>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051c4:	d123      	bne.n	800520e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f003 fa49 	bl	8008662 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 fb06 	bl	80077e6 <USB_GetDevSpeed>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681c      	ldr	r4, [r3, #0]
 80051e6:	f001 f9c7 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 80051ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80051f0:	461a      	mov	r2, r3
 80051f2:	4620      	mov	r0, r4
 80051f4:	f002 f80a 	bl	800720c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f008 fb4c 	bl	800d896 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695a      	ldr	r2, [r3, #20]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800520c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f003 f984 	bl	8008520 <USB_ReadInterrupts>
 8005218:	4603      	mov	r3, r0
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b08      	cmp	r3, #8
 8005220:	d10a      	bne.n	8005238 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f008 fb29 	bl	800d87a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f002 0208 	and.w	r2, r2, #8
 8005236:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f003 f96f 	bl	8008520 <USB_ReadInterrupts>
 8005242:	4603      	mov	r3, r0
 8005244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005248:	2b80      	cmp	r3, #128	@ 0x80
 800524a:	d123      	bne.n	8005294 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005258:	2301      	movs	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
 800525c:	e014      	b.n	8005288 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4619      	mov	r1, r3
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb08 	bl	8005892 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	3301      	adds	r3, #1
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	791b      	ldrb	r3, [r3, #4]
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	4293      	cmp	r3, r2
 8005292:	d3e4      	bcc.n	800525e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f003 f941 	bl	8008520 <USB_ReadInterrupts>
 800529e:	4603      	mov	r3, r0
 80052a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a8:	d13c      	bne.n	8005324 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052aa:	2301      	movs	r3, #1
 80052ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ae:	e02b      	b.n	8005308 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3318      	adds	r3, #24
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d115      	bne.n	8005302 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80052d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da12      	bge.n	8005302 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3317      	adds	r3, #23
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fac8 	bl	8005892 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	3301      	adds	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	@ 0x24
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	791b      	ldrb	r3, [r3, #4]
 800530c:	461a      	mov	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	4293      	cmp	r3, r2
 8005312:	d3cd      	bcc.n	80052b0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f003 f8f9 	bl	8008520 <USB_ReadInterrupts>
 800532e:	4603      	mov	r3, r0
 8005330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005338:	d156      	bne.n	80053e8 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800533a:	2301      	movs	r3, #1
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
 800533e:	e045      	b.n	80053cc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	4413      	add	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d12e      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005368:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	da2b      	bge.n	80053c6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800537a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800537e:	429a      	cmp	r2, r3
 8005380:	d121      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053c2:	6053      	str	r3, [r2, #4]
            break;
 80053c4:	e008      	b.n	80053d8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	3301      	adds	r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d3b3      	bcc.n	8005340 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80053e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f003 f897 	bl	8008520 <USB_ReadInterrupts>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d10a      	bne.n	8005414 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f008 fac0 	bl	800d984 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f003 f881 	bl	8008520 <USB_ReadInterrupts>
 800541e:	4603      	mov	r3, r0
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b04      	cmp	r3, #4
 8005426:	d115      	bne.n	8005454 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f008 fab0 	bl	800d9a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	430a      	orrs	r2, r1
 800544e:	605a      	str	r2, [r3, #4]
 8005450:	e000      	b.n	8005454 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005452:	bf00      	nop
    }
  }
}
 8005454:	3734      	adds	r7, #52	@ 0x34
 8005456:	46bd      	mov	sp, r7
 8005458:	bd90      	pop	{r4, r7, pc}

0800545a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	460b      	mov	r3, r1
 8005464:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_PCD_SetAddress+0x1a>
 8005470:	2302      	movs	r3, #2
 8005472:	e012      	b.n	800549a <HAL_PCD_SetAddress+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	78fa      	ldrb	r2, [r7, #3]
 8005480:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f002 ffe0 	bl	8008450 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b084      	sub	sp, #16
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	4608      	mov	r0, r1
 80054ac:	4611      	mov	r1, r2
 80054ae:	461a      	mov	r2, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	70fb      	strb	r3, [r7, #3]
 80054b4:	460b      	mov	r3, r1
 80054b6:	803b      	strh	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da0f      	bge.n	80054e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	f003 020f 	and.w	r2, r3, #15
 80054ce:	4613      	mov	r3, r2
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	3310      	adds	r3, #16
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	4413      	add	r3, r2
 80054dc:	3304      	adds	r3, #4
 80054de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	705a      	strb	r2, [r3, #1]
 80054e6:	e00f      	b.n	8005508 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005508:	78fb      	ldrb	r3, [r7, #3]
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005514:	883a      	ldrh	r2, [r7, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	78ba      	ldrb	r2, [r7, #2]
 800551e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d004      	beq.n	8005532 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005532:	78bb      	ldrb	r3, [r7, #2]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d102      	bne.n	800553e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_PCD_EP_Open+0xaa>
 8005548:	2302      	movs	r3, #2
 800554a:	e00e      	b.n	800556a <HAL_PCD_EP_Open+0xc8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68f9      	ldr	r1, [r7, #12]
 800555a:	4618      	mov	r0, r3
 800555c:	f002 f968 	bl	8007830 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005568:	7afb      	ldrb	r3, [r7, #11]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800557e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0f      	bge.n	80055a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	705a      	strb	r2, [r3, #1]
 80055a4:	e00f      	b.n	80055c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_PCD_EP_Close+0x6e>
 80055dc:	2302      	movs	r3, #2
 80055de:	e00e      	b.n	80055fe <HAL_PCD_EP_Close+0x8c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 f9a6 	bl	8007940 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	460b      	mov	r3, r1
 8005614:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	f003 020f 	and.w	r2, r3, #15
 800561c:	4613      	mov	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2200      	movs	r2, #0
 8005640:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	b2da      	uxtb	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	799b      	ldrb	r3, [r3, #6]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6818      	ldr	r0, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	461a      	mov	r2, r3
 800566c:	6979      	ldr	r1, [r7, #20]
 800566e:	f002 fa43 	bl	8007af8 <USB_EPStartXfer>

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 020f 	and.w	r2, r3, #15
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800569e:	681b      	ldr	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	460b      	mov	r3, r1
 80056ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056bc:	7afb      	ldrb	r3, [r7, #11]
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3310      	adds	r3, #16
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	3304      	adds	r3, #4
 80056d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	2200      	movs	r2, #0
 80056e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	2201      	movs	r2, #1
 80056ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	799b      	ldrb	r3, [r3, #6]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d102      	bne.n	8005706 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6818      	ldr	r0, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	799b      	ldrb	r3, [r3, #6]
 800570e:	461a      	mov	r2, r3
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	f002 f9f1 	bl	8007af8 <USB_EPStartXfer>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	7912      	ldrb	r2, [r2, #4]
 8005736:	4293      	cmp	r3, r2
 8005738:	d901      	bls.n	800573e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e04f      	b.n	80057de <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800573e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005742:	2b00      	cmp	r3, #0
 8005744:	da0f      	bge.n	8005766 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	3310      	adds	r3, #16
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	3304      	adds	r3, #4
 800575c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	705a      	strb	r2, [r3, #1]
 8005764:	e00d      	b.n	8005782 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	3304      	adds	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	b2da      	uxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800579a:	2b01      	cmp	r3, #1
 800579c:	d101      	bne.n	80057a2 <HAL_PCD_EP_SetStall+0x82>
 800579e:	2302      	movs	r3, #2
 80057a0:	e01d      	b.n	80057de <HAL_PCD_EP_SetStall+0xbe>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 fd79 	bl	80082a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	7999      	ldrb	r1, [r3, #6]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057ce:	461a      	mov	r2, r3
 80057d0:	f002 ff6a 	bl	80086a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b084      	sub	sp, #16
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	7912      	ldrb	r2, [r2, #4]
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d901      	bls.n	8005804 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e042      	b.n	800588a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005808:	2b00      	cmp	r3, #0
 800580a:	da0f      	bge.n	800582c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	f003 020f 	and.w	r2, r3, #15
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	3310      	adds	r3, #16
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	3304      	adds	r3, #4
 8005822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	705a      	strb	r2, [r3, #1]
 800582a:	e00f      	b.n	800584c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	4413      	add	r3, r2
 8005842:	3304      	adds	r3, #4
 8005844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	f003 030f 	and.w	r3, r3, #15
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_PCD_EP_ClrStall+0x86>
 8005868:	2302      	movs	r3, #2
 800586a:	e00e      	b.n	800588a <HAL_PCD_EP_ClrStall+0xa4>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68f9      	ldr	r1, [r7, #12]
 800587a:	4618      	mov	r0, r3
 800587c:	f002 fd82 	bl	8008384 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	460b      	mov	r3, r1
 800589c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800589e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da0c      	bge.n	80058c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	3310      	adds	r3, #16
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	3304      	adds	r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	e00c      	b.n	80058da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	3304      	adds	r3, #4
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68f9      	ldr	r1, [r7, #12]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 fba1 	bl	8008028 <USB_EPStopXfer>
 80058e6:	4603      	mov	r3, r0
 80058e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80058ea:	7afb      	ldrb	r3, [r7, #11]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	@ 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	3310      	adds	r3, #16
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d901      	bls.n	800592c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e06b      	b.n	8005a04 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	69fa      	ldr	r2, [r7, #28]
 800593e:	429a      	cmp	r2, r3
 8005940:	d902      	bls.n	8005948 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	3303      	adds	r3, #3
 800594c:	089b      	lsrs	r3, r3, #2
 800594e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005950:	e02a      	b.n	80059a8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	429a      	cmp	r2, r3
 8005966:	d902      	bls.n	800596e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	3303      	adds	r3, #3
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68d9      	ldr	r1, [r3, #12]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4603      	mov	r3, r0
 800598a:	6978      	ldr	r0, [r7, #20]
 800598c:	f002 fbf6 	bl	800817c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	441a      	add	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	441a      	add	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d809      	bhi.n	80059d2 <PCD_WriteEmptyTxFifo+0xde>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d203      	bcs.n	80059d2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1bf      	bne.n	8005952 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d811      	bhi.n	8005a02 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	2201      	movs	r2, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	6939      	ldr	r1, [r7, #16]
 80059fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059fe:	4013      	ands	r3, r2
 8005a00:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	333c      	adds	r3, #60	@ 0x3c
 8005a24:	3304      	adds	r3, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	799b      	ldrb	r3, [r3, #6]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d17b      	bne.n	8005b3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	4a61      	ldr	r2, [pc, #388]	@ (8005bd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	f240 80b9 	bls.w	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80b3 	beq.w	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a74:	6093      	str	r3, [r2, #8]
 8005a76:	e0a7      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	015a      	lsls	r2, r3, #5
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	4413      	add	r3, r2
 8005a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2320      	movs	r3, #32
 8005a92:	6093      	str	r3, [r2, #8]
 8005a94:	e098      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 8093 	bne.w	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8005bd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d90f      	bls.n	8005aca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac6:	6093      	str	r3, [r2, #8]
 8005ac8:	e07e      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	3304      	adds	r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	0159      	lsls	r1, r3, #5
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d114      	bne.n	8005b2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b14:	461a      	mov	r2, r3
 8005b16:	2101      	movs	r1, #1
 8005b18:	f002 fdc6 	bl	80086a8 <USB_EP0_OutStart>
 8005b1c:	e006      	b.n	8005b2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f007 fe6c 	bl	800d810 <HAL_PCD_DataOutStageCallback>
 8005b38:	e046      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4a26      	ldr	r2, [pc, #152]	@ (8005bd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d124      	bne.n	8005b8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b58:	461a      	mov	r2, r3
 8005b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b5e:	6093      	str	r3, [r2, #8]
 8005b60:	e032      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d008      	beq.n	8005b7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b78:	461a      	mov	r2, r3
 8005b7a:	2320      	movs	r3, #32
 8005b7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f007 fe43 	bl	800d810 <HAL_PCD_DataOutStageCallback>
 8005b8a:	e01d      	b.n	8005bc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d114      	bne.n	8005bbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	f002 fd76 	bl	80086a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f007 fe24 	bl	800d810 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	4f54300a 	.word	0x4f54300a
 8005bd8:	4f54310a 	.word	0x4f54310a

08005bdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	333c      	adds	r3, #60	@ 0x3c
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	@ (8005c64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d90e      	bls.n	8005c30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f007 fddb 	bl	800d7ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a0a      	ldr	r2, [pc, #40]	@ (8005c64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d90c      	bls.n	8005c58 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	799b      	ldrb	r3, [r3, #6]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d108      	bne.n	8005c58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c50:	461a      	mov	r2, r3
 8005c52:	2101      	movs	r1, #1
 8005c54:	f002 fd28 	bl	80086a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	4f54300a 	.word	0x4f54300a

08005c68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
 8005c74:	4613      	mov	r3, r2
 8005c76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c86:	883b      	ldrh	r3, [r7, #0]
 8005c88:	0419      	lsls	r1, r3, #16
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c94:	e028      	b.n	8005ce8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
 8005ca8:	e00d      	b.n	8005cc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	3340      	adds	r3, #64	@ 0x40
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	0c1b      	lsrs	r3, r3, #16
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
 8005cc6:	7bfa      	ldrb	r2, [r7, #15]
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d3ec      	bcc.n	8005caa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005cd0:	883b      	ldrh	r3, [r7, #0]
 8005cd2:	0418      	lsls	r0, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	4302      	orrs	r2, r0
 8005ce0:	3340      	adds	r3, #64	@ 0x40
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e267      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d075      	beq.n	8005e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d4e:	4b88      	ldr	r3, [pc, #544]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d00c      	beq.n	8005d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d5a:	4b85      	ldr	r3, [pc, #532]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d112      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d66:	4b82      	ldr	r3, [pc, #520]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b7e      	ldr	r3, [pc, #504]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d05b      	beq.n	8005e38 <HAL_RCC_OscConfig+0x108>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d157      	bne.n	8005e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e242      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d94:	d106      	bne.n	8005da4 <HAL_RCC_OscConfig+0x74>
 8005d96:	4b76      	ldr	r3, [pc, #472]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a75      	ldr	r2, [pc, #468]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e01d      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x98>
 8005dae:	4b70      	ldr	r3, [pc, #448]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6f      	ldr	r2, [pc, #444]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b6d      	ldr	r3, [pc, #436]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a6c      	ldr	r2, [pc, #432]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005dc8:	4b69      	ldr	r3, [pc, #420]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a68      	ldr	r2, [pc, #416]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b66      	ldr	r3, [pc, #408]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a65      	ldr	r2, [pc, #404]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fc fb9c 	bl	8002524 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fc fb98 	bl	8002524 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	@ 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e207      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	4b5b      	ldr	r3, [pc, #364]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0xc0>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7fc fb88 	bl	8002524 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e18:	f7fc fb84 	bl	8002524 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	@ 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1f3      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	4b51      	ldr	r3, [pc, #324]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0xe8>
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d063      	beq.n	8005f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e46:	4b4a      	ldr	r3, [pc, #296]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e52:	4b47      	ldr	r3, [pc, #284]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d11c      	bne.n	8005e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e5e:	4b44      	ldr	r3, [pc, #272]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d116      	bne.n	8005e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6a:	4b41      	ldr	r3, [pc, #260]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_RCC_OscConfig+0x152>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d001      	beq.n	8005e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e1c7      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e82:	4b3b      	ldr	r3, [pc, #236]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4937      	ldr	r1, [pc, #220]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e96:	e03a      	b.n	8005f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d020      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ea0:	4b34      	ldr	r3, [pc, #208]	@ (8005f74 <HAL_RCC_OscConfig+0x244>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7fc fb3d 	bl	8002524 <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eae:	f7fc fb39 	bl	8002524 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e1a8      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0f0      	beq.n	8005eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ecc:	4b28      	ldr	r3, [pc, #160]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	4925      	ldr	r1, [pc, #148]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]
 8005ee0:	e015      	b.n	8005f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ee2:	4b24      	ldr	r3, [pc, #144]	@ (8005f74 <HAL_RCC_OscConfig+0x244>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee8:	f7fc fb1c 	bl	8002524 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef0:	f7fc fb18 	bl	8002524 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e187      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	4b1b      	ldr	r3, [pc, #108]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d036      	beq.n	8005f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f22:	4b15      	ldr	r3, [pc, #84]	@ (8005f78 <HAL_RCC_OscConfig+0x248>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fc fafc 	bl	8002524 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f30:	f7fc faf8 	bl	8002524 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e167      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_RCC_OscConfig+0x240>)
 8005f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x200>
 8005f4e:	e01b      	b.n	8005f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f50:	4b09      	ldr	r3, [pc, #36]	@ (8005f78 <HAL_RCC_OscConfig+0x248>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f56:	f7fc fae5 	bl	8002524 <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f5c:	e00e      	b.n	8005f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fc fae1 	bl	8002524 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d907      	bls.n	8005f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e150      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	42470000 	.word	0x42470000
 8005f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f7c:	4b88      	ldr	r3, [pc, #544]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1ea      	bne.n	8005f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8097 	beq.w	80060c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f96:	2300      	movs	r3, #0
 8005f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9a:	4b81      	ldr	r3, [pc, #516]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	4b7d      	ldr	r3, [pc, #500]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	4a7c      	ldr	r2, [pc, #496]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc6:	4b77      	ldr	r3, [pc, #476]	@ (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d118      	bne.n	8006004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fd2:	4b74      	ldr	r3, [pc, #464]	@ (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a73      	ldr	r2, [pc, #460]	@ (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fde:	f7fc faa1 	bl	8002524 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe6:	f7fc fa9d 	bl	8002524 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e10c      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80061a4 <HAL_RCC_OscConfig+0x474>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d106      	bne.n	800601a <HAL_RCC_OscConfig+0x2ea>
 800600c:	4b64      	ldr	r3, [pc, #400]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	4a63      	ldr	r2, [pc, #396]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	@ 0x70
 8006018:	e01c      	b.n	8006054 <HAL_RCC_OscConfig+0x324>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b05      	cmp	r3, #5
 8006020:	d10c      	bne.n	800603c <HAL_RCC_OscConfig+0x30c>
 8006022:	4b5f      	ldr	r3, [pc, #380]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006026:	4a5e      	ldr	r2, [pc, #376]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006028:	f043 0304 	orr.w	r3, r3, #4
 800602c:	6713      	str	r3, [r2, #112]	@ 0x70
 800602e:	4b5c      	ldr	r3, [pc, #368]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	4a5b      	ldr	r2, [pc, #364]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	6713      	str	r3, [r2, #112]	@ 0x70
 800603a:	e00b      	b.n	8006054 <HAL_RCC_OscConfig+0x324>
 800603c:	4b58      	ldr	r3, [pc, #352]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006040:	4a57      	ldr	r2, [pc, #348]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006042:	f023 0301 	bic.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	@ 0x70
 8006048:	4b55      	ldr	r3, [pc, #340]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604c:	4a54      	ldr	r2, [pc, #336]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800604e:	f023 0304 	bic.w	r3, r3, #4
 8006052:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d015      	beq.n	8006088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605c:	f7fc fa62 	bl	8002524 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006062:	e00a      	b.n	800607a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006064:	f7fc fa5e 	bl	8002524 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e0cb      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607a:	4b49      	ldr	r3, [pc, #292]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0ee      	beq.n	8006064 <HAL_RCC_OscConfig+0x334>
 8006086:	e014      	b.n	80060b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006088:	f7fc fa4c 	bl	8002524 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006090:	f7fc fa48 	bl	8002524 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e0b5      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a6:	4b3e      	ldr	r3, [pc, #248]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ee      	bne.n	8006090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d105      	bne.n	80060c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b8:	4b39      	ldr	r3, [pc, #228]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	4a38      	ldr	r2, [pc, #224]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80a1 	beq.w	8006210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ce:	4b34      	ldr	r3, [pc, #208]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f003 030c 	and.w	r3, r3, #12
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d05c      	beq.n	8006194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d141      	bne.n	8006166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060e2:	4b31      	ldr	r3, [pc, #196]	@ (80061a8 <HAL_RCC_OscConfig+0x478>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e8:	f7fc fa1c 	bl	8002524 <HAL_GetTick>
 80060ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	e008      	b.n	8006102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060f0:	f7fc fa18 	bl	8002524 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d901      	bls.n	8006102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e087      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	4b27      	ldr	r3, [pc, #156]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69da      	ldr	r2, [r3, #28]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	019b      	lsls	r3, r3, #6
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	3b01      	subs	r3, #1
 8006128:	041b      	lsls	r3, r3, #16
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	491b      	ldr	r1, [pc, #108]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006138:	4b1b      	ldr	r3, [pc, #108]	@ (80061a8 <HAL_RCC_OscConfig+0x478>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613e:	f7fc f9f1 	bl	8002524 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006146:	f7fc f9ed 	bl	8002524 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e05c      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	4b11      	ldr	r3, [pc, #68]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCC_OscConfig+0x416>
 8006164:	e054      	b.n	8006210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006166:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <HAL_RCC_OscConfig+0x478>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800616c:	f7fc f9da 	bl	8002524 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006174:	f7fc f9d6 	bl	8002524 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e045      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	4b06      	ldr	r3, [pc, #24]	@ (80061a0 <HAL_RCC_OscConfig+0x470>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x444>
 8006192:	e03d      	b.n	8006210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d107      	bne.n	80061ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e038      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
 80061a0:	40023800 	.word	0x40023800
 80061a4:	40007000 	.word	0x40007000
 80061a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <HAL_RCC_OscConfig+0x4ec>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d028      	beq.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d121      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d11a      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d111      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	3b01      	subs	r3, #1
 80061f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d107      	bne.n	800620c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006208:	429a      	cmp	r2, r3
 800620a:	d001      	beq.n	8006210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800

08006220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0cc      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006234:	4b68      	ldr	r3, [pc, #416]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d90c      	bls.n	800625c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b65      	ldr	r3, [pc, #404]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624a:	4b63      	ldr	r3, [pc, #396]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	429a      	cmp	r2, r3
 8006256:	d001      	beq.n	800625c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0b8      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d020      	beq.n	80062aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006274:	4b59      	ldr	r3, [pc, #356]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4a58      	ldr	r2, [pc, #352]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800627e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0308 	and.w	r3, r3, #8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800628c:	4b53      	ldr	r3, [pc, #332]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	4a52      	ldr	r2, [pc, #328]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006298:	4b50      	ldr	r3, [pc, #320]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	494d      	ldr	r1, [pc, #308]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d044      	beq.n	8006340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	4b47      	ldr	r3, [pc, #284]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d119      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e07f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d003      	beq.n	80062de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062de:	4b3f      	ldr	r3, [pc, #252]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e06f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ee:	4b3b      	ldr	r3, [pc, #236]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e067      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b37      	ldr	r3, [pc, #220]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4934      	ldr	r1, [pc, #208]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 800630c:	4313      	orrs	r3, r2
 800630e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006310:	f7fc f908 	bl	8002524 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fc f904 	bl	8002524 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e04f      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b2b      	ldr	r3, [pc, #172]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006340:	4b25      	ldr	r3, [pc, #148]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d20c      	bcs.n	8006368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b22      	ldr	r3, [pc, #136]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006356:	4b20      	ldr	r3, [pc, #128]	@ (80063d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	683a      	ldr	r2, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d001      	beq.n	8006368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e032      	b.n	80063ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006374:	4b19      	ldr	r3, [pc, #100]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	4916      	ldr	r1, [pc, #88]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	4313      	orrs	r3, r2
 8006384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006392:	4b12      	ldr	r3, [pc, #72]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	490e      	ldr	r1, [pc, #56]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063a6:	f000 f821 	bl	80063ec <HAL_RCC_GetSysClockFreq>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	490a      	ldr	r1, [pc, #40]	@ (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 80063b8:	5ccb      	ldrb	r3, [r1, r3]
 80063ba:	fa22 f303 	lsr.w	r3, r2, r3
 80063be:	4a09      	ldr	r2, [pc, #36]	@ (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063c2:	4b09      	ldr	r3, [pc, #36]	@ (80063e8 <HAL_RCC_ClockConfig+0x1c8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fb ff98 	bl	80022fc <HAL_InitTick>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023c00 	.word	0x40023c00
 80063dc:	40023800 	.word	0x40023800
 80063e0:	0800e5b4 	.word	0x0800e5b4
 80063e4:	20000020 	.word	0x20000020
 80063e8:	20000024 	.word	0x20000024

080063ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063f0:	b090      	sub	sp, #64	@ 0x40
 80063f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f8:	2300      	movs	r3, #0
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063fc:	2300      	movs	r3, #0
 80063fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006404:	4b59      	ldr	r3, [pc, #356]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 030c 	and.w	r3, r3, #12
 800640c:	2b08      	cmp	r3, #8
 800640e:	d00d      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0x40>
 8006410:	2b08      	cmp	r3, #8
 8006412:	f200 80a1 	bhi.w	8006558 <HAL_RCC_GetSysClockFreq+0x16c>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x34>
 800641a:	2b04      	cmp	r3, #4
 800641c:	d003      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0x3a>
 800641e:	e09b      	b.n	8006558 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006420:	4b53      	ldr	r3, [pc, #332]	@ (8006570 <HAL_RCC_GetSysClockFreq+0x184>)
 8006422:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006424:	e09b      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006426:	4b53      	ldr	r3, [pc, #332]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x188>)
 8006428:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800642a:	e098      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800642c:	4b4f      	ldr	r3, [pc, #316]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006436:	4b4d      	ldr	r3, [pc, #308]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d028      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006442:	4b4a      	ldr	r3, [pc, #296]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	2200      	movs	r2, #0
 800644a:	623b      	str	r3, [r7, #32]
 800644c:	627a      	str	r2, [r7, #36]	@ 0x24
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006454:	2100      	movs	r1, #0
 8006456:	4b47      	ldr	r3, [pc, #284]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x188>)
 8006458:	fb03 f201 	mul.w	r2, r3, r1
 800645c:	2300      	movs	r3, #0
 800645e:	fb00 f303 	mul.w	r3, r0, r3
 8006462:	4413      	add	r3, r2
 8006464:	4a43      	ldr	r2, [pc, #268]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x188>)
 8006466:	fba0 1202 	umull	r1, r2, r0, r2
 800646a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800646c:	460a      	mov	r2, r1
 800646e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006472:	4413      	add	r3, r2
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006478:	2200      	movs	r2, #0
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	61fa      	str	r2, [r7, #28]
 800647e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006482:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006486:	f7fa fb67 	bl	8000b58 <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4613      	mov	r3, r2
 8006490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006492:	e053      	b.n	800653c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006494:	4b35      	ldr	r3, [pc, #212]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	099b      	lsrs	r3, r3, #6
 800649a:	2200      	movs	r2, #0
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	617a      	str	r2, [r7, #20]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064a6:	f04f 0b00 	mov.w	fp, #0
 80064aa:	4652      	mov	r2, sl
 80064ac:	465b      	mov	r3, fp
 80064ae:	f04f 0000 	mov.w	r0, #0
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	0159      	lsls	r1, r3, #5
 80064b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064bc:	0150      	lsls	r0, r2, #5
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	ebb2 080a 	subs.w	r8, r2, sl
 80064c6:	eb63 090b 	sbc.w	r9, r3, fp
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064de:	ebb2 0408 	subs.w	r4, r2, r8
 80064e2:	eb63 0509 	sbc.w	r5, r3, r9
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	00eb      	lsls	r3, r5, #3
 80064f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064f4:	00e2      	lsls	r2, r4, #3
 80064f6:	4614      	mov	r4, r2
 80064f8:	461d      	mov	r5, r3
 80064fa:	eb14 030a 	adds.w	r3, r4, sl
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	eb45 030b 	adc.w	r3, r5, fp
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006512:	4629      	mov	r1, r5
 8006514:	028b      	lsls	r3, r1, #10
 8006516:	4621      	mov	r1, r4
 8006518:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800651c:	4621      	mov	r1, r4
 800651e:	028a      	lsls	r2, r1, #10
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006526:	2200      	movs	r2, #0
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	60fa      	str	r2, [r7, #12]
 800652c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006530:	f7fa fb12 	bl	8000b58 <__aeabi_uldivmod>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4613      	mov	r3, r2
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800653c:	4b0b      	ldr	r3, [pc, #44]	@ (800656c <HAL_RCC_GetSysClockFreq+0x180>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	0c1b      	lsrs	r3, r3, #16
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	3301      	adds	r3, #1
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800654c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006556:	e002      	b.n	800655e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <HAL_RCC_GetSysClockFreq+0x184>)
 800655a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800655c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006560:	4618      	mov	r0, r3
 8006562:	3740      	adds	r7, #64	@ 0x40
 8006564:	46bd      	mov	sp, r7
 8006566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800656a:	bf00      	nop
 800656c:	40023800 	.word	0x40023800
 8006570:	00f42400 	.word	0x00f42400
 8006574:	017d7840 	.word	0x017d7840

08006578 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800657c:	4b03      	ldr	r3, [pc, #12]	@ (800658c <HAL_RCC_GetHCLKFreq+0x14>)
 800657e:	681b      	ldr	r3, [r3, #0]
}
 8006580:	4618      	mov	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	20000020 	.word	0x20000020

08006590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006594:	f7ff fff0 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 8006598:	4602      	mov	r2, r0
 800659a:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	0a9b      	lsrs	r3, r3, #10
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	4903      	ldr	r1, [pc, #12]	@ (80065b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a6:	5ccb      	ldrb	r3, [r1, r3]
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40023800 	.word	0x40023800
 80065b4:	0800e5c4 	.word	0x0800e5c4

080065b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065bc:	f7ff ffdc 	bl	8006578 <HAL_RCC_GetHCLKFreq>
 80065c0:	4602      	mov	r2, r0
 80065c2:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	0b5b      	lsrs	r3, r3, #13
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	4903      	ldr	r1, [pc, #12]	@ (80065dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ce:	5ccb      	ldrb	r3, [r1, r3]
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40023800 	.word	0x40023800
 80065dc:	0800e5c4 	.word	0x0800e5c4

080065e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	220f      	movs	r2, #15
 80065ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065f0:	4b12      	ldr	r3, [pc, #72]	@ (800663c <HAL_RCC_GetClockConfig+0x5c>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0203 	and.w	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065fc:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <HAL_RCC_GetClockConfig+0x5c>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006608:	4b0c      	ldr	r3, [pc, #48]	@ (800663c <HAL_RCC_GetClockConfig+0x5c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006614:	4b09      	ldr	r3, [pc, #36]	@ (800663c <HAL_RCC_GetClockConfig+0x5c>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006622:	4b07      	ldr	r3, [pc, #28]	@ (8006640 <HAL_RCC_GetClockConfig+0x60>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0207 	and.w	r2, r3, #7
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	601a      	str	r2, [r3, #0]
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	40023c00 	.word	0x40023c00

08006644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e041      	b.n	80066da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f839 	bl	80066e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3304      	adds	r3, #4
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f000 fac4 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
	...

080066f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e044      	b.n	800679a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1e      	ldr	r2, [pc, #120]	@ (80067a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x6c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800673a:	d013      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x6c>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a1a      	ldr	r2, [pc, #104]	@ (80067ac <HAL_TIM_Base_Start_IT+0xb4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x6c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a19      	ldr	r2, [pc, #100]	@ (80067b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x6c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIM_Base_Start_IT+0x6c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a16      	ldr	r2, [pc, #88]	@ (80067b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d111      	bne.n	8006788 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b06      	cmp	r3, #6
 8006774:	d010      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0201 	orr.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006786:	e007      	b.n	8006798 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	40010000 	.word	0x40010000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800
 80067b4:	40000c00 	.word	0x40000c00
 80067b8:	40014000 	.word	0x40014000

080067bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e041      	b.n	8006852 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d106      	bne.n	80067e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f7fb fcd6 	bl	8002194 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3304      	adds	r3, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4610      	mov	r0, r2
 80067fc:	f000 fa08 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d020      	beq.n	80068be <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01b      	beq.n	80068be <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f06f 0202 	mvn.w	r2, #2
 800688e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f995 	bl	8006bd4 <HAL_TIM_IC_CaptureCallback>
 80068aa:	e005      	b.n	80068b8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f987 	bl	8006bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f998 	bl	8006be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d020      	beq.n	800690a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01b      	beq.n	800690a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0204 	mvn.w	r2, #4
 80068da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f96f 	bl	8006bd4 <HAL_TIM_IC_CaptureCallback>
 80068f6:	e005      	b.n	8006904 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f961 	bl	8006bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f972 	bl	8006be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f06f 0208 	mvn.w	r2, #8
 8006926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2204      	movs	r2, #4
 800692c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f949 	bl	8006bd4 <HAL_TIM_IC_CaptureCallback>
 8006942:	e005      	b.n	8006950 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f93b 	bl	8006bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f94c 	bl	8006be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f003 0310 	and.w	r3, r3, #16
 800695c:	2b00      	cmp	r3, #0
 800695e:	d020      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0310 	and.w	r3, r3, #16
 8006966:	2b00      	cmp	r3, #0
 8006968:	d01b      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0210 	mvn.w	r2, #16
 8006972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2208      	movs	r2, #8
 8006978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f923 	bl	8006bd4 <HAL_TIM_IC_CaptureCallback>
 800698e:	e005      	b.n	800699c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f915 	bl	8006bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f926 	bl	8006be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00c      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f06f 0201 	mvn.w	r2, #1
 80069be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7fb fa33 	bl	8001e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00c      	beq.n	80069ea <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80069e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fba3 	bl	8007130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00c      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 f8f7 	bl	8006bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00c      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f06f 0220 	mvn.w	r2, #32
 8006a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb75 	bl	800711c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e0ae      	b.n	8006bb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	f200 809f 	bhi.w	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ba9 	.word	0x08006ba9
 8006a78:	08006ba9 	.word	0x08006ba9
 8006a7c:	08006ba9 	.word	0x08006ba9
 8006a80:	08006ae5 	.word	0x08006ae5
 8006a84:	08006ba9 	.word	0x08006ba9
 8006a88:	08006ba9 	.word	0x08006ba9
 8006a8c:	08006ba9 	.word	0x08006ba9
 8006a90:	08006b27 	.word	0x08006b27
 8006a94:	08006ba9 	.word	0x08006ba9
 8006a98:	08006ba9 	.word	0x08006ba9
 8006a9c:	08006ba9 	.word	0x08006ba9
 8006aa0:	08006b67 	.word	0x08006b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f93c 	bl	8006d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0204 	bic.w	r2, r2, #4
 8006ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6999      	ldr	r1, [r3, #24]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
      break;
 8006ae2:	e064      	b.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 f982 	bl	8006df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6999      	ldr	r1, [r3, #24]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	021a      	lsls	r2, r3, #8
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	619a      	str	r2, [r3, #24]
      break;
 8006b24:	e043      	b.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 f9cd 	bl	8006ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0208 	orr.w	r2, r2, #8
 8006b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0204 	bic.w	r2, r2, #4
 8006b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69d9      	ldr	r1, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	61da      	str	r2, [r3, #28]
      break;
 8006b64:	e023      	b.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fa17 	bl	8006fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	021a      	lsls	r2, r3, #8
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	61da      	str	r2, [r3, #28]
      break;
 8006ba6:	e002      	b.n	8006bae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3a      	ldr	r2, [pc, #232]	@ (8006d0c <TIM_Base_SetConfig+0xfc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d00f      	beq.n	8006c48 <TIM_Base_SetConfig+0x38>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2e:	d00b      	beq.n	8006c48 <TIM_Base_SetConfig+0x38>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a37      	ldr	r2, [pc, #220]	@ (8006d10 <TIM_Base_SetConfig+0x100>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d007      	beq.n	8006c48 <TIM_Base_SetConfig+0x38>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a36      	ldr	r2, [pc, #216]	@ (8006d14 <TIM_Base_SetConfig+0x104>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_Base_SetConfig+0x38>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a35      	ldr	r2, [pc, #212]	@ (8006d18 <TIM_Base_SetConfig+0x108>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d108      	bne.n	8006c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d0c <TIM_Base_SetConfig+0xfc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01b      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c68:	d017      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a28      	ldr	r2, [pc, #160]	@ (8006d10 <TIM_Base_SetConfig+0x100>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a27      	ldr	r2, [pc, #156]	@ (8006d14 <TIM_Base_SetConfig+0x104>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00f      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a26      	ldr	r2, [pc, #152]	@ (8006d18 <TIM_Base_SetConfig+0x108>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00b      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a25      	ldr	r2, [pc, #148]	@ (8006d1c <TIM_Base_SetConfig+0x10c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d007      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a24      	ldr	r2, [pc, #144]	@ (8006d20 <TIM_Base_SetConfig+0x110>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d003      	beq.n	8006c9a <TIM_Base_SetConfig+0x8a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a23      	ldr	r2, [pc, #140]	@ (8006d24 <TIM_Base_SetConfig+0x114>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d108      	bne.n	8006cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8006d0c <TIM_Base_SetConfig+0xfc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d103      	bne.n	8006ce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d105      	bne.n	8006cfe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	611a      	str	r2, [r3, #16]
  }
}
 8006cfe:	bf00      	nop
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40010000 	.word	0x40010000
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40000c00 	.word	0x40000c00
 8006d1c:	40014000 	.word	0x40014000
 8006d20:	40014400 	.word	0x40014400
 8006d24:	40014800 	.word	0x40014800

08006d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1b      	ldr	r3, [r3, #32]
 8006d3c:	f023 0201 	bic.w	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f023 0302 	bic.w	r3, r3, #2
 8006d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006df0 <TIM_OC1_SetConfig+0xc8>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10c      	bne.n	8006d9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0308 	bic.w	r3, r3, #8
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a13      	ldr	r2, [pc, #76]	@ (8006df0 <TIM_OC1_SetConfig+0xc8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	695b      	ldr	r3, [r3, #20]
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	621a      	str	r2, [r3, #32]
}
 8006de4:	bf00      	nop
 8006de6:	371c      	adds	r7, #28
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	40010000 	.word	0x40010000

08006df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	f023 0210 	bic.w	r2, r3, #16
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	021b      	lsls	r3, r3, #8
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0320 	bic.w	r3, r3, #32
 8006e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec8 <TIM_OC2_SetConfig+0xd4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d10d      	bne.n	8006e70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a15      	ldr	r2, [pc, #84]	@ (8006ec8 <TIM_OC2_SetConfig+0xd4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d113      	bne.n	8006ea0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	621a      	str	r2, [r3, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010000 	.word	0x40010000

08006ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	021b      	lsls	r3, r3, #8
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a1d      	ldr	r2, [pc, #116]	@ (8006f9c <TIM_OC3_SetConfig+0xd0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d10d      	bne.n	8006f46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a14      	ldr	r2, [pc, #80]	@ (8006f9c <TIM_OC3_SetConfig+0xd0>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d113      	bne.n	8006f76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40010000 	.word	0x40010000

08006fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	021b      	lsls	r3, r3, #8
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	031b      	lsls	r3, r3, #12
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a10      	ldr	r2, [pc, #64]	@ (800703c <TIM_OC4_SetConfig+0x9c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d109      	bne.n	8007014 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	019b      	lsls	r3, r3, #6
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	621a      	str	r2, [r3, #32]
}
 800702e:	bf00      	nop
 8007030:	371c      	adds	r7, #28
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010000 	.word	0x40010000

08007040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e050      	b.n	80070fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070a4:	d013      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a18      	ldr	r2, [pc, #96]	@ (800710c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a16      	ldr	r2, [pc, #88]	@ (8007110 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a15      	ldr	r2, [pc, #84]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a13      	ldr	r2, [pc, #76]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d10c      	bne.n	80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3714      	adds	r7, #20
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800
 8007114:	40000c00 	.word	0x40000c00
 8007118:	40014000 	.word	0x40014000

0800711c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007144:	b084      	sub	sp, #16
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	f107 001c 	add.w	r0, r7, #28
 8007152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007156:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800715a:	2b01      	cmp	r3, #1
 800715c:	d123      	bne.n	80071a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007162:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007186:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800718a:	2b01      	cmp	r3, #1
 800718c:	d105      	bne.n	800719a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fae2 	bl	8008764 <USB_CoreReset>
 80071a0:	4603      	mov	r3, r0
 80071a2:	73fb      	strb	r3, [r7, #15]
 80071a4:	e01b      	b.n	80071de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fad6 	bl	8008764 <USB_CoreReset>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80071d0:	e005      	b.n	80071de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071de:	7fbb      	ldrb	r3, [r7, #30]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10b      	bne.n	80071fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f043 0206 	orr.w	r2, r3, #6
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007208:	b004      	add	sp, #16
 800720a:	4770      	bx	lr

0800720c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800721a:	79fb      	ldrb	r3, [r7, #7]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d165      	bne.n	80072ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4a41      	ldr	r2, [pc, #260]	@ (8007328 <USB_SetTurnaroundTime+0x11c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d906      	bls.n	8007236 <USB_SetTurnaroundTime+0x2a>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	4a40      	ldr	r2, [pc, #256]	@ (800732c <USB_SetTurnaroundTime+0x120>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d202      	bcs.n	8007236 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007230:	230f      	movs	r3, #15
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	e062      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4a3c      	ldr	r2, [pc, #240]	@ (800732c <USB_SetTurnaroundTime+0x120>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d306      	bcc.n	800724c <USB_SetTurnaroundTime+0x40>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4a3b      	ldr	r2, [pc, #236]	@ (8007330 <USB_SetTurnaroundTime+0x124>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d202      	bcs.n	800724c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007246:	230e      	movs	r3, #14
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e057      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4a38      	ldr	r2, [pc, #224]	@ (8007330 <USB_SetTurnaroundTime+0x124>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d306      	bcc.n	8007262 <USB_SetTurnaroundTime+0x56>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4a37      	ldr	r2, [pc, #220]	@ (8007334 <USB_SetTurnaroundTime+0x128>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d202      	bcs.n	8007262 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800725c:	230d      	movs	r3, #13
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e04c      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	4a33      	ldr	r2, [pc, #204]	@ (8007334 <USB_SetTurnaroundTime+0x128>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d306      	bcc.n	8007278 <USB_SetTurnaroundTime+0x6c>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	4a32      	ldr	r2, [pc, #200]	@ (8007338 <USB_SetTurnaroundTime+0x12c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d802      	bhi.n	8007278 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007272:	230c      	movs	r3, #12
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e041      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4a2f      	ldr	r2, [pc, #188]	@ (8007338 <USB_SetTurnaroundTime+0x12c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d906      	bls.n	800728e <USB_SetTurnaroundTime+0x82>
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4a2e      	ldr	r2, [pc, #184]	@ (800733c <USB_SetTurnaroundTime+0x130>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d802      	bhi.n	800728e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007288:	230b      	movs	r3, #11
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e036      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	4a2a      	ldr	r2, [pc, #168]	@ (800733c <USB_SetTurnaroundTime+0x130>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d906      	bls.n	80072a4 <USB_SetTurnaroundTime+0x98>
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	4a29      	ldr	r2, [pc, #164]	@ (8007340 <USB_SetTurnaroundTime+0x134>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d802      	bhi.n	80072a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800729e:	230a      	movs	r3, #10
 80072a0:	617b      	str	r3, [r7, #20]
 80072a2:	e02b      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4a26      	ldr	r2, [pc, #152]	@ (8007340 <USB_SetTurnaroundTime+0x134>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d906      	bls.n	80072ba <USB_SetTurnaroundTime+0xae>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4a25      	ldr	r2, [pc, #148]	@ (8007344 <USB_SetTurnaroundTime+0x138>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d202      	bcs.n	80072ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072b4:	2309      	movs	r3, #9
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e020      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	4a21      	ldr	r2, [pc, #132]	@ (8007344 <USB_SetTurnaroundTime+0x138>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d306      	bcc.n	80072d0 <USB_SetTurnaroundTime+0xc4>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4a20      	ldr	r2, [pc, #128]	@ (8007348 <USB_SetTurnaroundTime+0x13c>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d802      	bhi.n	80072d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80072ca:	2308      	movs	r3, #8
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e015      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007348 <USB_SetTurnaroundTime+0x13c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d906      	bls.n	80072e6 <USB_SetTurnaroundTime+0xda>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4a1c      	ldr	r2, [pc, #112]	@ (800734c <USB_SetTurnaroundTime+0x140>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d202      	bcs.n	80072e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80072e0:	2307      	movs	r3, #7
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e00a      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072e6:	2306      	movs	r3, #6
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	e007      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072f2:	2309      	movs	r3, #9
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	e001      	b.n	80072fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072f8:	2309      	movs	r3, #9
 80072fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007314:	431a      	orrs	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	00d8acbf 	.word	0x00d8acbf
 800732c:	00e4e1c0 	.word	0x00e4e1c0
 8007330:	00f42400 	.word	0x00f42400
 8007334:	01067380 	.word	0x01067380
 8007338:	011a499f 	.word	0x011a499f
 800733c:	01312cff 	.word	0x01312cff
 8007340:	014ca43f 	.word	0x014ca43f
 8007344:	016e3600 	.word	0x016e3600
 8007348:	01a6ab1f 	.word	0x01a6ab1f
 800734c:	01e84800 	.word	0x01e84800

08007350 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f043 0201 	orr.w	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f023 0201 	bic.w	r2, r3, #1
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d115      	bne.n	80073e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073c2:	200a      	movs	r0, #10
 80073c4:	f7fb f8ba 	bl	800253c <HAL_Delay>
      ms += 10U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	330a      	adds	r3, #10
 80073cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f001 f939 	bl	8008646 <USB_GetMode>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d01e      	beq.n	8007418 <USB_SetCurrentMode+0x84>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80073de:	d9f0      	bls.n	80073c2 <USB_SetCurrentMode+0x2e>
 80073e0:	e01a      	b.n	8007418 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80073e2:	78fb      	ldrb	r3, [r7, #3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d115      	bne.n	8007414 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073f4:	200a      	movs	r0, #10
 80073f6:	f7fb f8a1 	bl	800253c <HAL_Delay>
      ms += 10U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	330a      	adds	r3, #10
 80073fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f001 f920 	bl	8008646 <USB_GetMode>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <USB_SetCurrentMode+0x84>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007410:	d9f0      	bls.n	80073f4 <USB_SetCurrentMode+0x60>
 8007412:	e001      	b.n	8007418 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e005      	b.n	8007424 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2bc8      	cmp	r3, #200	@ 0xc8
 800741c:	d101      	bne.n	8007422 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800742c:	b084      	sub	sp, #16
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800743a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e009      	b.n	8007460 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3340      	adds	r3, #64	@ 0x40
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	2200      	movs	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3301      	adds	r3, #1
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b0e      	cmp	r3, #14
 8007464:	d9f2      	bls.n	800744c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007466:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800746a:	2b00      	cmp	r3, #0
 800746c:	d11c      	bne.n	80074a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800747c:	f043 0302 	orr.w	r3, r3, #2
 8007480:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007486:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007492:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80074a6:	e00b      	b.n	80074c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074c6:	461a      	mov	r2, r3
 80074c8:	2300      	movs	r3, #0
 80074ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10d      	bne.n	80074f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80074d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f968 	bl	80077b4 <USB_SetDevSpeed>
 80074e4:	e008      	b.n	80074f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074e6:	2101      	movs	r1, #1
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f963 	bl	80077b4 <USB_SetDevSpeed>
 80074ee:	e003      	b.n	80074f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074f0:	2103      	movs	r1, #3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f95e 	bl	80077b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074f8:	2110      	movs	r1, #16
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f8fa 	bl	80076f4 <USB_FlushTxFifo>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f924 	bl	8007758 <USB_FlushRxFifo>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007520:	461a      	mov	r2, r3
 8007522:	2300      	movs	r3, #0
 8007524:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752c:	461a      	mov	r2, r3
 800752e:	2300      	movs	r3, #0
 8007530:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007538:	461a      	mov	r2, r3
 800753a:	2300      	movs	r3, #0
 800753c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
 8007542:	e043      	b.n	80075cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800755a:	d118      	bne.n	800758e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800756e:	461a      	mov	r2, r3
 8007570:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e013      	b.n	80075a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e008      	b.n	80075a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	461a      	mov	r2, r3
 800759c:	2300      	movs	r3, #0
 800759e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075be:	461a      	mov	r2, r3
 80075c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075d0:	461a      	mov	r2, r3
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d3b5      	bcc.n	8007544 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	e043      	b.n	8007666 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075f4:	d118      	bne.n	8007628 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10a      	bne.n	8007612 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007608:	461a      	mov	r2, r3
 800760a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e013      	b.n	800763a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761e:	461a      	mov	r2, r3
 8007620:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	e008      	b.n	800763a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007634:	461a      	mov	r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007646:	461a      	mov	r2, r3
 8007648:	2300      	movs	r3, #0
 800764a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	461a      	mov	r2, r3
 800765a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800765e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	3301      	adds	r3, #1
 8007664:	613b      	str	r3, [r7, #16]
 8007666:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800766a:	461a      	mov	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4293      	cmp	r3, r2
 8007670:	d3b5      	bcc.n	80075de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007680:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007684:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007692:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007694:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007698:	2b00      	cmp	r3, #0
 800769a:	d105      	bne.n	80076a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f043 0210 	orr.w	r2, r3, #16
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <USB_DevInit+0x2c4>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	f043 0208 	orr.w	r2, r3, #8
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80076c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d107      	bne.n	80076e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076d8:	f043 0304 	orr.w	r3, r3, #4
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3718      	adds	r7, #24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ec:	b004      	add	sp, #16
 80076ee:	4770      	bx	lr
 80076f0:	803c3800 	.word	0x803c3800

080076f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800770e:	d901      	bls.n	8007714 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e01b      	b.n	800774c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	daf2      	bge.n	8007702 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	019b      	lsls	r3, r3, #6
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007738:	d901      	bls.n	800773e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e006      	b.n	800774c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b20      	cmp	r3, #32
 8007748:	d0f0      	beq.n	800772c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007770:	d901      	bls.n	8007776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e018      	b.n	80077a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	daf2      	bge.n	8007764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2210      	movs	r2, #16
 8007786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007794:	d901      	bls.n	800779a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e006      	b.n	80077a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d0f0      	beq.n	8007788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	68f9      	ldr	r1, [r7, #12]
 80077d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077d4:	4313      	orrs	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b087      	sub	sp, #28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0306 	and.w	r3, r3, #6
 80077fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d102      	bne.n	800780c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007806:	2300      	movs	r3, #0
 8007808:	75fb      	strb	r3, [r7, #23]
 800780a:	e00a      	b.n	8007822 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d002      	beq.n	8007818 <USB_GetDevSpeed+0x32>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2b06      	cmp	r3, #6
 8007816:	d102      	bne.n	800781e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007818:	2302      	movs	r3, #2
 800781a:	75fb      	strb	r3, [r7, #23]
 800781c:	e001      	b.n	8007822 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800781e:	230f      	movs	r3, #15
 8007820:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007822:	7dfb      	ldrb	r3, [r7, #23]
}
 8007824:	4618      	mov	r0, r3
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d13a      	bne.n	80078c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	2101      	movs	r1, #1
 800785e:	fa01 f303 	lsl.w	r3, r1, r3
 8007862:	b29b      	uxth	r3, r3
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800786a:	4313      	orrs	r3, r2
 800786c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d155      	bne.n	8007930 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	791b      	ldrb	r3, [r3, #4]
 800789e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	059b      	lsls	r3, r3, #22
 80078a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078a8:	4313      	orrs	r3, r2
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	e036      	b.n	8007930 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078c8:	69da      	ldr	r2, [r3, #28]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	2101      	movs	r1, #1
 80078d4:	fa01 f303 	lsl.w	r3, r1, r3
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d11a      	bne.n	8007930 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	791b      	ldrb	r3, [r3, #4]
 8007914:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007916:	430b      	orrs	r3, r1
 8007918:	4313      	orrs	r3, r2
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	0151      	lsls	r1, r2, #5
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	440a      	add	r2, r1
 8007922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800792a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800792e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	785b      	ldrb	r3, [r3, #1]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d161      	bne.n	8007a20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800796e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007972:	d11f      	bne.n	80079b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007992:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2101      	movs	r1, #1
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d4:	4013      	ands	r3, r2
 80079d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079de:	69da      	ldr	r2, [r3, #28]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f003 030f 	and.w	r3, r3, #15
 80079e8:	2101      	movs	r1, #1
 80079ea:	fa01 f303 	lsl.w	r3, r1, r3
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	43db      	mvns	r3, r3
 80079f2:	68f9      	ldr	r1, [r7, #12]
 80079f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079f8:	4013      	ands	r3, r2
 80079fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	0159      	lsls	r1, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	440b      	add	r3, r1
 8007a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a16:	4619      	mov	r1, r3
 8007a18:	4b35      	ldr	r3, [pc, #212]	@ (8007af0 <USB_DeactivateEndpoint+0x1b0>)
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	600b      	str	r3, [r1, #0]
 8007a1e:	e060      	b.n	8007ae2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a36:	d11f      	bne.n	8007a78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 030f 	and.w	r3, r3, #15
 8007a88:	2101      	movs	r1, #1
 8007a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8e:	041b      	lsls	r3, r3, #16
 8007a90:	43db      	mvns	r3, r3
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a98:	4013      	ands	r3, r2
 8007a9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa2:	69da      	ldr	r2, [r3, #28]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	2101      	movs	r1, #1
 8007aae:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab2:	041b      	lsls	r3, r3, #16
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007abc:	4013      	ands	r3, r2
 8007abe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	0159      	lsls	r1, r3, #5
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	440b      	add	r3, r1
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ada:	4619      	mov	r1, r3
 8007adc:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <USB_DeactivateEndpoint+0x1b4>)
 8007ade:	4013      	ands	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	ec337800 	.word	0xec337800
 8007af4:	eff37800 	.word	0xeff37800

08007af8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	4613      	mov	r3, r2
 8007b04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	f040 817a 	bne.w	8007e0e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d132      	bne.n	8007b88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b80:	0cdb      	lsrs	r3, r3, #19
 8007b82:	04db      	lsls	r3, r3, #19
 8007b84:	6113      	str	r3, [r2, #16]
 8007b86:	e092      	b.n	8007cae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0151      	lsls	r1, r2, #5
 8007b9a:	69fa      	ldr	r2, [r7, #28]
 8007b9c:	440a      	add	r2, r1
 8007b9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ba2:	0cdb      	lsrs	r3, r3, #19
 8007ba4:	04db      	lsls	r3, r3, #19
 8007ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007bc6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007bca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d11a      	bne.n	8007c08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	691a      	ldr	r2, [r3, #16]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d903      	bls.n	8007be6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	689a      	ldr	r2, [r3, #8]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	0151      	lsls	r1, r2, #5
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	440a      	add	r2, r1
 8007bfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c04:	6113      	str	r3, [r2, #16]
 8007c06:	e01b      	b.n	8007c40 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c14:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6919      	ldr	r1, [r3, #16]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	440b      	add	r3, r1
 8007c20:	1e59      	subs	r1, r3, #1
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c2a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c2c:	4ba2      	ldr	r3, [pc, #648]	@ (8007eb8 <USB_EPStartXfer+0x3c0>)
 8007c2e:	400b      	ands	r3, r1
 8007c30:	69b9      	ldr	r1, [r7, #24]
 8007c32:	0148      	lsls	r0, r1, #5
 8007c34:	69f9      	ldr	r1, [r7, #28]
 8007c36:	4401      	add	r1, r0
 8007c38:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c56:	69b9      	ldr	r1, [r7, #24]
 8007c58:	0148      	lsls	r0, r1, #5
 8007c5a:	69f9      	ldr	r1, [r7, #28]
 8007c5c:	4401      	add	r1, r0
 8007c5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c62:	4313      	orrs	r3, r2
 8007c64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	791b      	ldrb	r3, [r3, #4]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d11f      	bne.n	8007cae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	0151      	lsls	r1, r2, #5
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	440a      	add	r2, r1
 8007c84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c88:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ca8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007cac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d14b      	bne.n	8007d4c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	69db      	ldr	r3, [r3, #28]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cc8:	461a      	mov	r2, r3
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	791b      	ldrb	r3, [r3, #4]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d128      	bne.n	8007d2a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d110      	bne.n	8007d0a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e00f      	b.n	8007d2a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d44:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e165      	b.n	8008018 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d66:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d015      	beq.n	8007da0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 814d 	beq.w	8008018 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	2101      	movs	r1, #1
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	69f9      	ldr	r1, [r7, #28]
 8007d96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	634b      	str	r3, [r1, #52]	@ 0x34
 8007d9e:	e13b      	b.n	8008018 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d110      	bne.n	8007dd2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	0151      	lsls	r1, r2, #5
 8007dc2:	69fa      	ldr	r2, [r7, #28]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e00f      	b.n	8007df2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007df0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	68d9      	ldr	r1, [r3, #12]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	b298      	uxth	r0, r3
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	4603      	mov	r3, r0
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f9b8 	bl	800817c <USB_WritePacket>
 8007e0c:	e104      	b.n	8008018 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e28:	0cdb      	lsrs	r3, r3, #19
 8007e2a:	04db      	lsls	r3, r3, #19
 8007e2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e50:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d131      	bne.n	8007ebc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e86:	69b9      	ldr	r1, [r7, #24]
 8007e88:	0148      	lsls	r0, r1, #5
 8007e8a:	69f9      	ldr	r1, [r7, #28]
 8007e8c:	4401      	add	r1, r0
 8007e8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e92:	4313      	orrs	r3, r2
 8007e94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	0151      	lsls	r1, r2, #5
 8007ea8:	69fa      	ldr	r2, [r7, #28]
 8007eaa:	440a      	add	r2, r1
 8007eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007eb4:	6113      	str	r3, [r2, #16]
 8007eb6:	e061      	b.n	8007f7c <USB_EPStartXfer+0x484>
 8007eb8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d123      	bne.n	8007f0c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eda:	69b9      	ldr	r1, [r7, #24]
 8007edc:	0148      	lsls	r0, r1, #5
 8007ede:	69f9      	ldr	r1, [r7, #28]
 8007ee0:	4401      	add	r1, r0
 8007ee2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f08:	6113      	str	r3, [r2, #16]
 8007f0a:	e037      	b.n	8007f7c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4413      	add	r3, r2
 8007f16:	1e5a      	subs	r2, r3, #1
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	8afa      	ldrh	r2, [r7, #22]
 8007f28:	fb03 f202 	mul.w	r2, r3, r2
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	8afb      	ldrh	r3, [r7, #22]
 8007f40:	04d9      	lsls	r1, r3, #19
 8007f42:	4b38      	ldr	r3, [pc, #224]	@ (8008024 <USB_EPStartXfer+0x52c>)
 8007f44:	400b      	ands	r3, r1
 8007f46:	69b9      	ldr	r1, [r7, #24]
 8007f48:	0148      	lsls	r0, r1, #5
 8007f4a:	69f9      	ldr	r1, [r7, #28]
 8007f4c:	4401      	add	r1, r0
 8007f4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f52:	4313      	orrs	r3, r2
 8007f54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f6c:	69b9      	ldr	r1, [r7, #24]
 8007f6e:	0148      	lsls	r0, r1, #5
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	4401      	add	r1, r0
 8007f74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007f7c:	79fb      	ldrb	r3, [r7, #7]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10d      	bne.n	8007f9e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	68d9      	ldr	r1, [r3, #12]
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	791b      	ldrb	r3, [r3, #4]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d128      	bne.n	8007ff8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d110      	bne.n	8007fd8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e00f      	b.n	8007ff8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ff2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ff6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008012:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008016:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3720      	adds	r7, #32
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	1ff80000 	.word	0x1ff80000

08008028 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	785b      	ldrb	r3, [r3, #1]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d14a      	bne.n	80080dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800805a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800805e:	f040 8086 	bne.w	800816e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008080:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008084:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	7812      	ldrb	r2, [r2, #0]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d902      	bls.n	80080c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	75fb      	strb	r3, [r7, #23]
          break;
 80080be:	e056      	b.n	800816e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080d8:	d0e7      	beq.n	80080aa <USB_EPStopXfer+0x82>
 80080da:	e048      	b.n	800816e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080f4:	d13b      	bne.n	800816e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008114:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008118:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	7812      	ldrb	r2, [r2, #0]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	440a      	add	r2, r1
 8008134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800813c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3301      	adds	r3, #1
 8008142:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f242 7210 	movw	r2, #10000	@ 0x2710
 800814a:	4293      	cmp	r3, r2
 800814c:	d902      	bls.n	8008154 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	75fb      	strb	r3, [r7, #23]
          break;
 8008152:	e00c      	b.n	800816e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008168:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800816c:	d0e7      	beq.n	800813e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008170:	4618      	mov	r0, r3
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800817c:	b480      	push	{r7}
 800817e:	b089      	sub	sp, #36	@ 0x24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4611      	mov	r1, r2
 8008188:	461a      	mov	r2, r3
 800818a:	460b      	mov	r3, r1
 800818c:	71fb      	strb	r3, [r7, #7]
 800818e:	4613      	mov	r3, r2
 8008190:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800819a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d123      	bne.n	80081ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80081a2:	88bb      	ldrh	r3, [r7, #4]
 80081a4:	3303      	adds	r3, #3
 80081a6:	089b      	lsrs	r3, r3, #2
 80081a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e018      	b.n	80081e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	031a      	lsls	r2, r3, #12
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081bc:	461a      	mov	r2, r3
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	3301      	adds	r3, #1
 80081c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	3301      	adds	r3, #1
 80081d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	3301      	adds	r3, #1
 80081da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	3301      	adds	r3, #1
 80081e0:	61bb      	str	r3, [r7, #24]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d3e2      	bcc.n	80081b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3724      	adds	r7, #36	@ 0x24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b08b      	sub	sp, #44	@ 0x2c
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	4613      	mov	r3, r2
 8008204:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	089b      	lsrs	r3, r3, #2
 8008212:	b29b      	uxth	r3, r3
 8008214:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008216:	88fb      	ldrh	r3, [r7, #6]
 8008218:	f003 0303 	and.w	r3, r3, #3
 800821c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800821e:	2300      	movs	r3, #0
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	e014      	b.n	800824e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	3301      	adds	r3, #1
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008238:	3301      	adds	r3, #1
 800823a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800823c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823e:	3301      	adds	r3, #1
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	3301      	adds	r3, #1
 8008246:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	3301      	adds	r3, #1
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	6a3a      	ldr	r2, [r7, #32]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	429a      	cmp	r2, r3
 8008254:	d3e6      	bcc.n	8008224 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008256:	8bfb      	ldrh	r3, [r7, #30]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01e      	beq.n	800829a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008266:	461a      	mov	r2, r3
 8008268:	f107 0310 	add.w	r3, r7, #16
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	b2db      	uxtb	r3, r3
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	fa22 f303 	lsr.w	r3, r2, r3
 800827c:	b2da      	uxtb	r2, r3
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	701a      	strb	r2, [r3, #0]
      i++;
 8008282:	6a3b      	ldr	r3, [r7, #32]
 8008284:	3301      	adds	r3, #1
 8008286:	623b      	str	r3, [r7, #32]
      pDest++;
 8008288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828a:	3301      	adds	r3, #1
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800828e:	8bfb      	ldrh	r3, [r7, #30]
 8008290:	3b01      	subs	r3, #1
 8008292:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008294:	8bfb      	ldrh	r3, [r7, #30]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1ea      	bne.n	8008270 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800829a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800829c:	4618      	mov	r0, r3
 800829e:	372c      	adds	r7, #44	@ 0x2c
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d12c      	bne.n	800831e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db12      	blt.n	80082fc <USB_EPSetStall+0x54>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00f      	beq.n	80082fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	440a      	add	r2, r1
 8008312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008316:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e02b      	b.n	8008376 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	db12      	blt.n	8008356 <USB_EPSetStall+0xae>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00f      	beq.n	8008356 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	015a      	lsls	r2, r3, #5
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4413      	add	r3, r2
 800833e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	0151      	lsls	r1, r2, #5
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	440a      	add	r2, r1
 800834c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008350:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008354:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008370:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d128      	bne.n	80083f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d003      	beq.n	80083d0 <USB_EPClearStall+0x4c>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	791b      	ldrb	r3, [r3, #4]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d138      	bne.n	8008442 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	e027      	b.n	8008442 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	440a      	add	r2, r1
 8008408:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800840c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008410:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d003      	beq.n	8008422 <USB_EPClearStall+0x9e>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	791b      	ldrb	r3, [r3, #4]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d10f      	bne.n	8008442 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	0151      	lsls	r1, r2, #5
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	440a      	add	r2, r1
 8008438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800843c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008440:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800846e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008472:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008484:	68f9      	ldr	r1, [r7, #12]
 8008486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800848a:	4313      	orrs	r3, r2
 800848c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084ca:	f023 0302 	bic.w	r3, r3, #2
 80084ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3714      	adds	r7, #20
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800850c:	f043 0302 	orr.w	r3, r3, #2
 8008510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4013      	ands	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008538:	68fb      	ldr	r3, [r7, #12]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	4013      	ands	r3, r2
 8008568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	0c1b      	lsrs	r3, r3, #16
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	4013      	ands	r3, r2
 800859c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	b29b      	uxth	r3, r3
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b085      	sub	sp, #20
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	460b      	mov	r3, r1
 80085b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	4013      	ands	r3, r2
 80085da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085dc:	68bb      	ldr	r3, [r7, #8]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b087      	sub	sp, #28
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800860a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800860c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	fa22 f303 	lsr.w	r3, r2, r3
 800861a:	01db      	lsls	r3, r3, #7
 800861c:	b2db      	uxtb	r3, r3
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	4413      	add	r3, r2
 800862c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4013      	ands	r3, r2
 8008636:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008638:	68bb      	ldr	r3, [r7, #8]
}
 800863a:	4618      	mov	r0, r3
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	f003 0301 	and.w	r3, r3, #1
}
 8008656:	4618      	mov	r0, r3
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008662:	b480      	push	{r7}
 8008664:	b085      	sub	sp, #20
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008680:	f023 0307 	bic.w	r3, r3, #7
 8008684:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008698:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	460b      	mov	r3, r1
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	333c      	adds	r3, #60	@ 0x3c
 80086be:	3304      	adds	r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4a26      	ldr	r2, [pc, #152]	@ (8008760 <USB_EP0_OutStart+0xb8>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d90a      	bls.n	80086e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086dc:	d101      	bne.n	80086e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	e037      	b.n	8008752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e8:	461a      	mov	r2, r3
 80086ea:	2300      	movs	r3, #0
 80086ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008710:	f043 0318 	orr.w	r3, r3, #24
 8008714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008724:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d10f      	bne.n	8008750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008736:	461a      	mov	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800874a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800874e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	4f54300a 	.word	0x4f54300a

08008764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800877c:	d901      	bls.n	8008782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e01b      	b.n	80087ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	daf2      	bge.n	8008770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	f043 0201 	orr.w	r2, r3, #1
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3301      	adds	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087a6:	d901      	bls.n	80087ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e006      	b.n	80087ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d0f0      	beq.n	800879a <USB_CoreReset+0x36>

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80087d8:	f005 fa7a 	bl	800dcd0 <USBD_static_malloc>
 80087dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d109      	bne.n	80087f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32b0      	adds	r2, #176	@ 0xb0
 80087ee:	2100      	movs	r1, #0
 80087f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087f4:	2302      	movs	r3, #2
 80087f6:	e0d4      	b.n	80089a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80087fc:	2100      	movs	r1, #0
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f005 faaa 	bl	800dd58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32b0      	adds	r2, #176	@ 0xb0
 800880e:	68f9      	ldr	r1, [r7, #12]
 8008810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	32b0      	adds	r2, #176	@ 0xb0
 800881e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	7c1b      	ldrb	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d138      	bne.n	80088a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008830:	4b5e      	ldr	r3, [pc, #376]	@ (80089ac <USBD_CDC_Init+0x1e4>)
 8008832:	7819      	ldrb	r1, [r3, #0]
 8008834:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008838:	2202      	movs	r2, #2
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f005 f925 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008840:	4b5a      	ldr	r3, [pc, #360]	@ (80089ac <USBD_CDC_Init+0x1e4>)
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	f003 020f 	and.w	r2, r3, #15
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3324      	adds	r3, #36	@ 0x24
 8008856:	2201      	movs	r2, #1
 8008858:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800885a:	4b55      	ldr	r3, [pc, #340]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 800885c:	7819      	ldrb	r1, [r3, #0]
 800885e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008862:	2202      	movs	r2, #2
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f005 f910 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800886a:	4b51      	ldr	r3, [pc, #324]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	f003 020f 	and.w	r2, r3, #15
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008882:	2201      	movs	r2, #1
 8008884:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008886:	4b4b      	ldr	r3, [pc, #300]	@ (80089b4 <USBD_CDC_Init+0x1ec>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	f003 020f 	and.w	r2, r3, #15
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	440b      	add	r3, r1
 800889a:	3326      	adds	r3, #38	@ 0x26
 800889c:	2210      	movs	r2, #16
 800889e:	801a      	strh	r2, [r3, #0]
 80088a0:	e035      	b.n	800890e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088a2:	4b42      	ldr	r3, [pc, #264]	@ (80089ac <USBD_CDC_Init+0x1e4>)
 80088a4:	7819      	ldrb	r1, [r3, #0]
 80088a6:	2340      	movs	r3, #64	@ 0x40
 80088a8:	2202      	movs	r2, #2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f005 f8ed 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088b0:	4b3e      	ldr	r3, [pc, #248]	@ (80089ac <USBD_CDC_Init+0x1e4>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	f003 020f 	and.w	r2, r3, #15
 80088b8:	6879      	ldr	r1, [r7, #4]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	440b      	add	r3, r1
 80088c4:	3324      	adds	r3, #36	@ 0x24
 80088c6:	2201      	movs	r2, #1
 80088c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088ca:	4b39      	ldr	r3, [pc, #228]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 80088cc:	7819      	ldrb	r1, [r3, #0]
 80088ce:	2340      	movs	r3, #64	@ 0x40
 80088d0:	2202      	movs	r2, #2
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f005 f8d9 	bl	800da8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088d8:	4b35      	ldr	r3, [pc, #212]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 020f 	and.w	r2, r3, #15
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4613      	mov	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088f0:	2201      	movs	r2, #1
 80088f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088f4:	4b2f      	ldr	r3, [pc, #188]	@ (80089b4 <USBD_CDC_Init+0x1ec>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 020f 	and.w	r2, r3, #15
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	4613      	mov	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	440b      	add	r3, r1
 8008908:	3326      	adds	r3, #38	@ 0x26
 800890a:	2210      	movs	r2, #16
 800890c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800890e:	4b29      	ldr	r3, [pc, #164]	@ (80089b4 <USBD_CDC_Init+0x1ec>)
 8008910:	7819      	ldrb	r1, [r3, #0]
 8008912:	2308      	movs	r3, #8
 8008914:	2203      	movs	r2, #3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f005 f8b7 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800891c:	4b25      	ldr	r3, [pc, #148]	@ (80089b4 <USBD_CDC_Init+0x1ec>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 020f 	and.w	r2, r3, #15
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	4613      	mov	r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	440b      	add	r3, r1
 8008930:	3324      	adds	r3, #36	@ 0x24
 8008932:	2201      	movs	r2, #1
 8008934:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	33b0      	adds	r3, #176	@ 0xb0
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800896c:	2302      	movs	r3, #2
 800896e:	e018      	b.n	80089a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	7c1b      	ldrb	r3, [r3, #16]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008978:	4b0d      	ldr	r3, [pc, #52]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 800897a:	7819      	ldrb	r1, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008982:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f005 f96e 	bl	800dc68 <USBD_LL_PrepareReceive>
 800898c:	e008      	b.n	80089a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800898e:	4b08      	ldr	r3, [pc, #32]	@ (80089b0 <USBD_CDC_Init+0x1e8>)
 8008990:	7819      	ldrb	r1, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008998:	2340      	movs	r3, #64	@ 0x40
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f005 f964 	bl	800dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200000b3 	.word	0x200000b3
 80089b0:	200000b4 	.word	0x200000b4
 80089b4:	200000b5 	.word	0x200000b5

080089b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80089c4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ab0 <USBD_CDC_DeInit+0xf8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f005 f883 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80089d0:	4b37      	ldr	r3, [pc, #220]	@ (8008ab0 <USBD_CDC_DeInit+0xf8>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3324      	adds	r3, #36	@ 0x24
 80089e6:	2200      	movs	r2, #0
 80089e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089ea:	4b32      	ldr	r3, [pc, #200]	@ (8008ab4 <USBD_CDC_DeInit+0xfc>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f005 f870 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089f6:	4b2f      	ldr	r3, [pc, #188]	@ (8008ab4 <USBD_CDC_DeInit+0xfc>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	f003 020f 	and.w	r2, r3, #15
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a0e:	2200      	movs	r2, #0
 8008a10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a12:	4b29      	ldr	r3, [pc, #164]	@ (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f005 f85c 	bl	800dad6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a1e:	4b26      	ldr	r3, [pc, #152]	@ (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f003 020f 	and.w	r2, r3, #15
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3324      	adds	r3, #36	@ 0x24
 8008a34:	2200      	movs	r2, #0
 8008a36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a38:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 020f 	and.w	r2, r3, #15
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3326      	adds	r3, #38	@ 0x26
 8008a4e:	2200      	movs	r2, #0
 8008a50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	32b0      	adds	r2, #176	@ 0xb0
 8008a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01f      	beq.n	8008aa4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	33b0      	adds	r3, #176	@ 0xb0
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32b0      	adds	r2, #176	@ 0xb0
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f005 f930 	bl	800dcec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32b0      	adds	r2, #176	@ 0xb0
 8008a96:	2100      	movs	r1, #0
 8008a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	200000b3 	.word	0x200000b3
 8008ab4:	200000b4 	.word	0x200000b4
 8008ab8:	200000b5 	.word	0x200000b5

08008abc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32b0      	adds	r2, #176	@ 0xb0
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e0bf      	b.n	8008c6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d050      	beq.n	8008b9a <USBD_CDC_Setup+0xde>
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	f040 80af 	bne.w	8008c5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d03a      	beq.n	8008b7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b25b      	sxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da1b      	bge.n	8008b48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	33b0      	adds	r3, #176	@ 0xb0
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	88d2      	ldrh	r2, [r2, #6]
 8008b2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	bf28      	it	cs
 8008b36:	2307      	movcs	r3, #7
 8008b38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	89fa      	ldrh	r2, [r7, #14]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fd87 	bl	800a654 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b46:	e090      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785a      	ldrb	r2, [r3, #1]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b58:	d803      	bhi.n	8008b62 <USBD_CDC_Setup+0xa6>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	e000      	b.n	8008b64 <USBD_CDC_Setup+0xa8>
 8008b62:	2240      	movs	r2, #64	@ 0x40
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b6a:	6939      	ldr	r1, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008b72:	461a      	mov	r2, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fd99 	bl	800a6ac <USBD_CtlPrepareRx>
      break;
 8008b7a:	e076      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	33b0      	adds	r3, #176	@ 0xb0
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	7850      	ldrb	r0, [r2, #1]
 8008b92:	2200      	movs	r2, #0
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	4798      	blx	r3
      break;
 8008b98:	e067      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b0b      	cmp	r3, #11
 8008ba0:	d851      	bhi.n	8008c46 <USBD_CDC_Setup+0x18a>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <USBD_CDC_Setup+0xec>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bd9 	.word	0x08008bd9
 8008bac:	08008c55 	.word	0x08008c55
 8008bb0:	08008c47 	.word	0x08008c47
 8008bb4:	08008c47 	.word	0x08008c47
 8008bb8:	08008c47 	.word	0x08008c47
 8008bbc:	08008c47 	.word	0x08008c47
 8008bc0:	08008c47 	.word	0x08008c47
 8008bc4:	08008c47 	.word	0x08008c47
 8008bc8:	08008c47 	.word	0x08008c47
 8008bcc:	08008c47 	.word	0x08008c47
 8008bd0:	08008c03 	.word	0x08008c03
 8008bd4:	08008c2d 	.word	0x08008c2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d107      	bne.n	8008bf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008be4:	f107 030a 	add.w	r3, r7, #10
 8008be8:	2202      	movs	r2, #2
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fd31 	bl	800a654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bf2:	e032      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fcbb 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8008c00:	e02b      	b.n	8008c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d107      	bne.n	8008c1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c0e:	f107 030d 	add.w	r3, r7, #13
 8008c12:	2201      	movs	r2, #1
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fd1c 	bl	800a654 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c1c:	e01d      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fca6 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	75fb      	strb	r3, [r7, #23]
          break;
 8008c2a:	e016      	b.n	8008c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d00f      	beq.n	8008c58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fc99 	bl	800a572 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c44:	e008      	b.n	8008c58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fc92 	bl	800a572 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	75fb      	strb	r3, [r7, #23]
          break;
 8008c52:	e002      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
          break;
 8008c54:	bf00      	nop
 8008c56:	e008      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
          break;
 8008c58:	bf00      	nop
      }
      break;
 8008c5a:	e006      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 fc87 	bl	800a572 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
      break;
 8008c68:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	32b0      	adds	r2, #176	@ 0xb0
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e065      	b.n	8008d6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	32b0      	adds	r2, #176	@ 0xb0
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d02f      	beq.n	8008d28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 020f 	and.w	r2, r3, #15
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3318      	adds	r3, #24
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	f003 010f 	and.w	r1, r3, #15
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	440b      	add	r3, r1
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4403      	add	r3, r0
 8008cf0:	331c      	adds	r3, #28
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d112      	bne.n	8008d28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	f003 020f 	and.w	r2, r3, #15
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	3318      	adds	r3, #24
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f004 ff80 	bl	800dc26 <USBD_LL_Transmit>
 8008d26:	e01f      	b.n	8008d68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	33b0      	adds	r3, #176	@ 0xb0
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d010      	beq.n	8008d68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	33b0      	adds	r3, #176	@ 0xb0
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	32b0      	adds	r2, #176	@ 0xb0
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32b0      	adds	r2, #176	@ 0xb0
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e01a      	b.n	8008dda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f004 ff7e 	bl	800dcaa <USBD_LL_GetRxDataSize>
 8008dae:	4602      	mov	r2, r0
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	33b0      	adds	r3, #176	@ 0xb0
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	32b0      	adds	r2, #176	@ 0xb0
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e024      	b.n	8008e4e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	33b0      	adds	r3, #176	@ 0xb0
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d019      	beq.n	8008e4c <USBD_CDC_EP0_RxReady+0x6a>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008e1e:	2bff      	cmp	r3, #255	@ 0xff
 8008e20:	d014      	beq.n	8008e4c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	33b0      	adds	r3, #176	@ 0xb0
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	22ff      	movs	r2, #255	@ 0xff
 8008e48:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e60:	2182      	movs	r1, #130	@ 0x82
 8008e62:	4818      	ldr	r0, [pc, #96]	@ (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e64:	f000 fd4f 	bl	8009906 <USBD_GetEpDesc>
 8008e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	4815      	ldr	r0, [pc, #84]	@ (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e6e:	f000 fd4a 	bl	8009906 <USBD_GetEpDesc>
 8008e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e74:	2181      	movs	r1, #129	@ 0x81
 8008e76:	4813      	ldr	r0, [pc, #76]	@ (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e78:	f000 fd45 	bl	8009906 <USBD_GetEpDesc>
 8008e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2210      	movs	r2, #16
 8008e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e98:	711a      	strb	r2, [r3, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008eac:	711a      	strb	r2, [r3, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2243      	movs	r2, #67	@ 0x43
 8008eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000070 	.word	0x20000070

08008ec8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ed0:	2182      	movs	r1, #130	@ 0x82
 8008ed2:	4818      	ldr	r0, [pc, #96]	@ (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ed4:	f000 fd17 	bl	8009906 <USBD_GetEpDesc>
 8008ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eda:	2101      	movs	r1, #1
 8008edc:	4815      	ldr	r0, [pc, #84]	@ (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ede:	f000 fd12 	bl	8009906 <USBD_GetEpDesc>
 8008ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ee4:	2181      	movs	r1, #129	@ 0x81
 8008ee6:	4813      	ldr	r0, [pc, #76]	@ (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ee8:	f000 fd0d 	bl	8009906 <USBD_GetEpDesc>
 8008eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2200      	movs	r2, #0
 8008f04:	711a      	strb	r2, [r3, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f042 0202 	orr.w	r2, r2, #2
 8008f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	711a      	strb	r2, [r3, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f042 0202 	orr.w	r2, r2, #2
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2243      	movs	r2, #67	@ 0x43
 8008f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	@ (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000070 	.word	0x20000070

08008f38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f40:	2182      	movs	r1, #130	@ 0x82
 8008f42:	4818      	ldr	r0, [pc, #96]	@ (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f44:	f000 fcdf 	bl	8009906 <USBD_GetEpDesc>
 8008f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4815      	ldr	r0, [pc, #84]	@ (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f4e:	f000 fcda 	bl	8009906 <USBD_GetEpDesc>
 8008f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f54:	2181      	movs	r1, #129	@ 0x81
 8008f56:	4813      	ldr	r0, [pc, #76]	@ (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f58:	f000 fcd5 	bl	8009906 <USBD_GetEpDesc>
 8008f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2210      	movs	r2, #16
 8008f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f8c:	711a      	strb	r2, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2243      	movs	r2, #67	@ 0x43
 8008f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	@ (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000070 	.word	0x20000070

08008fa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220a      	movs	r2, #10
 8008fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2000002c 	.word	0x2000002c

08008fc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e009      	b.n	8008ff0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	33b0      	adds	r3, #176	@ 0xb0
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	32b0      	adds	r2, #176	@ 0xb0
 8009012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009016:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800901e:	2303      	movs	r3, #3
 8009020:	e008      	b.n	8009034 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	32b0      	adds	r2, #176	@ 0xb0
 8009054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009058:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	e004      	b.n	800906e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32b0      	adds	r2, #176	@ 0xb0
 800908e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009092:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e025      	b.n	80090ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11f      	bne.n	80090ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80090b4:	4b10      	ldr	r3, [pc, #64]	@ (80090f8 <USBD_CDC_TransmitPacket+0x7c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4403      	add	r3, r0
 80090ce:	3318      	adds	r3, #24
 80090d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80090d2:	4b09      	ldr	r3, [pc, #36]	@ (80090f8 <USBD_CDC_TransmitPacket+0x7c>)
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f004 fd9f 	bl	800dc26 <USBD_LL_Transmit>

    ret = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	200000b3 	.word	0x200000b3

080090fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	@ 0xb0
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32b0      	adds	r2, #176	@ 0xb0
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	e018      	b.n	800915c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7c1b      	ldrb	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009132:	4b0c      	ldr	r3, [pc, #48]	@ (8009164 <USBD_CDC_ReceivePacket+0x68>)
 8009134:	7819      	ldrb	r1, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800913c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f004 fd91 	bl	800dc68 <USBD_LL_PrepareReceive>
 8009146:	e008      	b.n	800915a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009148:	4b06      	ldr	r3, [pc, #24]	@ (8009164 <USBD_CDC_ReceivePacket+0x68>)
 800914a:	7819      	ldrb	r1, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009152:	2340      	movs	r3, #64	@ 0x40
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f004 fd87 	bl	800dc68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	200000b4 	.word	0x200000b4

08009168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e01f      	b.n	80091c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	79fa      	ldrb	r2, [r7, #7]
 80091b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f004 fc01 	bl	800d9bc <USBD_LL_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e025      	b.n	800922c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32ae      	adds	r2, #174	@ 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00f      	beq.n	800921c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	@ 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920c:	f107 020e 	add.w	r2, r7, #14
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f004 fc09 	bl	800da54 <USBD_LL_Start>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f90c 	bl	800a4fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b02      	cmp	r3, #2
 8009308:	d01a      	beq.n	8009340 <USBD_LL_SetupStage+0x72>
 800930a:	2b02      	cmp	r3, #2
 800930c:	d822      	bhi.n	8009354 <USBD_LL_SetupStage+0x86>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <USBD_LL_SetupStage+0x4a>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <USBD_LL_SetupStage+0x5e>
 8009316:	e01d      	b.n	8009354 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb63 	bl	80099ec <USBD_StdDevReq>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e020      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbcb 	bl	8009ad0 <USBD_StdItfReq>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	e016      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fc2d 	bl	8009ba8 <USBD_StdEPReq>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
      break;
 8009352:	e00c      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800935a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f004 fbd6 	bl	800db14 <USBD_LL_StallEP>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
      break;
 800936c:	bf00      	nop
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d16e      	bne.n	800946e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009396:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800939e:	2b03      	cmp	r3, #3
 80093a0:	f040 8098 	bne.w	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d913      	bls.n	80093d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bf28      	it	cs
 80093ca:	4613      	movcs	r3, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 f988 	bl	800a6e6 <USBD_CtlContinueRx>
 80093d6:	e07d      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d014      	beq.n	8009410 <USBD_LL_DataOutStage+0x98>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d81d      	bhi.n	8009426 <USBD_LL_DataOutStage+0xae>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <USBD_LL_DataOutStage+0x7c>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <USBD_LL_DataOutStage+0x82>
 80093f2:	e018      	b.n	8009426 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75bb      	strb	r3, [r7, #22]
            break;
 80093f8:	e018      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fa64 	bl	80098d2 <USBD_CoreFindIF>
 800940a:	4603      	mov	r3, r0
 800940c:	75bb      	strb	r3, [r7, #22]
            break;
 800940e:	e00d      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fa66 	bl	80098ec <USBD_CoreFindEP>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]
            break;
 8009424:	e002      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	75bb      	strb	r3, [r7, #22]
            break;
 800942a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800942c:	7dbb      	ldrb	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d119      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d113      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800943e:	7dba      	ldrb	r2, [r7, #22]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	@ 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800944e:	7dba      	ldrb	r2, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	@ 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f001 f94e 	bl	800a708 <USBD_CtlSendStatus>
 800946c:	e032      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fa37 	bl	80098ec <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2bff      	cmp	r3, #255	@ 0xff
 8009486:	d025      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d122      	bne.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d117      	bne.n	80094ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32ae      	adds	r2, #174	@ 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00f      	beq.n	80094ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094aa:	7dba      	ldrb	r2, [r7, #22]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	32ae      	adds	r2, #174	@ 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	7afa      	ldrb	r2, [r7, #11]
 80094c0:	4611      	mov	r1, r2
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	e000      	b.n	80094d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	460b      	mov	r3, r1
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d16f      	bne.n	80095d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3314      	adds	r3, #20
 80094f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d15a      	bne.n	80095b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d914      	bls.n	8009538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	461a      	mov	r2, r3
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 f8b0 	bl	800a68a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f004 fb99 	bl	800dc68 <USBD_LL_PrepareReceive>
 8009536:	e03f      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	429a      	cmp	r2, r3
 8009542:	d11c      	bne.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800954c:	429a      	cmp	r2, r3
 800954e:	d316      	bcc.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955a:	429a      	cmp	r2, r3
 800955c:	d20f      	bcs.n	800957e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f891 	bl	800a68a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f004 fb76 	bl	800dc68 <USBD_LL_PrepareReceive>
 800957c:	e01c      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d10f      	bne.n	80095aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095aa:	2180      	movs	r1, #128	@ 0x80
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f004 fab1 	bl	800db14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 f8bb 	bl	800a72e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03a      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fe42 	bl	800924c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80095d0:	e032      	b.n	8009638 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f985 	bl	80098ec <USBD_CoreFindEP>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2bff      	cmp	r3, #255	@ 0xff
 80095ea:	d025      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d122      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d11c      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	32ae      	adds	r2, #174	@ 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800960e:	7dfa      	ldrb	r2, [r7, #23]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009616:	7dfa      	ldrb	r2, [r7, #23]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	32ae      	adds	r2, #174	@ 0xae
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	7afa      	ldrb	r2, [r7, #11]
 8009624:	4611      	mov	r1, r2
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800962e:	7dbb      	ldrb	r3, [r7, #22]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	e000      	b.n	800963a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d014      	beq.n	80096a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6852      	ldr	r2, [r2, #4]
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096a8:	2340      	movs	r3, #64	@ 0x40
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f004 f9eb 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2240      	movs	r2, #64	@ 0x40
 80096c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096c4:	2340      	movs	r3, #64	@ 0x40
 80096c6:	2200      	movs	r2, #0
 80096c8:	2180      	movs	r1, #128	@ 0x80
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f004 f9dd 	bl	800da8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2240      	movs	r2, #64	@ 0x40
 80096da:	621a      	str	r2, [r3, #32]

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b04      	cmp	r3, #4
 8009718:	d006      	beq.n	8009728 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009720:	b2da      	uxtb	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2204      	movs	r2, #4
 800972c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b04      	cmp	r3, #4
 8009750:	d106      	bne.n	8009760 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009758:	b2da      	uxtb	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	370c      	adds	r7, #12
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b082      	sub	sp, #8
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b03      	cmp	r3, #3
 8009780:	d110      	bne.n	80097a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	32ae      	adds	r2, #174	@ 0xae
 80097c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e01c      	b.n	800980a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d115      	bne.n	8009808 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32ae      	adds	r2, #174	@ 0xae
 80097e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ea:	6a1b      	ldr	r3, [r3, #32]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00b      	beq.n	8009808 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	32ae      	adds	r2, #174	@ 0xae
 80097fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	78fa      	ldrb	r2, [r7, #3]
 8009802:	4611      	mov	r1, r2
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b082      	sub	sp, #8
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	32ae      	adds	r2, #174	@ 0xae
 8009828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	e01c      	b.n	800986e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d115      	bne.n	800986c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	32ae      	adds	r2, #174	@ 0xae
 800984a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	32ae      	adds	r2, #174	@ 0xae
 800985e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	4611      	mov	r1, r2
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00e      	beq.n	80098c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	6852      	ldr	r2, [r2, #4]
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	4611      	mov	r1, r2
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	4798      	blx	r3
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098c4:	2303      	movs	r3, #3
 80098c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3710      	adds	r7, #16
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800991a:	2300      	movs	r3, #0
 800991c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	b29b      	uxth	r3, r3
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	7812      	ldrb	r2, [r2, #0]
 8009928:	4293      	cmp	r3, r2
 800992a:	d91f      	bls.n	800996c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009932:	e013      	b.n	800995c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009934:	f107 030a 	add.w	r3, r7, #10
 8009938:	4619      	mov	r1, r3
 800993a:	6978      	ldr	r0, [r7, #20]
 800993c:	f000 f81b 	bl	8009976 <USBD_GetNextDesc>
 8009940:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	2b05      	cmp	r3, #5
 8009948:	d108      	bne.n	800995c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	789b      	ldrb	r3, [r3, #2]
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	429a      	cmp	r2, r3
 8009956:	d008      	beq.n	800996a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	885b      	ldrh	r3, [r3, #2]
 8009960:	b29a      	uxth	r2, r3
 8009962:	897b      	ldrh	r3, [r7, #10]
 8009964:	429a      	cmp	r2, r3
 8009966:	d8e5      	bhi.n	8009934 <USBD_GetEpDesc+0x2e>
 8009968:	e000      	b.n	800996c <USBD_GetEpDesc+0x66>
          break;
 800996a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800996c:	693b      	ldr	r3, [r7, #16]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	7812      	ldrb	r2, [r2, #0]
 800998c:	4413      	add	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099a0:	68fb      	ldr	r3, [r7, #12]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099ae:	b480      	push	{r7}
 80099b0:	b087      	sub	sp, #28
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3301      	adds	r3, #1
 80099c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099cc:	8a3b      	ldrh	r3, [r7, #16]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	b21a      	sxth	r2, r3
 80099d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	b21b      	sxth	r3, r3
 80099da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099dc:	89fb      	ldrh	r3, [r7, #14]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
	...

080099ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a02:	2b40      	cmp	r3, #64	@ 0x40
 8009a04:	d005      	beq.n	8009a12 <USBD_StdDevReq+0x26>
 8009a06:	2b40      	cmp	r3, #64	@ 0x40
 8009a08:	d857      	bhi.n	8009aba <USBD_StdDevReq+0xce>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00f      	beq.n	8009a2e <USBD_StdDevReq+0x42>
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d153      	bne.n	8009aba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	32ae      	adds	r2, #174	@ 0xae
 8009a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2c:	e04a      	b.n	8009ac4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b09      	cmp	r3, #9
 8009a34:	d83b      	bhi.n	8009aae <USBD_StdDevReq+0xc2>
 8009a36:	a201      	add	r2, pc, #4	@ (adr r2, 8009a3c <USBD_StdDevReq+0x50>)
 8009a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3c:	08009a91 	.word	0x08009a91
 8009a40:	08009aa5 	.word	0x08009aa5
 8009a44:	08009aaf 	.word	0x08009aaf
 8009a48:	08009a9b 	.word	0x08009a9b
 8009a4c:	08009aaf 	.word	0x08009aaf
 8009a50:	08009a6f 	.word	0x08009a6f
 8009a54:	08009a65 	.word	0x08009a65
 8009a58:	08009aaf 	.word	0x08009aaf
 8009a5c:	08009a87 	.word	0x08009a87
 8009a60:	08009a79 	.word	0x08009a79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa3c 	bl	8009ee4 <USBD_GetDescriptor>
          break;
 8009a6c:	e024      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fba1 	bl	800a1b8 <USBD_SetAddress>
          break;
 8009a76:	e01f      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fbe0 	bl	800a240 <USBD_SetConfig>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]
          break;
 8009a84:	e018      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fc83 	bl	800a394 <USBD_GetConfig>
          break;
 8009a8e:	e013      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fcb4 	bl	800a400 <USBD_GetStatus>
          break;
 8009a98:	e00e      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fce3 	bl	800a468 <USBD_SetFeature>
          break;
 8009aa2:	e009      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fd07 	bl	800a4ba <USBD_ClrFeature>
          break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fd5e 	bl	800a572 <USBD_CtlError>
          break;
 8009ab6:	bf00      	nop
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fd58 	bl	800a572 <USBD_CtlError>
      break;
 8009ac2:	bf00      	nop
  }

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop

08009ad0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ae6:	2b40      	cmp	r3, #64	@ 0x40
 8009ae8:	d005      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	d852      	bhi.n	8009b94 <USBD_StdItfReq+0xc4>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d14e      	bne.n	8009b94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d840      	bhi.n	8009b86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	889b      	ldrh	r3, [r3, #4]
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d836      	bhi.n	8009b7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	889b      	ldrh	r3, [r3, #4]
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7ff fedb 	bl	80098d2 <USBD_CoreFindIF>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2bff      	cmp	r3, #255	@ 0xff
 8009b24:	d01d      	beq.n	8009b62 <USBD_StdItfReq+0x92>
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11a      	bne.n	8009b62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b2c:	7bba      	ldrb	r2, [r7, #14]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	32ae      	adds	r2, #174	@ 0xae
 8009b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00f      	beq.n	8009b5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b44:	7bba      	ldrb	r2, [r7, #14]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32ae      	adds	r2, #174	@ 0xae
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	4798      	blx	r3
 8009b56:	4603      	mov	r3, r0
 8009b58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b5a:	e004      	b.n	8009b66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b60:	e001      	b.n	8009b66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b62:	2303      	movs	r3, #3
 8009b64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	88db      	ldrh	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d110      	bne.n	8009b90 <USBD_StdItfReq+0xc0>
 8009b6e:	7bfb      	ldrb	r3, [r7, #15]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10d      	bne.n	8009b90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 fdc7 	bl	800a708 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b7a:	e009      	b.n	8009b90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b7c:	6839      	ldr	r1, [r7, #0]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fcf7 	bl	800a572 <USBD_CtlError>
          break;
 8009b84:	e004      	b.n	8009b90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fcf2 	bl	800a572 <USBD_CtlError>
          break;
 8009b8e:	e000      	b.n	8009b92 <USBD_StdItfReq+0xc2>
          break;
 8009b90:	bf00      	nop
      }
      break;
 8009b92:	e004      	b.n	8009b9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fceb 	bl	800a572 <USBD_CtlError>
      break;
 8009b9c:	bf00      	nop
  }

  return ret;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	889b      	ldrh	r3, [r3, #4]
 8009bba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bc4:	2b40      	cmp	r3, #64	@ 0x40
 8009bc6:	d007      	beq.n	8009bd8 <USBD_StdEPReq+0x30>
 8009bc8:	2b40      	cmp	r3, #64	@ 0x40
 8009bca:	f200 817f 	bhi.w	8009ecc <USBD_StdEPReq+0x324>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d02a      	beq.n	8009c28 <USBD_StdEPReq+0x80>
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	f040 817a 	bne.w	8009ecc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bd8:	7bbb      	ldrb	r3, [r7, #14]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fe85 	bl	80098ec <USBD_CoreFindEP>
 8009be2:	4603      	mov	r3, r0
 8009be4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2bff      	cmp	r3, #255	@ 0xff
 8009bea:	f000 8174 	beq.w	8009ed6 <USBD_StdEPReq+0x32e>
 8009bee:	7b7b      	ldrb	r3, [r7, #13]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f040 8170 	bne.w	8009ed6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bfe:	7b7a      	ldrb	r2, [r7, #13]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	32ae      	adds	r2, #174	@ 0xae
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f000 8163 	beq.w	8009ed6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c10:	7b7a      	ldrb	r2, [r7, #13]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	32ae      	adds	r2, #174	@ 0xae
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	6839      	ldr	r1, [r7, #0]
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c26:	e156      	b.n	8009ed6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d008      	beq.n	8009c42 <USBD_StdEPReq+0x9a>
 8009c30:	2b03      	cmp	r3, #3
 8009c32:	f300 8145 	bgt.w	8009ec0 <USBD_StdEPReq+0x318>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 809b 	beq.w	8009d72 <USBD_StdEPReq+0x1ca>
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d03c      	beq.n	8009cba <USBD_StdEPReq+0x112>
 8009c40:	e13e      	b.n	8009ec0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d002      	beq.n	8009c54 <USBD_StdEPReq+0xac>
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d016      	beq.n	8009c80 <USBD_StdEPReq+0xd8>
 8009c52:	e02c      	b.n	8009cae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <USBD_StdEPReq+0xce>
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b80      	cmp	r3, #128	@ 0x80
 8009c5e:	d00a      	beq.n	8009c76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f003 ff55 	bl	800db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c6a:	2180      	movs	r1, #128	@ 0x80
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f003 ff51 	bl	800db14 <USBD_LL_StallEP>
 8009c72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c74:	e020      	b.n	8009cb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c76:	6839      	ldr	r1, [r7, #0]
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fc7a 	bl	800a572 <USBD_CtlError>
              break;
 8009c7e:	e01b      	b.n	8009cb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	885b      	ldrh	r3, [r3, #2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10e      	bne.n	8009ca6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00b      	beq.n	8009ca6 <USBD_StdEPReq+0xfe>
 8009c8e:	7bbb      	ldrb	r3, [r7, #14]
 8009c90:	2b80      	cmp	r3, #128	@ 0x80
 8009c92:	d008      	beq.n	8009ca6 <USBD_StdEPReq+0xfe>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	88db      	ldrh	r3, [r3, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f003 ff37 	bl	800db14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 fd2e 	bl	800a708 <USBD_CtlSendStatus>

              break;
 8009cac:	e004      	b.n	8009cb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc5e 	bl	800a572 <USBD_CtlError>
              break;
 8009cb6:	bf00      	nop
          }
          break;
 8009cb8:	e107      	b.n	8009eca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d002      	beq.n	8009ccc <USBD_StdEPReq+0x124>
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d016      	beq.n	8009cf8 <USBD_StdEPReq+0x150>
 8009cca:	e04b      	b.n	8009d64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00d      	beq.n	8009cee <USBD_StdEPReq+0x146>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	@ 0x80
 8009cd6:	d00a      	beq.n	8009cee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f003 ff19 	bl	800db14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ce2:	2180      	movs	r1, #128	@ 0x80
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 ff15 	bl	800db14 <USBD_LL_StallEP>
 8009cea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cec:	e040      	b.n	8009d70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc3e 	bl	800a572 <USBD_CtlError>
              break;
 8009cf6:	e03b      	b.n	8009d70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	885b      	ldrh	r3, [r3, #2]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d136      	bne.n	8009d6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f003 ff1f 	bl	800db52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fcf7 	bl	800a708 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fde4 	bl	80098ec <USBD_CoreFindEP>
 8009d24:	4603      	mov	r3, r0
 8009d26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d28:	7b7b      	ldrb	r3, [r7, #13]
 8009d2a:	2bff      	cmp	r3, #255	@ 0xff
 8009d2c:	d01f      	beq.n	8009d6e <USBD_StdEPReq+0x1c6>
 8009d2e:	7b7b      	ldrb	r3, [r7, #13]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d11c      	bne.n	8009d6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d3c:	7b7a      	ldrb	r2, [r7, #13]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	32ae      	adds	r2, #174	@ 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d010      	beq.n	8009d6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d4c:	7b7a      	ldrb	r2, [r7, #13]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	32ae      	adds	r2, #174	@ 0xae
 8009d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d62:	e004      	b.n	8009d6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 fc03 	bl	800a572 <USBD_CtlError>
              break;
 8009d6c:	e000      	b.n	8009d70 <USBD_StdEPReq+0x1c8>
              break;
 8009d6e:	bf00      	nop
          }
          break;
 8009d70:	e0ab      	b.n	8009eca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d002      	beq.n	8009d84 <USBD_StdEPReq+0x1dc>
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d032      	beq.n	8009de8 <USBD_StdEPReq+0x240>
 8009d82:	e097      	b.n	8009eb4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d007      	beq.n	8009d9a <USBD_StdEPReq+0x1f2>
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b80      	cmp	r3, #128	@ 0x80
 8009d8e:	d004      	beq.n	8009d9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fbed 	bl	800a572 <USBD_CtlError>
                break;
 8009d98:	e091      	b.n	8009ebe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	da0b      	bge.n	8009dba <USBD_StdEPReq+0x212>
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	3310      	adds	r3, #16
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	3304      	adds	r3, #4
 8009db8:	e00b      	b.n	8009dd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4413      	add	r3, r2
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2202      	movs	r2, #2
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fc37 	bl	800a654 <USBD_CtlSendData>
              break;
 8009de6:	e06a      	b.n	8009ebe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da11      	bge.n	8009e14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	f003 020f 	and.w	r2, r3, #15
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	3324      	adds	r3, #36	@ 0x24
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d117      	bne.n	8009e3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e0a:	6839      	ldr	r1, [r7, #0]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fbb0 	bl	800a572 <USBD_CtlError>
                  break;
 8009e12:	e054      	b.n	8009ebe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	f003 020f 	and.w	r2, r3, #15
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d104      	bne.n	8009e3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fb9d 	bl	800a572 <USBD_CtlError>
                  break;
 8009e38:	e041      	b.n	8009ebe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	da0b      	bge.n	8009e5a <USBD_StdEPReq+0x2b2>
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e48:	4613      	mov	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	3310      	adds	r3, #16
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	4413      	add	r3, r2
 8009e56:	3304      	adds	r3, #4
 8009e58:	e00b      	b.n	8009e72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	4413      	add	r3, r2
 8009e70:	3304      	adds	r3, #4
 8009e72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e74:	7bbb      	ldrb	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <USBD_StdEPReq+0x2d8>
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	2b80      	cmp	r3, #128	@ 0x80
 8009e7e:	d103      	bne.n	8009e88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2200      	movs	r2, #0
 8009e84:	601a      	str	r2, [r3, #0]
 8009e86:	e00e      	b.n	8009ea6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e88:	7bbb      	ldrb	r3, [r7, #14]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f003 fe7f 	bl	800db90 <USBD_LL_IsStallEP>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d003      	beq.n	8009ea0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	e002      	b.n	8009ea6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f000 fbd1 	bl	800a654 <USBD_CtlSendData>
              break;
 8009eb2:	e004      	b.n	8009ebe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eb4:	6839      	ldr	r1, [r7, #0]
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fb5b 	bl	800a572 <USBD_CtlError>
              break;
 8009ebc:	bf00      	nop
          }
          break;
 8009ebe:	e004      	b.n	8009eca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb55 	bl	800a572 <USBD_CtlError>
          break;
 8009ec8:	bf00      	nop
      }
      break;
 8009eca:	e005      	b.n	8009ed8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fb4f 	bl	800a572 <USBD_CtlError>
      break;
 8009ed4:	e000      	b.n	8009ed8 <USBD_StdEPReq+0x330>
      break;
 8009ed6:	bf00      	nop
  }

  return ret;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
	...

08009ee4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3b01      	subs	r3, #1
 8009f04:	2b06      	cmp	r3, #6
 8009f06:	f200 8128 	bhi.w	800a15a <USBD_GetDescriptor+0x276>
 8009f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f10 <USBD_GetDescriptor+0x2c>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f2d 	.word	0x08009f2d
 8009f14:	08009f45 	.word	0x08009f45
 8009f18:	08009f85 	.word	0x08009f85
 8009f1c:	0800a15b 	.word	0x0800a15b
 8009f20:	0800a15b 	.word	0x0800a15b
 8009f24:	0800a0fb 	.word	0x0800a0fb
 8009f28:	0800a127 	.word	0x0800a127
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	7c12      	ldrb	r2, [r2, #16]
 8009f38:	f107 0108 	add.w	r1, r7, #8
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4798      	blx	r3
 8009f40:	60f8      	str	r0, [r7, #12]
      break;
 8009f42:	e112      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	7c1b      	ldrb	r3, [r3, #16]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	f107 0208 	add.w	r2, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	2202      	movs	r2, #2
 8009f64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f66:	e100      	b.n	800a16a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f70:	f107 0208 	add.w	r2, r7, #8
 8009f74:	4610      	mov	r0, r2
 8009f76:	4798      	blx	r3
 8009f78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	2202      	movs	r2, #2
 8009f80:	701a      	strb	r2, [r3, #0]
      break;
 8009f82:	e0f2      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	885b      	ldrh	r3, [r3, #2]
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b05      	cmp	r3, #5
 8009f8c:	f200 80ac 	bhi.w	800a0e8 <USBD_GetDescriptor+0x204>
 8009f90:	a201      	add	r2, pc, #4	@ (adr r2, 8009f98 <USBD_GetDescriptor+0xb4>)
 8009f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f96:	bf00      	nop
 8009f98:	08009fb1 	.word	0x08009fb1
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	0800a019 	.word	0x0800a019
 8009fa4:	0800a04d 	.word	0x0800a04d
 8009fa8:	0800a081 	.word	0x0800a081
 8009fac:	0800a0b5 	.word	0x0800a0b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00b      	beq.n	8009fd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	7c12      	ldrb	r2, [r2, #16]
 8009fc8:	f107 0108 	add.w	r1, r7, #8
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fd2:	e091      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 facb 	bl	800a572 <USBD_CtlError>
            err++;
 8009fdc:	7afb      	ldrb	r3, [r7, #11]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fe2:	e089      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00b      	beq.n	800a008 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7c12      	ldrb	r2, [r2, #16]
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	4610      	mov	r0, r2
 800a002:	4798      	blx	r3
 800a004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a006:	e077      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a008:	6839      	ldr	r1, [r7, #0]
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fab1 	bl	800a572 <USBD_CtlError>
            err++;
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	3301      	adds	r3, #1
 800a014:	72fb      	strb	r3, [r7, #11]
          break;
 800a016:	e06f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d00b      	beq.n	800a03c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	7c12      	ldrb	r2, [r2, #16]
 800a030:	f107 0108 	add.w	r1, r7, #8
 800a034:	4610      	mov	r0, r2
 800a036:	4798      	blx	r3
 800a038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a03a:	e05d      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa97 	bl	800a572 <USBD_CtlError>
            err++;
 800a044:	7afb      	ldrb	r3, [r7, #11]
 800a046:	3301      	adds	r3, #1
 800a048:	72fb      	strb	r3, [r7, #11]
          break;
 800a04a:	e055      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00b      	beq.n	800a070 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	7c12      	ldrb	r2, [r2, #16]
 800a064:	f107 0108 	add.w	r1, r7, #8
 800a068:	4610      	mov	r0, r2
 800a06a:	4798      	blx	r3
 800a06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a06e:	e043      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa7d 	bl	800a572 <USBD_CtlError>
            err++;
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	3301      	adds	r3, #1
 800a07c:	72fb      	strb	r3, [r7, #11]
          break;
 800a07e:	e03b      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d00b      	beq.n	800a0a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	7c12      	ldrb	r2, [r2, #16]
 800a098:	f107 0108 	add.w	r1, r7, #8
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0a2:	e029      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa63 	bl	800a572 <USBD_CtlError>
            err++;
 800a0ac:	7afb      	ldrb	r3, [r7, #11]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0b2:	e021      	b.n	800a0f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7c12      	ldrb	r2, [r2, #16]
 800a0cc:	f107 0108 	add.w	r1, r7, #8
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0d6:	e00f      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 fa49 	bl	800a572 <USBD_CtlError>
            err++;
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0e6:	e007      	b.n	800a0f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa41 	bl	800a572 <USBD_CtlError>
          err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0f6:	bf00      	nop
      }
      break;
 800a0f8:	e037      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7c1b      	ldrb	r3, [r3, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a10a:	f107 0208 	add.w	r2, r7, #8
 800a10e:	4610      	mov	r0, r2
 800a110:	4798      	blx	r3
 800a112:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a114:	e029      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fa2a 	bl	800a572 <USBD_CtlError>
        err++;
 800a11e:	7afb      	ldrb	r3, [r7, #11]
 800a120:	3301      	adds	r3, #1
 800a122:	72fb      	strb	r3, [r7, #11]
      break;
 800a124:	e021      	b.n	800a16a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	7c1b      	ldrb	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10d      	bne.n	800a14a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a136:	f107 0208 	add.w	r2, r7, #8
 800a13a:	4610      	mov	r0, r2
 800a13c:	4798      	blx	r3
 800a13e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	3301      	adds	r3, #1
 800a144:	2207      	movs	r2, #7
 800a146:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a148:	e00f      	b.n	800a16a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fa10 	bl	800a572 <USBD_CtlError>
        err++;
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	3301      	adds	r3, #1
 800a156:	72fb      	strb	r3, [r7, #11]
      break;
 800a158:	e007      	b.n	800a16a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa08 	bl	800a572 <USBD_CtlError>
      err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	bf00      	nop
  }

  if (err != 0U)
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d11e      	bne.n	800a1ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	88db      	ldrh	r3, [r3, #6]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d016      	beq.n	800a1a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a178:	893b      	ldrh	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00e      	beq.n	800a19c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	88da      	ldrh	r2, [r3, #6]
 800a182:	893b      	ldrh	r3, [r7, #8]
 800a184:	4293      	cmp	r3, r2
 800a186:	bf28      	it	cs
 800a188:	4613      	movcs	r3, r2
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	461a      	mov	r2, r3
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 fa5d 	bl	800a654 <USBD_CtlSendData>
 800a19a:	e009      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f9e7 	bl	800a572 <USBD_CtlError>
 800a1a4:	e004      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 faae 	bl	800a708 <USBD_CtlSendStatus>
 800a1ac:	e000      	b.n	800a1b0 <USBD_GetDescriptor+0x2cc>
    return;
 800a1ae:	bf00      	nop
  }
}
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop

0800a1b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	889b      	ldrh	r3, [r3, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d131      	bne.n	800a22e <USBD_SetAddress+0x76>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88db      	ldrh	r3, [r3, #6]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d12d      	bne.n	800a22e <USBD_SetAddress+0x76>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1d8:	d829      	bhi.n	800a22e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	885b      	ldrh	r3, [r3, #2]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	d104      	bne.n	800a1fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f9bc 	bl	800a572 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1fa:	e01d      	b.n	800a238 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7bfa      	ldrb	r2, [r7, #15]
 800a200:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f003 fced 	bl	800dbe8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa7a 	bl	800a708 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a222:	e009      	b.n	800a238 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22c:	e004      	b.n	800a238 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a22e:	6839      	ldr	r1, [r7, #0]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f99e 	bl	800a572 <USBD_CtlError>
  }
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	885b      	ldrh	r3, [r3, #2]
 800a252:	b2da      	uxtb	r2, r3
 800a254:	4b4e      	ldr	r3, [pc, #312]	@ (800a390 <USBD_SetConfig+0x150>)
 800a256:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a258:	4b4d      	ldr	r3, [pc, #308]	@ (800a390 <USBD_SetConfig+0x150>)
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d905      	bls.n	800a26c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 f985 	bl	800a572 <USBD_CtlError>
    return USBD_FAIL;
 800a268:	2303      	movs	r3, #3
 800a26a:	e08c      	b.n	800a386 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d002      	beq.n	800a27e <USBD_SetConfig+0x3e>
 800a278:	2b03      	cmp	r3, #3
 800a27a:	d029      	beq.n	800a2d0 <USBD_SetConfig+0x90>
 800a27c:	e075      	b.n	800a36a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a27e:	4b44      	ldr	r3, [pc, #272]	@ (800a390 <USBD_SetConfig+0x150>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d020      	beq.n	800a2c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a286:	4b42      	ldr	r3, [pc, #264]	@ (800a390 <USBD_SetConfig+0x150>)
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	461a      	mov	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a290:	4b3f      	ldr	r3, [pc, #252]	@ (800a390 <USBD_SetConfig+0x150>)
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7fe ffe3 	bl	8009262 <USBD_SetClassConfig>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d008      	beq.n	800a2b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f962 	bl	800a572 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2b6:	e065      	b.n	800a384 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa25 	bl	800a708 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2c6:	e05d      	b.n	800a384 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa1d 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a2ce:	e059      	b.n	800a384 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2d0:	4b2f      	ldr	r3, [pc, #188]	@ (800a390 <USBD_SetConfig+0x150>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d112      	bne.n	800a2fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2202      	movs	r2, #2
 800a2dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a2e0:	4b2b      	ldr	r3, [pc, #172]	@ (800a390 <USBD_SetConfig+0x150>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ea:	4b29      	ldr	r3, [pc, #164]	@ (800a390 <USBD_SetConfig+0x150>)
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7fe ffd2 	bl	800929a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 fa06 	bl	800a708 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2fc:	e042      	b.n	800a384 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2fe:	4b24      	ldr	r3, [pc, #144]	@ (800a390 <USBD_SetConfig+0x150>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d02a      	beq.n	800a362 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	b2db      	uxtb	r3, r3
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7fe ffc0 	bl	800929a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a31a:	4b1d      	ldr	r3, [pc, #116]	@ (800a390 <USBD_SetConfig+0x150>)
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a324:	4b1a      	ldr	r3, [pc, #104]	@ (800a390 <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	4619      	mov	r1, r3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7fe ff99 	bl	8009262 <USBD_SetClassConfig>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00f      	beq.n	800a35a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f918 	bl	800a572 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f7fe ffa5 	bl	800929a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a358:	e014      	b.n	800a384 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9d4 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a360:	e010      	b.n	800a384 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f9d0 	bl	800a708 <USBD_CtlSendStatus>
      break;
 800a368:	e00c      	b.n	800a384 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f900 	bl	800a572 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a372:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <USBD_SetConfig+0x150>)
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	4619      	mov	r1, r3
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7fe ff8e 	bl	800929a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a37e:	2303      	movs	r3, #3
 800a380:	73fb      	strb	r3, [r7, #15]
      break;
 800a382:	bf00      	nop
  }

  return ret;
 800a384:	7bfb      	ldrb	r3, [r7, #15]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	2000035c 	.word	0x2000035c

0800a394 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	88db      	ldrh	r3, [r3, #6]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d004      	beq.n	800a3b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3a6:	6839      	ldr	r1, [r7, #0]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f8e2 	bl	800a572 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ae:	e023      	b.n	800a3f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	dc02      	bgt.n	800a3c2 <USBD_GetConfig+0x2e>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dc03      	bgt.n	800a3c8 <USBD_GetConfig+0x34>
 800a3c0:	e015      	b.n	800a3ee <USBD_GetConfig+0x5a>
 800a3c2:	2b03      	cmp	r3, #3
 800a3c4:	d00b      	beq.n	800a3de <USBD_GetConfig+0x4a>
 800a3c6:	e012      	b.n	800a3ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3308      	adds	r3, #8
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f93c 	bl	800a654 <USBD_CtlSendData>
        break;
 800a3dc:	e00c      	b.n	800a3f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 f934 	bl	800a654 <USBD_CtlSendData>
        break;
 800a3ec:	e004      	b.n	800a3f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3ee:	6839      	ldr	r1, [r7, #0]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f8be 	bl	800a572 <USBD_CtlError>
        break;
 800a3f6:	bf00      	nop
}
 800a3f8:	bf00      	nop
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a410:	b2db      	uxtb	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	2b02      	cmp	r3, #2
 800a416:	d81e      	bhi.n	800a456 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	88db      	ldrh	r3, [r3, #6]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d004      	beq.n	800a42a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8a5 	bl	800a572 <USBD_CtlError>
        break;
 800a428:	e01a      	b.n	800a460 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f043 0202 	orr.w	r2, r3, #2
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	330c      	adds	r3, #12
 800a44a:	2202      	movs	r2, #2
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f900 	bl	800a654 <USBD_CtlSendData>
      break;
 800a454:	e004      	b.n	800a460 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a456:	6839      	ldr	r1, [r7, #0]
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f000 f88a 	bl	800a572 <USBD_CtlError>
      break;
 800a45e:	bf00      	nop
  }
}
 800a460:	bf00      	nop
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	885b      	ldrh	r3, [r3, #2]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d107      	bne.n	800a48a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f940 	bl	800a708 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a488:	e013      	b.n	800a4b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	885b      	ldrh	r3, [r3, #2]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d10b      	bne.n	800a4aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	889b      	ldrh	r3, [r3, #4]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	b29b      	uxth	r3, r3
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f930 	bl	800a708 <USBD_CtlSendStatus>
}
 800a4a8:	e003      	b.n	800a4b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f860 	bl	800a572 <USBD_CtlError>
}
 800a4b2:	bf00      	nop
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d80b      	bhi.n	800a4ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d10c      	bne.n	800a4f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f910 	bl	800a708 <USBD_CtlSendStatus>
      }
      break;
 800a4e8:	e004      	b.n	800a4f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f840 	bl	800a572 <USBD_CtlError>
      break;
 800a4f2:	e000      	b.n	800a4f6 <USBD_ClrFeature+0x3c>
      break;
 800a4f4:	bf00      	nop
  }
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	3301      	adds	r3, #1
 800a518:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fa40 	bl	80099ae <SWAPBYTE>
 800a52e:	4603      	mov	r3, r0
 800a530:	461a      	mov	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	3301      	adds	r3, #1
 800a540:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff fa33 	bl	80099ae <SWAPBYTE>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
 800a554:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f7ff fa26 	bl	80099ae <SWAPBYTE>
 800a562:	4603      	mov	r3, r0
 800a564:	461a      	mov	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	80da      	strh	r2, [r3, #6]
}
 800a56a:	bf00      	nop
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a57c:	2180      	movs	r1, #128	@ 0x80
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f003 fac8 	bl	800db14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a584:	2100      	movs	r1, #0
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f003 fac4 	bl	800db14 <USBD_LL_StallEP>
}
 800a58c:	bf00      	nop
 800a58e:	3708      	adds	r7, #8
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d036      	beq.n	800a618 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f000 f836 	bl	800a620 <USBD_GetLen>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	4413      	add	r3, r2
 800a5da:	2203      	movs	r2, #3
 800a5dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5e4:	e013      	b.n	800a60e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	7812      	ldrb	r2, [r2, #0]
 800a5f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5fe:	7dfb      	ldrb	r3, [r7, #23]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	4413      	add	r3, r2
 800a604:	2200      	movs	r2, #0
 800a606:	701a      	strb	r2, [r3, #0]
    idx++;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	3301      	adds	r3, #1
 800a60c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e7      	bne.n	800a5e6 <USBD_GetString+0x52>
 800a616:	e000      	b.n	800a61a <USBD_GetString+0x86>
    return;
 800a618:	bf00      	nop
  }
}
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a630:	e005      	b.n	800a63e <USBD_GetLen+0x1e>
  {
    len++;
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	3301      	adds	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1f5      	bne.n	800a632 <USBD_GetLen+0x12>
  }

  return len;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3714      	adds	r7, #20
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2202      	movs	r2, #2
 800a664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	2100      	movs	r1, #0
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f003 fad3 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	2100      	movs	r1, #0
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f003 fac2 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f003 fac6 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68ba      	ldr	r2, [r7, #8]
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f003 fab5 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6fe:	2300      	movs	r3, #0
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2204      	movs	r2, #4
 800a714:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a718:	2300      	movs	r3, #0
 800a71a:	2200      	movs	r2, #0
 800a71c:	2100      	movs	r1, #0
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f003 fa81 	bl	800dc26 <USBD_LL_Transmit>

  return USBD_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2205      	movs	r2, #5
 800a73a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a73e:	2300      	movs	r3, #0
 800a740:	2200      	movs	r2, #0
 800a742:	2100      	movs	r1, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f003 fa8f 	bl	800dc68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3708      	adds	r7, #8
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <__NVIC_SetPriority>:
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a764:	2b00      	cmp	r3, #0
 800a766:	db0a      	blt.n	800a77e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	490c      	ldr	r1, [pc, #48]	@ (800a7a0 <__NVIC_SetPriority+0x4c>)
 800a76e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a772:	0112      	lsls	r2, r2, #4
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	440b      	add	r3, r1
 800a778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a77c:	e00a      	b.n	800a794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	b2da      	uxtb	r2, r3
 800a782:	4908      	ldr	r1, [pc, #32]	@ (800a7a4 <__NVIC_SetPriority+0x50>)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	3b04      	subs	r3, #4
 800a78c:	0112      	lsls	r2, r2, #4
 800a78e:	b2d2      	uxtb	r2, r2
 800a790:	440b      	add	r3, r1
 800a792:	761a      	strb	r2, [r3, #24]
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	e000e100 	.word	0xe000e100
 800a7a4:	e000ed00 	.word	0xe000ed00

0800a7a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7ac:	4b05      	ldr	r3, [pc, #20]	@ (800a7c4 <SysTick_Handler+0x1c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7b0:	f001 fd46 	bl	800c240 <xTaskGetSchedulerState>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d001      	beq.n	800a7be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7ba:	f002 fb3d 	bl	800ce38 <xPortSysTickHandler>
  }
}
 800a7be:	bf00      	nop
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	e000e010 	.word	0xe000e010

0800a7c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	f06f 0004 	mvn.w	r0, #4
 800a7d2:	f7ff ffbf 	bl	800a754 <__NVIC_SetPriority>
#endif
}
 800a7d6:	bf00      	nop
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7e2:	f3ef 8305 	mrs	r3, IPSR
 800a7e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a7e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a7ee:	f06f 0305 	mvn.w	r3, #5
 800a7f2:	607b      	str	r3, [r7, #4]
 800a7f4:	e00c      	b.n	800a810 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a820 <osKernelInitialize+0x44>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d105      	bne.n	800a80a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7fe:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <osKernelInitialize+0x44>)
 800a800:	2201      	movs	r2, #1
 800a802:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a804:	2300      	movs	r3, #0
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	e002      	b.n	800a810 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a80a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a80e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a810:	687b      	ldr	r3, [r7, #4]
}
 800a812:	4618      	mov	r0, r3
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	20000360 	.word	0x20000360

0800a824 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a82a:	f3ef 8305 	mrs	r3, IPSR
 800a82e:	603b      	str	r3, [r7, #0]
  return(result);
 800a830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a836:	f06f 0305 	mvn.w	r3, #5
 800a83a:	607b      	str	r3, [r7, #4]
 800a83c:	e010      	b.n	800a860 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a83e:	4b0b      	ldr	r3, [pc, #44]	@ (800a86c <osKernelStart+0x48>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d109      	bne.n	800a85a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a846:	f7ff ffbf 	bl	800a7c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a84a:	4b08      	ldr	r3, [pc, #32]	@ (800a86c <osKernelStart+0x48>)
 800a84c:	2202      	movs	r2, #2
 800a84e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a850:	f001 f892 	bl	800b978 <vTaskStartScheduler>
      stat = osOK;
 800a854:	2300      	movs	r3, #0
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	e002      	b.n	800a860 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a85e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a860:	687b      	ldr	r3, [r7, #4]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	20000360 	.word	0x20000360

0800a870 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a870:	b580      	push	{r7, lr}
 800a872:	b08e      	sub	sp, #56	@ 0x38
 800a874:	af04      	add	r7, sp, #16
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a880:	f3ef 8305 	mrs	r3, IPSR
 800a884:	617b      	str	r3, [r7, #20]
  return(result);
 800a886:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d17e      	bne.n	800a98a <osThreadNew+0x11a>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d07b      	beq.n	800a98a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a892:	2380      	movs	r3, #128	@ 0x80
 800a894:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a896:	2318      	movs	r3, #24
 800a898:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a89e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a8a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d045      	beq.n	800a936 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <osThreadNew+0x48>
        name = attr->name;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <osThreadNew+0x6e>
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	2b38      	cmp	r3, #56	@ 0x38
 800a8d0:	d805      	bhi.n	800a8de <osThreadNew+0x6e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <osThreadNew+0x72>
        return (NULL);
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e054      	b.n	800a98c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	089b      	lsrs	r3, r3, #2
 800a8f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <osThreadNew+0xa8>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	2ba7      	cmp	r3, #167	@ 0xa7
 800a900:	d90a      	bls.n	800a918 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a906:	2b00      	cmp	r3, #0
 800a908:	d006      	beq.n	800a918 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <osThreadNew+0xa8>
        mem = 1;
 800a912:	2301      	movs	r3, #1
 800a914:	61bb      	str	r3, [r7, #24]
 800a916:	e010      	b.n	800a93a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10c      	bne.n	800a93a <osThreadNew+0xca>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d108      	bne.n	800a93a <osThreadNew+0xca>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d104      	bne.n	800a93a <osThreadNew+0xca>
          mem = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	61bb      	str	r3, [r7, #24]
 800a934:	e001      	b.n	800a93a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d110      	bne.n	800a962 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a948:	9202      	str	r2, [sp, #8]
 800a94a:	9301      	str	r3, [sp, #4]
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	6a3a      	ldr	r2, [r7, #32]
 800a954:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f000 fe1a 	bl	800b590 <xTaskCreateStatic>
 800a95c:	4603      	mov	r3, r0
 800a95e:	613b      	str	r3, [r7, #16]
 800a960:	e013      	b.n	800a98a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d110      	bne.n	800a98a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	f107 0310 	add.w	r3, r7, #16
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f000 fe68 	bl	800b650 <xTaskCreate>
 800a980:	4603      	mov	r3, r0
 800a982:	2b01      	cmp	r3, #1
 800a984:	d001      	beq.n	800a98a <osThreadNew+0x11a>
            hTask = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a98a:	693b      	ldr	r3, [r7, #16]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3728      	adds	r7, #40	@ 0x28
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a99c:	f3ef 8305 	mrs	r3, IPSR
 800a9a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <osDelay+0x1c>
    stat = osErrorISR;
 800a9a8:	f06f 0305 	mvn.w	r3, #5
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e007      	b.n	800a9c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d002      	beq.n	800a9c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 ffa6 	bl	800b90c <vTaskDelay>
    }
  }

  return (stat);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4a07      	ldr	r2, [pc, #28]	@ (800a9f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	4a06      	ldr	r2, [pc, #24]	@ (800a9fc <vApplicationGetIdleTaskMemory+0x30>)
 800a9e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2280      	movs	r2, #128	@ 0x80
 800a9e8:	601a      	str	r2, [r3, #0]
}
 800a9ea:	bf00      	nop
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	20000364 	.word	0x20000364
 800a9fc:	2000040c 	.word	0x2000040c

0800aa00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4a07      	ldr	r2, [pc, #28]	@ (800aa2c <vApplicationGetTimerTaskMemory+0x2c>)
 800aa10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	4a06      	ldr	r2, [pc, #24]	@ (800aa30 <vApplicationGetTimerTaskMemory+0x30>)
 800aa16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa1e:	601a      	str	r2, [r3, #0]
}
 800aa20:	bf00      	nop
 800aa22:	3714      	adds	r7, #20
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	2000060c 	.word	0x2000060c
 800aa30:	200006b4 	.word	0x200006b4

0800aa34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f103 0208 	add.w	r2, r3, #8
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f103 0208 	add.w	r2, r3, #8
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f103 0208 	add.w	r2, r3, #8
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa68:	bf00      	nop
 800aa6a:	370c      	adds	r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	1c5a      	adds	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	601a      	str	r2, [r3, #0]
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaec:	d103      	bne.n	800aaf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	e00c      	b.n	800ab10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3308      	adds	r3, #8
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	e002      	b.n	800ab04 <vListInsert+0x2e>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d2f6      	bcs.n	800aafe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	685a      	ldr	r2, [r3, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	683a      	ldr	r2, [r7, #0]
 800ab1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	601a      	str	r2, [r3, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	3714      	adds	r7, #20
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6892      	ldr	r2, [r2, #8]
 800ab5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6852      	ldr	r2, [r2, #4]
 800ab68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d103      	bne.n	800ab7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	689a      	ldr	r2, [r3, #8]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	1e5a      	subs	r2, r3, #1
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10b      	bne.n	800abc8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abc2:	bf00      	nop
 800abc4:	bf00      	nop
 800abc6:	e7fd      	b.n	800abc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abc8:	f002 f8a6 	bl	800cd18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd4:	68f9      	ldr	r1, [r7, #12]
 800abd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	441a      	add	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abf8:	3b01      	subs	r3, #1
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abfe:	fb01 f303 	mul.w	r3, r1, r3
 800ac02:	441a      	add	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	22ff      	movs	r2, #255	@ 0xff
 800ac0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	22ff      	movs	r2, #255	@ 0xff
 800ac14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d114      	bne.n	800ac48 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d01a      	beq.n	800ac5c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	3310      	adds	r3, #16
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 f942 	bl	800beb4 <xTaskRemoveFromEventList>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <xQueueGenericReset+0xd0>)
 800ac38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	e009      	b.n	800ac5c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3310      	adds	r3, #16
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff fef1 	bl	800aa34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3324      	adds	r3, #36	@ 0x24
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff feec 	bl	800aa34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac5c:	f002 f88e 	bl	800cd7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac60:	2301      	movs	r3, #1
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	e000ed04 	.word	0xe000ed04

0800ac70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b08e      	sub	sp, #56	@ 0x38
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10b      	bne.n	800ac9c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	e7fd      	b.n	800ac98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10b      	bne.n	800acba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <xQueueGenericCreateStatic+0x56>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <xQueueGenericCreateStatic+0x5a>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <xQueueGenericCreateStatic+0x5c>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10b      	bne.n	800ace8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	623b      	str	r3, [r7, #32]
}
 800ace2:	bf00      	nop
 800ace4:	bf00      	nop
 800ace6:	e7fd      	b.n	800ace4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <xQueueGenericCreateStatic+0x84>
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <xQueueGenericCreateStatic+0x88>
 800acf4:	2301      	movs	r3, #1
 800acf6:	e000      	b.n	800acfa <xQueueGenericCreateStatic+0x8a>
 800acf8:	2300      	movs	r3, #0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10b      	bne.n	800ad16 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	61fb      	str	r3, [r7, #28]
}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	e7fd      	b.n	800ad12 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad16:	2350      	movs	r3, #80	@ 0x50
 800ad18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b50      	cmp	r3, #80	@ 0x50
 800ad1e:	d00b      	beq.n	800ad38 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	61bb      	str	r3, [r7, #24]
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	e7fd      	b.n	800ad34 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ad3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00d      	beq.n	800ad60 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad4c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ad50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	4613      	mov	r3, r2
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	68b9      	ldr	r1, [r7, #8]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 f805 	bl	800ad6a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3730      	adds	r7, #48	@ 0x30
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	60f8      	str	r0, [r7, #12]
 800ad72:	60b9      	str	r1, [r7, #8]
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d103      	bne.n	800ad86 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	e002      	b.n	800ad8c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad98:	2101      	movs	r1, #1
 800ad9a:	69b8      	ldr	r0, [r7, #24]
 800ad9c:	f7ff fefe 	bl	800ab9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ada8:	bf00      	nop
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b08e      	sub	sp, #56	@ 0x38
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adbe:	2300      	movs	r3, #0
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10b      	bne.n	800ade4 <xQueueGenericSend+0x34>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adde:	bf00      	nop
 800ade0:	bf00      	nop
 800ade2:	e7fd      	b.n	800ade0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <xQueueGenericSend+0x42>
 800adea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0x46>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0x48>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10b      	bne.n	800ae14 <xQueueGenericSend+0x64>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d103      	bne.n	800ae22 <xQueueGenericSend+0x72>
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d101      	bne.n	800ae26 <xQueueGenericSend+0x76>
 800ae22:	2301      	movs	r3, #1
 800ae24:	e000      	b.n	800ae28 <xQueueGenericSend+0x78>
 800ae26:	2300      	movs	r3, #0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <xQueueGenericSend+0x94>
	__asm volatile
 800ae2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae30:	f383 8811 	msr	BASEPRI, r3
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	623b      	str	r3, [r7, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	bf00      	nop
 800ae42:	e7fd      	b.n	800ae40 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae44:	f001 f9fc 	bl	800c240 <xTaskGetSchedulerState>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d102      	bne.n	800ae54 <xQueueGenericSend+0xa4>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <xQueueGenericSend+0xa8>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e000      	b.n	800ae5a <xQueueGenericSend+0xaa>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xQueueGenericSend+0xc6>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61fb      	str	r3, [r7, #28]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae76:	f001 ff4f 	bl	800cd18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d302      	bcc.n	800ae8c <xQueueGenericSend+0xdc>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d129      	bne.n	800aee0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	68b9      	ldr	r1, [r7, #8]
 800ae90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae92:	f000 fa0f 	bl	800b2b4 <prvCopyDataToQueue>
 800ae96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d010      	beq.n	800aec2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	3324      	adds	r3, #36	@ 0x24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 f805 	bl	800beb4 <xTaskRemoveFromEventList>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d013      	beq.n	800aed8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aeb0:	4b3f      	ldr	r3, [pc, #252]	@ (800afb0 <xQueueGenericSend+0x200>)
 800aeb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeb6:	601a      	str	r2, [r3, #0]
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	e00a      	b.n	800aed8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d007      	beq.n	800aed8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aec8:	4b39      	ldr	r3, [pc, #228]	@ (800afb0 <xQueueGenericSend+0x200>)
 800aeca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aece:	601a      	str	r2, [r3, #0]
 800aed0:	f3bf 8f4f 	dsb	sy
 800aed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aed8:	f001 ff50 	bl	800cd7c <vPortExitCritical>
				return pdPASS;
 800aedc:	2301      	movs	r3, #1
 800aede:	e063      	b.n	800afa8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d103      	bne.n	800aeee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aee6:	f001 ff49 	bl	800cd7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	e05c      	b.n	800afa8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d106      	bne.n	800af02 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aef4:	f107 0314 	add.w	r3, r7, #20
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 f83f 	bl	800bf7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aefe:	2301      	movs	r3, #1
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af02:	f001 ff3b 	bl	800cd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af06:	f000 fda7 	bl	800ba58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af0a:	f001 ff05 	bl	800cd18 <vPortEnterCritical>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af14:	b25b      	sxtb	r3, r3
 800af16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af1a:	d103      	bne.n	800af24 <xQueueGenericSend+0x174>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af30:	d103      	bne.n	800af3a <xQueueGenericSend+0x18a>
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	2200      	movs	r2, #0
 800af36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af3a:	f001 ff1f 	bl	800cd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af3e:	1d3a      	adds	r2, r7, #4
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	4611      	mov	r1, r2
 800af46:	4618      	mov	r0, r3
 800af48:	f001 f82e 	bl	800bfa8 <xTaskCheckForTimeOut>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d124      	bne.n	800af9c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af54:	f000 faa6 	bl	800b4a4 <prvIsQueueFull>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d018      	beq.n	800af90 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	3310      	adds	r3, #16
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	4611      	mov	r1, r2
 800af66:	4618      	mov	r0, r3
 800af68:	f000 ff52 	bl	800be10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af6e:	f000 fa31 	bl	800b3d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af72:	f000 fd7f 	bl	800ba74 <xTaskResumeAll>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f af7c 	bne.w	800ae76 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800af7e:	4b0c      	ldr	r3, [pc, #48]	@ (800afb0 <xQueueGenericSend+0x200>)
 800af80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	e772      	b.n	800ae76 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af92:	f000 fa1f 	bl	800b3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af96:	f000 fd6d 	bl	800ba74 <xTaskResumeAll>
 800af9a:	e76c      	b.n	800ae76 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af9e:	f000 fa19 	bl	800b3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afa2:	f000 fd67 	bl	800ba74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800afa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3738      	adds	r7, #56	@ 0x38
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b090      	sub	sp, #64	@ 0x40
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800afc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10b      	bne.n	800afe4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afde:	bf00      	nop
 800afe0:	bf00      	nop
 800afe2:	e7fd      	b.n	800afe0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d103      	bne.n	800aff2 <xQueueGenericSendFromISR+0x3e>
 800afea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d101      	bne.n	800aff6 <xQueueGenericSendFromISR+0x42>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e000      	b.n	800aff8 <xQueueGenericSendFromISR+0x44>
 800aff6:	2300      	movs	r3, #0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10b      	bne.n	800b014 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800affc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b000:	f383 8811 	msr	BASEPRI, r3
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b00e:	bf00      	nop
 800b010:	bf00      	nop
 800b012:	e7fd      	b.n	800b010 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d103      	bne.n	800b022 <xQueueGenericSendFromISR+0x6e>
 800b01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d101      	bne.n	800b026 <xQueueGenericSendFromISR+0x72>
 800b022:	2301      	movs	r3, #1
 800b024:	e000      	b.n	800b028 <xQueueGenericSendFromISR+0x74>
 800b026:	2300      	movs	r3, #0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	623b      	str	r3, [r7, #32]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b044:	f001 ff48 	bl	800ced8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b048:	f3ef 8211 	mrs	r2, BASEPRI
 800b04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b050:	f383 8811 	msr	BASEPRI, r3
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	61fa      	str	r2, [r7, #28]
 800b05e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b060:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b062:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d302      	bcc.n	800b076 <xQueueGenericSendFromISR+0xc2>
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b02      	cmp	r3, #2
 800b074:	d12f      	bne.n	800b0d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b07c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b084:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	68b9      	ldr	r1, [r7, #8]
 800b08a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b08c:	f000 f912 	bl	800b2b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b090:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b098:	d112      	bne.n	800b0c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d016      	beq.n	800b0d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	3324      	adds	r3, #36	@ 0x24
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 ff04 	bl	800beb4 <xTaskRemoveFromEventList>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	601a      	str	r2, [r3, #0]
 800b0be:	e007      	b.n	800b0d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	b25a      	sxtb	r2, r3
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b0d4:	e001      	b.n	800b0da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3740      	adds	r7, #64	@ 0x40
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}

0800b0f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b08c      	sub	sp, #48	@ 0x30
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <xQueueReceive+0x32>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	623b      	str	r3, [r7, #32]
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	e7fd      	b.n	800b11e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d103      	bne.n	800b130 <xQueueReceive+0x40>
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <xQueueReceive+0x44>
 800b130:	2301      	movs	r3, #1
 800b132:	e000      	b.n	800b136 <xQueueReceive+0x46>
 800b134:	2300      	movs	r3, #0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10b      	bne.n	800b152 <xQueueReceive+0x62>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	61fb      	str	r3, [r7, #28]
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	e7fd      	b.n	800b14e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b152:	f001 f875 	bl	800c240 <xTaskGetSchedulerState>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <xQueueReceive+0x72>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <xQueueReceive+0x76>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <xQueueReceive+0x78>
 800b166:	2300      	movs	r3, #0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <xQueueReceive+0x94>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	61bb      	str	r3, [r7, #24]
}
 800b17e:	bf00      	nop
 800b180:	bf00      	nop
 800b182:	e7fd      	b.n	800b180 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b184:	f001 fdc8 	bl	800cd18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b18c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01f      	beq.n	800b1d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b194:	68b9      	ldr	r1, [r7, #8]
 800b196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b198:	f000 f8f6 	bl	800b388 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19e:	1e5a      	subs	r2, r3, #1
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00f      	beq.n	800b1cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	3310      	adds	r3, #16
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fe7f 	bl	800beb4 <xTaskRemoveFromEventList>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d007      	beq.n	800b1cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1bc:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b0 <xQueueReceive+0x1c0>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1cc:	f001 fdd6 	bl	800cd7c <vPortExitCritical>
				return pdPASS;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e069      	b.n	800b2a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d103      	bne.n	800b1e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1da:	f001 fdcf 	bl	800cd7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e062      	b.n	800b2a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d106      	bne.n	800b1f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1e8:	f107 0310 	add.w	r3, r7, #16
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fec5 	bl	800bf7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1f6:	f001 fdc1 	bl	800cd7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1fa:	f000 fc2d 	bl	800ba58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1fe:	f001 fd8b 	bl	800cd18 <vPortEnterCritical>
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b208:	b25b      	sxtb	r3, r3
 800b20a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b20e:	d103      	bne.n	800b218 <xQueueReceive+0x128>
 800b210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b224:	d103      	bne.n	800b22e <xQueueReceive+0x13e>
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b22e:	f001 fda5 	bl	800cd7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b232:	1d3a      	adds	r2, r7, #4
 800b234:	f107 0310 	add.w	r3, r7, #16
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 feb4 	bl	800bfa8 <xTaskCheckForTimeOut>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d123      	bne.n	800b28e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b248:	f000 f916 	bl	800b478 <prvIsQueueEmpty>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d017      	beq.n	800b282 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	3324      	adds	r3, #36	@ 0x24
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fdd8 	bl	800be10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b262:	f000 f8b7 	bl	800b3d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b266:	f000 fc05 	bl	800ba74 <xTaskResumeAll>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d189      	bne.n	800b184 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b270:	4b0f      	ldr	r3, [pc, #60]	@ (800b2b0 <xQueueReceive+0x1c0>)
 800b272:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	f3bf 8f4f 	dsb	sy
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	e780      	b.n	800b184 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b284:	f000 f8a6 	bl	800b3d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b288:	f000 fbf4 	bl	800ba74 <xTaskResumeAll>
 800b28c:	e77a      	b.n	800b184 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b28e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b290:	f000 f8a0 	bl	800b3d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b294:	f000 fbee 	bl	800ba74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29a:	f000 f8ed 	bl	800b478 <prvIsQueueEmpty>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f43f af6f 	beq.w	800b184 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3730      	adds	r7, #48	@ 0x30
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	e000ed04 	.word	0xe000ed04

0800b2b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10d      	bne.n	800b2ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d14d      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ffcc 	bl	800c27c <xTaskPriorityDisinherit>
 800b2e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	609a      	str	r2, [r3, #8]
 800b2ec:	e043      	b.n	800b376 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d119      	bne.n	800b328 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6858      	ldr	r0, [r3, #4]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	f002 fdb4 	bl	800de6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30c:	441a      	add	r2, r3
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d32b      	bcc.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	605a      	str	r2, [r3, #4]
 800b326:	e026      	b.n	800b376 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	68d8      	ldr	r0, [r3, #12]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b330:	461a      	mov	r2, r3
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	f002 fd9a 	bl	800de6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	68da      	ldr	r2, [r3, #12]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b340:	425b      	negs	r3, r3
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68da      	ldr	r2, [r3, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d207      	bcs.n	800b364 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b35c:	425b      	negs	r3, r3
 800b35e:	441a      	add	r2, r3
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b02      	cmp	r3, #2
 800b368:	d105      	bne.n	800b376 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3b01      	subs	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b37e:	697b      	ldr	r3, [r7, #20]
}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b396:	2b00      	cmp	r3, #0
 800b398:	d018      	beq.n	800b3cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a2:	441a      	add	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68da      	ldr	r2, [r3, #12]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d303      	bcc.n	800b3bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68d9      	ldr	r1, [r3, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6838      	ldr	r0, [r7, #0]
 800b3c8:	f002 fd50 	bl	800de6c <memcpy>
	}
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3dc:	f001 fc9c 	bl	800cd18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3e8:	e011      	b.n	800b40e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d012      	beq.n	800b418 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3324      	adds	r3, #36	@ 0x24
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f000 fd5c 	bl	800beb4 <xTaskRemoveFromEventList>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b402:	f000 fe35 	bl	800c070 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	3b01      	subs	r3, #1
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dce9      	bgt.n	800b3ea <prvUnlockQueue+0x16>
 800b416:	e000      	b.n	800b41a <prvUnlockQueue+0x46>
					break;
 800b418:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	22ff      	movs	r2, #255	@ 0xff
 800b41e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b422:	f001 fcab 	bl	800cd7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b426:	f001 fc77 	bl	800cd18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b430:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b432:	e011      	b.n	800b458 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d012      	beq.n	800b462 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3310      	adds	r3, #16
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fd37 	bl	800beb4 <xTaskRemoveFromEventList>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b44c:	f000 fe10 	bl	800c070 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b450:	7bbb      	ldrb	r3, [r7, #14]
 800b452:	3b01      	subs	r3, #1
 800b454:	b2db      	uxtb	r3, r3
 800b456:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	dce9      	bgt.n	800b434 <prvUnlockQueue+0x60>
 800b460:	e000      	b.n	800b464 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b462:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	22ff      	movs	r2, #255	@ 0xff
 800b468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b46c:	f001 fc86 	bl	800cd7c <vPortExitCritical>
}
 800b470:	bf00      	nop
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b480:	f001 fc4a 	bl	800cd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d102      	bne.n	800b492 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e001      	b.n	800b496 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b496:	f001 fc71 	bl	800cd7c <vPortExitCritical>

	return xReturn;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4ac:	f001 fc34 	bl	800cd18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d102      	bne.n	800b4c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	e001      	b.n	800b4c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b4c6:	f001 fc59 	bl	800cd7c <vPortExitCritical>

	return xReturn;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
 800b4e2:	e014      	b.n	800b50e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b524 <vQueueAddToRegistry+0x50>)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10b      	bne.n	800b508 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4f0:	490c      	ldr	r1, [pc, #48]	@ (800b524 <vQueueAddToRegistry+0x50>)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	683a      	ldr	r2, [r7, #0]
 800b4f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4fa:	4a0a      	ldr	r2, [pc, #40]	@ (800b524 <vQueueAddToRegistry+0x50>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	4413      	add	r3, r2
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b506:	e006      	b.n	800b516 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	3301      	adds	r3, #1
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2b07      	cmp	r3, #7
 800b512:	d9e7      	bls.n	800b4e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	3714      	adds	r7, #20
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20000ab4 	.word	0x20000ab4

0800b528 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b538:	f001 fbee 	bl	800cd18 <vPortEnterCritical>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b542:	b25b      	sxtb	r3, r3
 800b544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b548:	d103      	bne.n	800b552 <vQueueWaitForMessageRestricted+0x2a>
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b558:	b25b      	sxtb	r3, r3
 800b55a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b55e:	d103      	bne.n	800b568 <vQueueWaitForMessageRestricted+0x40>
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	2200      	movs	r2, #0
 800b564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b568:	f001 fc08 	bl	800cd7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b570:	2b00      	cmp	r3, #0
 800b572:	d106      	bne.n	800b582 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	3324      	adds	r3, #36	@ 0x24
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	68b9      	ldr	r1, [r7, #8]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fc6d 	bl	800be5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b582:	6978      	ldr	r0, [r7, #20]
 800b584:	f7ff ff26 	bl	800b3d4 <prvUnlockQueue>
	}
 800b588:	bf00      	nop
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08e      	sub	sp, #56	@ 0x38
 800b594:	af04      	add	r7, sp, #16
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <xTaskCreateStatic+0x2c>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	623b      	str	r3, [r7, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <xTaskCreateStatic+0x4a>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	61fb      	str	r3, [r7, #28]
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	e7fd      	b.n	800b5d6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5da:	23a8      	movs	r3, #168	@ 0xa8
 800b5dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2ba8      	cmp	r3, #168	@ 0xa8
 800b5e2:	d00b      	beq.n	800b5fc <xTaskCreateStatic+0x6c>
	__asm volatile
 800b5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
 800b5f4:	61bb      	str	r3, [r7, #24]
}
 800b5f6:	bf00      	nop
 800b5f8:	bf00      	nop
 800b5fa:	e7fd      	b.n	800b5f8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b600:	2b00      	cmp	r3, #0
 800b602:	d01e      	beq.n	800b642 <xTaskCreateStatic+0xb2>
 800b604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01b      	beq.n	800b642 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b612:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b616:	2202      	movs	r2, #2
 800b618:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b61c:	2300      	movs	r3, #0
 800b61e:	9303      	str	r3, [sp, #12]
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	9302      	str	r3, [sp, #8]
 800b624:	f107 0314 	add.w	r3, r7, #20
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	68b9      	ldr	r1, [r7, #8]
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 f851 	bl	800b6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b63a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b63c:	f000 f8f6 	bl	800b82c <prvAddNewTaskToReadyList>
 800b640:	e001      	b.n	800b646 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b646:	697b      	ldr	r3, [r7, #20]
	}
 800b648:	4618      	mov	r0, r3
 800b64a:	3728      	adds	r7, #40	@ 0x28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08c      	sub	sp, #48	@ 0x30
 800b654:	af04      	add	r7, sp, #16
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	603b      	str	r3, [r7, #0]
 800b65c:	4613      	mov	r3, r2
 800b65e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b660:	88fb      	ldrh	r3, [r7, #6]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4618      	mov	r0, r3
 800b666:	f001 fc79 	bl	800cf5c <pvPortMalloc>
 800b66a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00e      	beq.n	800b690 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b672:	20a8      	movs	r0, #168	@ 0xa8
 800b674:	f001 fc72 	bl	800cf5c <pvPortMalloc>
 800b678:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	631a      	str	r2, [r3, #48]	@ 0x30
 800b686:	e005      	b.n	800b694 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b688:	6978      	ldr	r0, [r7, #20]
 800b68a:	f001 fd35 	bl	800d0f8 <vPortFree>
 800b68e:	e001      	b.n	800b694 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b690:	2300      	movs	r3, #0
 800b692:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d017      	beq.n	800b6ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b6a2:	88fa      	ldrh	r2, [r7, #6]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9303      	str	r3, [sp, #12]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	9302      	str	r3, [sp, #8]
 800b6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ae:	9301      	str	r3, [sp, #4]
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f000 f80f 	bl	800b6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6be:	69f8      	ldr	r0, [r7, #28]
 800b6c0:	f000 f8b4 	bl	800b82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	61bb      	str	r3, [r7, #24]
 800b6c8:	e002      	b.n	800b6d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b6ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b6d0:	69bb      	ldr	r3, [r7, #24]
	}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
	...

0800b6dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b088      	sub	sp, #32
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	21a5      	movs	r1, #165	@ 0xa5
 800b6f6:	f002 fb2f 	bl	800dd58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b704:	3b01      	subs	r3, #1
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	f023 0307 	bic.w	r3, r3, #7
 800b712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f003 0307 	and.w	r3, r3, #7
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	617b      	str	r3, [r7, #20]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01f      	beq.n	800b77c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b73c:	2300      	movs	r3, #0
 800b73e:	61fb      	str	r3, [r7, #28]
 800b740:	e012      	b.n	800b768 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	4413      	add	r3, r2
 800b748:	7819      	ldrb	r1, [r3, #0]
 800b74a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	4413      	add	r3, r2
 800b750:	3334      	adds	r3, #52	@ 0x34
 800b752:	460a      	mov	r2, r1
 800b754:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	4413      	add	r3, r2
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d006      	beq.n	800b770 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	3301      	adds	r3, #1
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	2b0f      	cmp	r3, #15
 800b76c:	d9e9      	bls.n	800b742 <prvInitialiseNewTask+0x66>
 800b76e:	e000      	b.n	800b772 <prvInitialiseNewTask+0x96>
			{
				break;
 800b770:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	2200      	movs	r2, #0
 800b776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b77a:	e003      	b.n	800b784 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b786:	2b37      	cmp	r3, #55	@ 0x37
 800b788:	d901      	bls.n	800b78e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b78a:	2337      	movs	r3, #55	@ 0x37
 800b78c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b792:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b798:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79c:	2200      	movs	r2, #0
 800b79e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff f965 	bl	800aa74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	3318      	adds	r3, #24
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f7ff f960 	bl	800aa74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7c8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7dc:	3354      	adds	r3, #84	@ 0x54
 800b7de:	224c      	movs	r2, #76	@ 0x4c
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f002 fab8 	bl	800dd58 <memset>
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b820 <prvInitialiseNewTask+0x144>)
 800b7ec:	659a      	str	r2, [r3, #88]	@ 0x58
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b824 <prvInitialiseNewTask+0x148>)
 800b7f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800b828 <prvInitialiseNewTask+0x14c>)
 800b7f8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	68f9      	ldr	r1, [r7, #12]
 800b7fe:	69b8      	ldr	r0, [r7, #24]
 800b800:	f001 f95a 	bl	800cab8 <pxPortInitialiseStack>
 800b804:	4602      	mov	r2, r0
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b816:	bf00      	nop
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20006128 	.word	0x20006128
 800b824:	20006190 	.word	0x20006190
 800b828:	200061f8 	.word	0x200061f8

0800b82c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b834:	f001 fa70 	bl	800cd18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b838:	4b2d      	ldr	r3, [pc, #180]	@ (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3301      	adds	r3, #1
 800b83e:	4a2c      	ldr	r2, [pc, #176]	@ (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b842:	4b2c      	ldr	r3, [pc, #176]	@ (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d109      	bne.n	800b85e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b84a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b850:	4b27      	ldr	r3, [pc, #156]	@ (800b8f0 <prvAddNewTaskToReadyList+0xc4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b01      	cmp	r3, #1
 800b856:	d110      	bne.n	800b87a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b858:	f000 fc2e 	bl	800c0b8 <prvInitialiseTaskLists>
 800b85c:	e00d      	b.n	800b87a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b85e:	4b26      	ldr	r3, [pc, #152]	@ (800b8f8 <prvAddNewTaskToReadyList+0xcc>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d109      	bne.n	800b87a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b866:	4b23      	ldr	r3, [pc, #140]	@ (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b870:	429a      	cmp	r2, r3
 800b872:	d802      	bhi.n	800b87a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b874:	4a1f      	ldr	r2, [pc, #124]	@ (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b87a:	4b20      	ldr	r3, [pc, #128]	@ (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3301      	adds	r3, #1
 800b880:	4a1e      	ldr	r2, [pc, #120]	@ (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b882:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b884:	4b1d      	ldr	r3, [pc, #116]	@ (800b8fc <prvAddNewTaskToReadyList+0xd0>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b890:	4b1b      	ldr	r3, [pc, #108]	@ (800b900 <prvAddNewTaskToReadyList+0xd4>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d903      	bls.n	800b8a0 <prvAddNewTaskToReadyList+0x74>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	4a18      	ldr	r2, [pc, #96]	@ (800b900 <prvAddNewTaskToReadyList+0xd4>)
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4a15      	ldr	r2, [pc, #84]	@ (800b904 <prvAddNewTaskToReadyList+0xd8>)
 800b8ae:	441a      	add	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7ff f8e9 	bl	800aa8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8bc:	f001 fa5e 	bl	800cd7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f8 <prvAddNewTaskToReadyList+0xcc>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b8f4 <prvAddNewTaskToReadyList+0xc8>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d207      	bcs.n	800b8e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <prvAddNewTaskToReadyList+0xdc>)
 800b8d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8dc:	601a      	str	r2, [r3, #0]
 800b8de:	f3bf 8f4f 	dsb	sy
 800b8e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20000fc8 	.word	0x20000fc8
 800b8f4:	20000af4 	.word	0x20000af4
 800b8f8:	20000fd4 	.word	0x20000fd4
 800b8fc:	20000fe4 	.word	0x20000fe4
 800b900:	20000fd0 	.word	0x20000fd0
 800b904:	20000af8 	.word	0x20000af8
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b914:	2300      	movs	r3, #0
 800b916:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d018      	beq.n	800b950 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b91e:	4b14      	ldr	r3, [pc, #80]	@ (800b970 <vTaskDelay+0x64>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00b      	beq.n	800b93e <vTaskDelay+0x32>
	__asm volatile
 800b926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92a:	f383 8811 	msr	BASEPRI, r3
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	f3bf 8f4f 	dsb	sy
 800b936:	60bb      	str	r3, [r7, #8]
}
 800b938:	bf00      	nop
 800b93a:	bf00      	nop
 800b93c:	e7fd      	b.n	800b93a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b93e:	f000 f88b 	bl	800ba58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b942:	2100      	movs	r1, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fd09 	bl	800c35c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b94a:	f000 f893 	bl	800ba74 <xTaskResumeAll>
 800b94e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d107      	bne.n	800b966 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b956:	4b07      	ldr	r3, [pc, #28]	@ (800b974 <vTaskDelay+0x68>)
 800b958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b966:	bf00      	nop
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000ff0 	.word	0x20000ff0
 800b974:	e000ed04 	.word	0xe000ed04

0800b978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b08a      	sub	sp, #40	@ 0x28
 800b97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b97e:	2300      	movs	r3, #0
 800b980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b982:	2300      	movs	r3, #0
 800b984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b986:	463a      	mov	r2, r7
 800b988:	1d39      	adds	r1, r7, #4
 800b98a:	f107 0308 	add.w	r3, r7, #8
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff f81c 	bl	800a9cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	9202      	str	r2, [sp, #8]
 800b99c:	9301      	str	r3, [sp, #4]
 800b99e:	2300      	movs	r3, #0
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	460a      	mov	r2, r1
 800b9a6:	4924      	ldr	r1, [pc, #144]	@ (800ba38 <vTaskStartScheduler+0xc0>)
 800b9a8:	4824      	ldr	r0, [pc, #144]	@ (800ba3c <vTaskStartScheduler+0xc4>)
 800b9aa:	f7ff fdf1 	bl	800b590 <xTaskCreateStatic>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	4a23      	ldr	r2, [pc, #140]	@ (800ba40 <vTaskStartScheduler+0xc8>)
 800b9b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b9b4:	4b22      	ldr	r3, [pc, #136]	@ (800ba40 <vTaskStartScheduler+0xc8>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e001      	b.n	800b9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d102      	bne.n	800b9d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b9cc:	f000 fd1a 	bl	800c404 <xTimerCreateTimerTask>
 800b9d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d11b      	bne.n	800ba10 <vTaskStartScheduler+0x98>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	613b      	str	r3, [r7, #16]
}
 800b9ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9ec:	4b15      	ldr	r3, [pc, #84]	@ (800ba44 <vTaskStartScheduler+0xcc>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3354      	adds	r3, #84	@ 0x54
 800b9f2:	4a15      	ldr	r2, [pc, #84]	@ (800ba48 <vTaskStartScheduler+0xd0>)
 800b9f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b9f6:	4b15      	ldr	r3, [pc, #84]	@ (800ba4c <vTaskStartScheduler+0xd4>)
 800b9f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b9fe:	4b14      	ldr	r3, [pc, #80]	@ (800ba50 <vTaskStartScheduler+0xd8>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba04:	4b13      	ldr	r3, [pc, #76]	@ (800ba54 <vTaskStartScheduler+0xdc>)
 800ba06:	2200      	movs	r2, #0
 800ba08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba0a:	f001 f8e1 	bl	800cbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba0e:	e00f      	b.n	800ba30 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba16:	d10b      	bne.n	800ba30 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	60fb      	str	r3, [r7, #12]
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	e7fd      	b.n	800ba2c <vTaskStartScheduler+0xb4>
}
 800ba30:	bf00      	nop
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	0800e500 	.word	0x0800e500
 800ba3c:	0800c089 	.word	0x0800c089
 800ba40:	20000fec 	.word	0x20000fec
 800ba44:	20000af4 	.word	0x20000af4
 800ba48:	20000120 	.word	0x20000120
 800ba4c:	20000fe8 	.word	0x20000fe8
 800ba50:	20000fd4 	.word	0x20000fd4
 800ba54:	20000fcc 	.word	0x20000fcc

0800ba58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ba5c:	4b04      	ldr	r3, [pc, #16]	@ (800ba70 <vTaskSuspendAll+0x18>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3301      	adds	r3, #1
 800ba62:	4a03      	ldr	r2, [pc, #12]	@ (800ba70 <vTaskSuspendAll+0x18>)
 800ba64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ba66:	bf00      	nop
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20000ff0 	.word	0x20000ff0

0800ba74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba82:	4b42      	ldr	r3, [pc, #264]	@ (800bb8c <xTaskResumeAll+0x118>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10b      	bne.n	800baa2 <xTaskResumeAll+0x2e>
	__asm volatile
 800ba8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8e:	f383 8811 	msr	BASEPRI, r3
 800ba92:	f3bf 8f6f 	isb	sy
 800ba96:	f3bf 8f4f 	dsb	sy
 800ba9a:	603b      	str	r3, [r7, #0]
}
 800ba9c:	bf00      	nop
 800ba9e:	bf00      	nop
 800baa0:	e7fd      	b.n	800ba9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800baa2:	f001 f939 	bl	800cd18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800baa6:	4b39      	ldr	r3, [pc, #228]	@ (800bb8c <xTaskResumeAll+0x118>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	4a37      	ldr	r2, [pc, #220]	@ (800bb8c <xTaskResumeAll+0x118>)
 800baae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bab0:	4b36      	ldr	r3, [pc, #216]	@ (800bb8c <xTaskResumeAll+0x118>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d162      	bne.n	800bb7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bab8:	4b35      	ldr	r3, [pc, #212]	@ (800bb90 <xTaskResumeAll+0x11c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05e      	beq.n	800bb7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bac0:	e02f      	b.n	800bb22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac2:	4b34      	ldr	r3, [pc, #208]	@ (800bb94 <xTaskResumeAll+0x120>)
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3318      	adds	r3, #24
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff f83a 	bl	800ab48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3304      	adds	r3, #4
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff f835 	bl	800ab48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae2:	4b2d      	ldr	r3, [pc, #180]	@ (800bb98 <xTaskResumeAll+0x124>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d903      	bls.n	800baf2 <xTaskResumeAll+0x7e>
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baee:	4a2a      	ldr	r2, [pc, #168]	@ (800bb98 <xTaskResumeAll+0x124>)
 800baf0:	6013      	str	r3, [r2, #0]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baf6:	4613      	mov	r3, r2
 800baf8:	009b      	lsls	r3, r3, #2
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	4a27      	ldr	r2, [pc, #156]	@ (800bb9c <xTaskResumeAll+0x128>)
 800bb00:	441a      	add	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3304      	adds	r3, #4
 800bb06:	4619      	mov	r1, r3
 800bb08:	4610      	mov	r0, r2
 800bb0a:	f7fe ffc0 	bl	800aa8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb12:	4b23      	ldr	r3, [pc, #140]	@ (800bba0 <xTaskResumeAll+0x12c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d302      	bcc.n	800bb22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bb1c:	4b21      	ldr	r3, [pc, #132]	@ (800bba4 <xTaskResumeAll+0x130>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb22:	4b1c      	ldr	r3, [pc, #112]	@ (800bb94 <xTaskResumeAll+0x120>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1cb      	bne.n	800bac2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bb30:	f000 fb66 	bl	800c200 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bb34:	4b1c      	ldr	r3, [pc, #112]	@ (800bba8 <xTaskResumeAll+0x134>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bb40:	f000 f846 	bl	800bbd0 <xTaskIncrementTick>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d002      	beq.n	800bb50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bb4a:	4b16      	ldr	r3, [pc, #88]	@ (800bba4 <xTaskResumeAll+0x130>)
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1f1      	bne.n	800bb40 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bb5c:	4b12      	ldr	r3, [pc, #72]	@ (800bba8 <xTaskResumeAll+0x134>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bb62:	4b10      	ldr	r3, [pc, #64]	@ (800bba4 <xTaskResumeAll+0x130>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bb6e:	4b0f      	ldr	r3, [pc, #60]	@ (800bbac <xTaskResumeAll+0x138>)
 800bb70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb7e:	f001 f8fd 	bl	800cd7c <vPortExitCritical>

	return xAlreadyYielded;
 800bb82:	68bb      	ldr	r3, [r7, #8]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	20000ff0 	.word	0x20000ff0
 800bb90:	20000fc8 	.word	0x20000fc8
 800bb94:	20000f88 	.word	0x20000f88
 800bb98:	20000fd0 	.word	0x20000fd0
 800bb9c:	20000af8 	.word	0x20000af8
 800bba0:	20000af4 	.word	0x20000af4
 800bba4:	20000fdc 	.word	0x20000fdc
 800bba8:	20000fd8 	.word	0x20000fd8
 800bbac:	e000ed04 	.word	0xe000ed04

0800bbb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b083      	sub	sp, #12
 800bbb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bbb6:	4b05      	ldr	r3, [pc, #20]	@ (800bbcc <xTaskGetTickCount+0x1c>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bbbc:	687b      	ldr	r3, [r7, #4]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	20000fcc 	.word	0x20000fcc

0800bbd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbda:	4b4f      	ldr	r3, [pc, #316]	@ (800bd18 <xTaskIncrementTick+0x148>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f040 8090 	bne.w	800bd04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bbe4:	4b4d      	ldr	r3, [pc, #308]	@ (800bd1c <xTaskIncrementTick+0x14c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bbec:	4a4b      	ldr	r2, [pc, #300]	@ (800bd1c <xTaskIncrementTick+0x14c>)
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d121      	bne.n	800bc3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bbf8:	4b49      	ldr	r3, [pc, #292]	@ (800bd20 <xTaskIncrementTick+0x150>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00b      	beq.n	800bc1a <xTaskIncrementTick+0x4a>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	603b      	str	r3, [r7, #0]
}
 800bc14:	bf00      	nop
 800bc16:	bf00      	nop
 800bc18:	e7fd      	b.n	800bc16 <xTaskIncrementTick+0x46>
 800bc1a:	4b41      	ldr	r3, [pc, #260]	@ (800bd20 <xTaskIncrementTick+0x150>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	4b40      	ldr	r3, [pc, #256]	@ (800bd24 <xTaskIncrementTick+0x154>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a3e      	ldr	r2, [pc, #248]	@ (800bd20 <xTaskIncrementTick+0x150>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	4a3e      	ldr	r2, [pc, #248]	@ (800bd24 <xTaskIncrementTick+0x154>)
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6013      	str	r3, [r2, #0]
 800bc2e:	4b3e      	ldr	r3, [pc, #248]	@ (800bd28 <xTaskIncrementTick+0x158>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	4a3c      	ldr	r2, [pc, #240]	@ (800bd28 <xTaskIncrementTick+0x158>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	f000 fae2 	bl	800c200 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bc3c:	4b3b      	ldr	r3, [pc, #236]	@ (800bd2c <xTaskIncrementTick+0x15c>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d349      	bcc.n	800bcda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc46:	4b36      	ldr	r3, [pc, #216]	@ (800bd20 <xTaskIncrementTick+0x150>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d104      	bne.n	800bc5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc50:	4b36      	ldr	r3, [pc, #216]	@ (800bd2c <xTaskIncrementTick+0x15c>)
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc56:	601a      	str	r2, [r3, #0]
					break;
 800bc58:	e03f      	b.n	800bcda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc5a:	4b31      	ldr	r3, [pc, #196]	@ (800bd20 <xTaskIncrementTick+0x150>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d203      	bcs.n	800bc7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bc72:	4a2e      	ldr	r2, [pc, #184]	@ (800bd2c <xTaskIncrementTick+0x15c>)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bc78:	e02f      	b.n	800bcda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f7fe ff62 	bl	800ab48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d004      	beq.n	800bc96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	3318      	adds	r3, #24
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7fe ff59 	bl	800ab48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc9a:	4b25      	ldr	r3, [pc, #148]	@ (800bd30 <xTaskIncrementTick+0x160>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d903      	bls.n	800bcaa <xTaskIncrementTick+0xda>
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca6:	4a22      	ldr	r2, [pc, #136]	@ (800bd30 <xTaskIncrementTick+0x160>)
 800bca8:	6013      	str	r3, [r2, #0]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcae:	4613      	mov	r3, r2
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4a1f      	ldr	r2, [pc, #124]	@ (800bd34 <xTaskIncrementTick+0x164>)
 800bcb8:	441a      	add	r2, r3
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f7fe fee4 	bl	800aa8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcca:	4b1b      	ldr	r3, [pc, #108]	@ (800bd38 <xTaskIncrementTick+0x168>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d3b8      	bcc.n	800bc46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcd8:	e7b5      	b.n	800bc46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bcda:	4b17      	ldr	r3, [pc, #92]	@ (800bd38 <xTaskIncrementTick+0x168>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce0:	4914      	ldr	r1, [pc, #80]	@ (800bd34 <xTaskIncrementTick+0x164>)
 800bce2:	4613      	mov	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4413      	add	r3, r2
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	440b      	add	r3, r1
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d901      	bls.n	800bcf6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bcf6:	4b11      	ldr	r3, [pc, #68]	@ (800bd3c <xTaskIncrementTick+0x16c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d007      	beq.n	800bd0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	e004      	b.n	800bd0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd04:	4b0e      	ldr	r3, [pc, #56]	@ (800bd40 <xTaskIncrementTick+0x170>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	4a0d      	ldr	r2, [pc, #52]	@ (800bd40 <xTaskIncrementTick+0x170>)
 800bd0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd0e:	697b      	ldr	r3, [r7, #20]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3718      	adds	r7, #24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20000ff0 	.word	0x20000ff0
 800bd1c:	20000fcc 	.word	0x20000fcc
 800bd20:	20000f80 	.word	0x20000f80
 800bd24:	20000f84 	.word	0x20000f84
 800bd28:	20000fe0 	.word	0x20000fe0
 800bd2c:	20000fe8 	.word	0x20000fe8
 800bd30:	20000fd0 	.word	0x20000fd0
 800bd34:	20000af8 	.word	0x20000af8
 800bd38:	20000af4 	.word	0x20000af4
 800bd3c:	20000fdc 	.word	0x20000fdc
 800bd40:	20000fd8 	.word	0x20000fd8

0800bd44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bd4a:	4b2b      	ldr	r3, [pc, #172]	@ (800bdf8 <vTaskSwitchContext+0xb4>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bd52:	4b2a      	ldr	r3, [pc, #168]	@ (800bdfc <vTaskSwitchContext+0xb8>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bd58:	e047      	b.n	800bdea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bd5a:	4b28      	ldr	r3, [pc, #160]	@ (800bdfc <vTaskSwitchContext+0xb8>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd60:	4b27      	ldr	r3, [pc, #156]	@ (800be00 <vTaskSwitchContext+0xbc>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	e011      	b.n	800bd8c <vTaskSwitchContext+0x48>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10b      	bne.n	800bd86 <vTaskSwitchContext+0x42>
	__asm volatile
 800bd6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	607b      	str	r3, [r7, #4]
}
 800bd80:	bf00      	nop
 800bd82:	bf00      	nop
 800bd84:	e7fd      	b.n	800bd82 <vTaskSwitchContext+0x3e>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	491d      	ldr	r1, [pc, #116]	@ (800be04 <vTaskSwitchContext+0xc0>)
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	4613      	mov	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d0e3      	beq.n	800bd68 <vTaskSwitchContext+0x24>
 800bda0:	68fa      	ldr	r2, [r7, #12]
 800bda2:	4613      	mov	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4a16      	ldr	r2, [pc, #88]	@ (800be04 <vTaskSwitchContext+0xc0>)
 800bdac:	4413      	add	r3, r2
 800bdae:	60bb      	str	r3, [r7, #8]
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	605a      	str	r2, [r3, #4]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	685a      	ldr	r2, [r3, #4]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d104      	bne.n	800bdd0 <vTaskSwitchContext+0x8c>
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	685a      	ldr	r2, [r3, #4]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	605a      	str	r2, [r3, #4]
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	4a0c      	ldr	r2, [pc, #48]	@ (800be08 <vTaskSwitchContext+0xc4>)
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	4a09      	ldr	r2, [pc, #36]	@ (800be00 <vTaskSwitchContext+0xbc>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bde0:	4b09      	ldr	r3, [pc, #36]	@ (800be08 <vTaskSwitchContext+0xc4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3354      	adds	r3, #84	@ 0x54
 800bde6:	4a09      	ldr	r2, [pc, #36]	@ (800be0c <vTaskSwitchContext+0xc8>)
 800bde8:	6013      	str	r3, [r2, #0]
}
 800bdea:	bf00      	nop
 800bdec:	3714      	adds	r7, #20
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop
 800bdf8:	20000ff0 	.word	0x20000ff0
 800bdfc:	20000fdc 	.word	0x20000fdc
 800be00:	20000fd0 	.word	0x20000fd0
 800be04:	20000af8 	.word	0x20000af8
 800be08:	20000af4 	.word	0x20000af4
 800be0c:	20000120 	.word	0x20000120

0800be10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10b      	bne.n	800be38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800be20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be24:	f383 8811 	msr	BASEPRI, r3
 800be28:	f3bf 8f6f 	isb	sy
 800be2c:	f3bf 8f4f 	dsb	sy
 800be30:	60fb      	str	r3, [r7, #12]
}
 800be32:	bf00      	nop
 800be34:	bf00      	nop
 800be36:	e7fd      	b.n	800be34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be38:	4b07      	ldr	r3, [pc, #28]	@ (800be58 <vTaskPlaceOnEventList+0x48>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3318      	adds	r3, #24
 800be3e:	4619      	mov	r1, r3
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f7fe fe48 	bl	800aad6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800be46:	2101      	movs	r1, #1
 800be48:	6838      	ldr	r0, [r7, #0]
 800be4a:	f000 fa87 	bl	800c35c <prvAddCurrentTaskToDelayedList>
}
 800be4e:	bf00      	nop
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20000af4 	.word	0x20000af4

0800be5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d10b      	bne.n	800be86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	617b      	str	r3, [r7, #20]
}
 800be80:	bf00      	nop
 800be82:	bf00      	nop
 800be84:	e7fd      	b.n	800be82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800be86:	4b0a      	ldr	r3, [pc, #40]	@ (800beb0 <vTaskPlaceOnEventListRestricted+0x54>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	3318      	adds	r3, #24
 800be8c:	4619      	mov	r1, r3
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f7fe fdfd 	bl	800aa8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800be9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	68b8      	ldr	r0, [r7, #8]
 800bea4:	f000 fa5a 	bl	800c35c <prvAddCurrentTaskToDelayedList>
	}
 800bea8:	bf00      	nop
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	20000af4 	.word	0x20000af4

0800beb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10b      	bne.n	800bee2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	60fb      	str	r3, [r7, #12]
}
 800bedc:	bf00      	nop
 800bede:	bf00      	nop
 800bee0:	e7fd      	b.n	800bede <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	3318      	adds	r3, #24
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fe2e 	bl	800ab48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beec:	4b1d      	ldr	r3, [pc, #116]	@ (800bf64 <xTaskRemoveFromEventList+0xb0>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11d      	bne.n	800bf30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3304      	adds	r3, #4
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fe25 	bl	800ab48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf02:	4b19      	ldr	r3, [pc, #100]	@ (800bf68 <xTaskRemoveFromEventList+0xb4>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d903      	bls.n	800bf12 <xTaskRemoveFromEventList+0x5e>
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf0e:	4a16      	ldr	r2, [pc, #88]	@ (800bf68 <xTaskRemoveFromEventList+0xb4>)
 800bf10:	6013      	str	r3, [r2, #0]
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4a13      	ldr	r2, [pc, #76]	@ (800bf6c <xTaskRemoveFromEventList+0xb8>)
 800bf20:	441a      	add	r2, r3
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	3304      	adds	r3, #4
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f7fe fdb0 	bl	800aa8e <vListInsertEnd>
 800bf2e:	e005      	b.n	800bf3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	3318      	adds	r3, #24
 800bf34:	4619      	mov	r1, r3
 800bf36:	480e      	ldr	r0, [pc, #56]	@ (800bf70 <xTaskRemoveFromEventList+0xbc>)
 800bf38:	f7fe fda9 	bl	800aa8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf40:	4b0c      	ldr	r3, [pc, #48]	@ (800bf74 <xTaskRemoveFromEventList+0xc0>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d905      	bls.n	800bf56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bf4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <xTaskRemoveFromEventList+0xc4>)
 800bf50:	2201      	movs	r2, #1
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	e001      	b.n	800bf5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bf5a:	697b      	ldr	r3, [r7, #20]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3718      	adds	r7, #24
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	20000ff0 	.word	0x20000ff0
 800bf68:	20000fd0 	.word	0x20000fd0
 800bf6c:	20000af8 	.word	0x20000af8
 800bf70:	20000f88 	.word	0x20000f88
 800bf74:	20000af4 	.word	0x20000af4
 800bf78:	20000fdc 	.word	0x20000fdc

0800bf7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf84:	4b06      	ldr	r3, [pc, #24]	@ (800bfa0 <vTaskInternalSetTimeOutState+0x24>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf8c:	4b05      	ldr	r3, [pc, #20]	@ (800bfa4 <vTaskInternalSetTimeOutState+0x28>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	605a      	str	r2, [r3, #4]
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr
 800bfa0:	20000fe0 	.word	0x20000fe0
 800bfa4:	20000fcc 	.word	0x20000fcc

0800bfa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d10b      	bne.n	800bfd0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbc:	f383 8811 	msr	BASEPRI, r3
 800bfc0:	f3bf 8f6f 	isb	sy
 800bfc4:	f3bf 8f4f 	dsb	sy
 800bfc8:	613b      	str	r3, [r7, #16]
}
 800bfca:	bf00      	nop
 800bfcc:	bf00      	nop
 800bfce:	e7fd      	b.n	800bfcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10b      	bne.n	800bfee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	60fb      	str	r3, [r7, #12]
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	e7fd      	b.n	800bfea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bfee:	f000 fe93 	bl	800cd18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bff2:	4b1d      	ldr	r3, [pc, #116]	@ (800c068 <xTaskCheckForTimeOut+0xc0>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	69ba      	ldr	r2, [r7, #24]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c00a:	d102      	bne.n	800c012 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	61fb      	str	r3, [r7, #28]
 800c010:	e023      	b.n	800c05a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	4b15      	ldr	r3, [pc, #84]	@ (800c06c <xTaskCheckForTimeOut+0xc4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d007      	beq.n	800c02e <xTaskCheckForTimeOut+0x86>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	429a      	cmp	r2, r3
 800c026:	d302      	bcc.n	800c02e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	e015      	b.n	800c05a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	429a      	cmp	r2, r3
 800c036:	d20b      	bcs.n	800c050 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff ff99 	bl	800bf7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	61fb      	str	r3, [r7, #28]
 800c04e:	e004      	b.n	800c05a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c056:	2301      	movs	r3, #1
 800c058:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c05a:	f000 fe8f 	bl	800cd7c <vPortExitCritical>

	return xReturn;
 800c05e:	69fb      	ldr	r3, [r7, #28]
}
 800c060:	4618      	mov	r0, r3
 800c062:	3720      	adds	r7, #32
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	20000fcc 	.word	0x20000fcc
 800c06c:	20000fe0 	.word	0x20000fe0

0800c070 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c070:	b480      	push	{r7}
 800c072:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c074:	4b03      	ldr	r3, [pc, #12]	@ (800c084 <vTaskMissedYield+0x14>)
 800c076:	2201      	movs	r2, #1
 800c078:	601a      	str	r2, [r3, #0]
}
 800c07a:	bf00      	nop
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	20000fdc 	.word	0x20000fdc

0800c088 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c090:	f000 f852 	bl	800c138 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c094:	4b06      	ldr	r3, [pc, #24]	@ (800c0b0 <prvIdleTask+0x28>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d9f9      	bls.n	800c090 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c09c:	4b05      	ldr	r3, [pc, #20]	@ (800c0b4 <prvIdleTask+0x2c>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c0ac:	e7f0      	b.n	800c090 <prvIdleTask+0x8>
 800c0ae:	bf00      	nop
 800c0b0:	20000af8 	.word	0x20000af8
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0be:	2300      	movs	r3, #0
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	e00c      	b.n	800c0de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4a12      	ldr	r2, [pc, #72]	@ (800c118 <prvInitialiseTaskLists+0x60>)
 800c0d0:	4413      	add	r3, r2
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fcae 	bl	800aa34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	607b      	str	r3, [r7, #4]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2b37      	cmp	r3, #55	@ 0x37
 800c0e2:	d9ef      	bls.n	800c0c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0e4:	480d      	ldr	r0, [pc, #52]	@ (800c11c <prvInitialiseTaskLists+0x64>)
 800c0e6:	f7fe fca5 	bl	800aa34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0ea:	480d      	ldr	r0, [pc, #52]	@ (800c120 <prvInitialiseTaskLists+0x68>)
 800c0ec:	f7fe fca2 	bl	800aa34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0f0:	480c      	ldr	r0, [pc, #48]	@ (800c124 <prvInitialiseTaskLists+0x6c>)
 800c0f2:	f7fe fc9f 	bl	800aa34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0f6:	480c      	ldr	r0, [pc, #48]	@ (800c128 <prvInitialiseTaskLists+0x70>)
 800c0f8:	f7fe fc9c 	bl	800aa34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0fc:	480b      	ldr	r0, [pc, #44]	@ (800c12c <prvInitialiseTaskLists+0x74>)
 800c0fe:	f7fe fc99 	bl	800aa34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c102:	4b0b      	ldr	r3, [pc, #44]	@ (800c130 <prvInitialiseTaskLists+0x78>)
 800c104:	4a05      	ldr	r2, [pc, #20]	@ (800c11c <prvInitialiseTaskLists+0x64>)
 800c106:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c108:	4b0a      	ldr	r3, [pc, #40]	@ (800c134 <prvInitialiseTaskLists+0x7c>)
 800c10a:	4a05      	ldr	r2, [pc, #20]	@ (800c120 <prvInitialiseTaskLists+0x68>)
 800c10c:	601a      	str	r2, [r3, #0]
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20000af8 	.word	0x20000af8
 800c11c:	20000f58 	.word	0x20000f58
 800c120:	20000f6c 	.word	0x20000f6c
 800c124:	20000f88 	.word	0x20000f88
 800c128:	20000f9c 	.word	0x20000f9c
 800c12c:	20000fb4 	.word	0x20000fb4
 800c130:	20000f80 	.word	0x20000f80
 800c134:	20000f84 	.word	0x20000f84

0800c138 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c13e:	e019      	b.n	800c174 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c140:	f000 fdea 	bl	800cd18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c144:	4b10      	ldr	r3, [pc, #64]	@ (800c188 <prvCheckTasksWaitingTermination+0x50>)
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	3304      	adds	r3, #4
 800c150:	4618      	mov	r0, r3
 800c152:	f7fe fcf9 	bl	800ab48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c156:	4b0d      	ldr	r3, [pc, #52]	@ (800c18c <prvCheckTasksWaitingTermination+0x54>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	4a0b      	ldr	r2, [pc, #44]	@ (800c18c <prvCheckTasksWaitingTermination+0x54>)
 800c15e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c160:	4b0b      	ldr	r3, [pc, #44]	@ (800c190 <prvCheckTasksWaitingTermination+0x58>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3b01      	subs	r3, #1
 800c166:	4a0a      	ldr	r2, [pc, #40]	@ (800c190 <prvCheckTasksWaitingTermination+0x58>)
 800c168:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c16a:	f000 fe07 	bl	800cd7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f810 	bl	800c194 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c174:	4b06      	ldr	r3, [pc, #24]	@ (800c190 <prvCheckTasksWaitingTermination+0x58>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e1      	bne.n	800c140 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c17c:	bf00      	nop
 800c17e:	bf00      	nop
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20000f9c 	.word	0x20000f9c
 800c18c:	20000fc8 	.word	0x20000fc8
 800c190:	20000fb0 	.word	0x20000fb0

0800c194 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	3354      	adds	r3, #84	@ 0x54
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f001 fde1 	bl	800dd68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d108      	bne.n	800c1c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 ff9f 	bl	800d0f8 <vPortFree>
				vPortFree( pxTCB );
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 ff9c 	bl	800d0f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c1c0:	e019      	b.n	800c1f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d103      	bne.n	800c1d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 ff93 	bl	800d0f8 <vPortFree>
	}
 800c1d2:	e010      	b.n	800c1f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d00b      	beq.n	800c1f6 <prvDeleteTCB+0x62>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	e7fd      	b.n	800c1f2 <prvDeleteTCB+0x5e>
	}
 800c1f6:	bf00      	nop
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c206:	4b0c      	ldr	r3, [pc, #48]	@ (800c238 <prvResetNextTaskUnblockTime+0x38>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c210:	4b0a      	ldr	r3, [pc, #40]	@ (800c23c <prvResetNextTaskUnblockTime+0x3c>)
 800c212:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c216:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c218:	e008      	b.n	800c22c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c21a:	4b07      	ldr	r3, [pc, #28]	@ (800c238 <prvResetNextTaskUnblockTime+0x38>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <prvResetNextTaskUnblockTime+0x3c>)
 800c22a:	6013      	str	r3, [r2, #0]
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr
 800c238:	20000f80 	.word	0x20000f80
 800c23c:	20000fe8 	.word	0x20000fe8

0800c240 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c246:	4b0b      	ldr	r3, [pc, #44]	@ (800c274 <xTaskGetSchedulerState+0x34>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c24e:	2301      	movs	r3, #1
 800c250:	607b      	str	r3, [r7, #4]
 800c252:	e008      	b.n	800c266 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c254:	4b08      	ldr	r3, [pc, #32]	@ (800c278 <xTaskGetSchedulerState+0x38>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d102      	bne.n	800c262 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c25c:	2302      	movs	r3, #2
 800c25e:	607b      	str	r3, [r7, #4]
 800c260:	e001      	b.n	800c266 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c266:	687b      	ldr	r3, [r7, #4]
	}
 800c268:	4618      	mov	r0, r3
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr
 800c274:	20000fd4 	.word	0x20000fd4
 800c278:	20000ff0 	.word	0x20000ff0

0800c27c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c288:	2300      	movs	r3, #0
 800c28a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d058      	beq.n	800c344 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c292:	4b2f      	ldr	r3, [pc, #188]	@ (800c350 <xTaskPriorityDisinherit+0xd4>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	693a      	ldr	r2, [r7, #16]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d00b      	beq.n	800c2b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	bf00      	nop
 800c2b2:	e7fd      	b.n	800c2b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d10b      	bne.n	800c2d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c0:	f383 8811 	msr	BASEPRI, r3
 800c2c4:	f3bf 8f6f 	isb	sy
 800c2c8:	f3bf 8f4f 	dsb	sy
 800c2cc:	60bb      	str	r3, [r7, #8]
}
 800c2ce:	bf00      	nop
 800c2d0:	bf00      	nop
 800c2d2:	e7fd      	b.n	800c2d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2d8:	1e5a      	subs	r2, r3, #1
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d02c      	beq.n	800c344 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d128      	bne.n	800c344 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fc26 	bl	800ab48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c308:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c314:	4b0f      	ldr	r3, [pc, #60]	@ (800c354 <xTaskPriorityDisinherit+0xd8>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d903      	bls.n	800c324 <xTaskPriorityDisinherit+0xa8>
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c320:	4a0c      	ldr	r2, [pc, #48]	@ (800c354 <xTaskPriorityDisinherit+0xd8>)
 800c322:	6013      	str	r3, [r2, #0]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c328:	4613      	mov	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	4a09      	ldr	r2, [pc, #36]	@ (800c358 <xTaskPriorityDisinherit+0xdc>)
 800c332:	441a      	add	r2, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3304      	adds	r3, #4
 800c338:	4619      	mov	r1, r3
 800c33a:	4610      	mov	r0, r2
 800c33c:	f7fe fba7 	bl	800aa8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c340:	2301      	movs	r3, #1
 800c342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c344:	697b      	ldr	r3, [r7, #20]
	}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20000af4 	.word	0x20000af4
 800c354:	20000fd0 	.word	0x20000fd0
 800c358:	20000af8 	.word	0x20000af8

0800c35c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c366:	4b21      	ldr	r3, [pc, #132]	@ (800c3ec <prvAddCurrentTaskToDelayedList+0x90>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c36c:	4b20      	ldr	r3, [pc, #128]	@ (800c3f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	3304      	adds	r3, #4
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fbe8 	bl	800ab48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c37e:	d10a      	bne.n	800c396 <prvAddCurrentTaskToDelayedList+0x3a>
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d007      	beq.n	800c396 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c386:	4b1a      	ldr	r3, [pc, #104]	@ (800c3f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3304      	adds	r3, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4819      	ldr	r0, [pc, #100]	@ (800c3f4 <prvAddCurrentTaskToDelayedList+0x98>)
 800c390:	f7fe fb7d 	bl	800aa8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c394:	e026      	b.n	800c3e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4413      	add	r3, r2
 800c39c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c39e:	4b14      	ldr	r3, [pc, #80]	@ (800c3f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d209      	bcs.n	800c3c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ae:	4b12      	ldr	r3, [pc, #72]	@ (800c3f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800c3f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	f7fe fb8b 	bl	800aad6 <vListInsert>
}
 800c3c0:	e010      	b.n	800c3e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c3fc <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	f7fe fb81 	bl	800aad6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c3d4:	4b0a      	ldr	r3, [pc, #40]	@ (800c400 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d202      	bcs.n	800c3e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3de:	4a08      	ldr	r2, [pc, #32]	@ (800c400 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	6013      	str	r3, [r2, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	20000fcc 	.word	0x20000fcc
 800c3f0:	20000af4 	.word	0x20000af4
 800c3f4:	20000fb4 	.word	0x20000fb4
 800c3f8:	20000f84 	.word	0x20000f84
 800c3fc:	20000f80 	.word	0x20000f80
 800c400:	20000fe8 	.word	0x20000fe8

0800c404 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08a      	sub	sp, #40	@ 0x28
 800c408:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c40a:	2300      	movs	r3, #0
 800c40c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c40e:	f000 fb13 	bl	800ca38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c412:	4b1d      	ldr	r3, [pc, #116]	@ (800c488 <xTimerCreateTimerTask+0x84>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d021      	beq.n	800c45e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c422:	1d3a      	adds	r2, r7, #4
 800c424:	f107 0108 	add.w	r1, r7, #8
 800c428:	f107 030c 	add.w	r3, r7, #12
 800c42c:	4618      	mov	r0, r3
 800c42e:	f7fe fae7 	bl	800aa00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c432:	6879      	ldr	r1, [r7, #4]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	9202      	str	r2, [sp, #8]
 800c43a:	9301      	str	r3, [sp, #4]
 800c43c:	2302      	movs	r3, #2
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	2300      	movs	r3, #0
 800c442:	460a      	mov	r2, r1
 800c444:	4911      	ldr	r1, [pc, #68]	@ (800c48c <xTimerCreateTimerTask+0x88>)
 800c446:	4812      	ldr	r0, [pc, #72]	@ (800c490 <xTimerCreateTimerTask+0x8c>)
 800c448:	f7ff f8a2 	bl	800b590 <xTaskCreateStatic>
 800c44c:	4603      	mov	r3, r0
 800c44e:	4a11      	ldr	r2, [pc, #68]	@ (800c494 <xTimerCreateTimerTask+0x90>)
 800c450:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c452:	4b10      	ldr	r3, [pc, #64]	@ (800c494 <xTimerCreateTimerTask+0x90>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d001      	beq.n	800c45e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c45a:	2301      	movs	r3, #1
 800c45c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d10b      	bne.n	800c47c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	613b      	str	r3, [r7, #16]
}
 800c476:	bf00      	nop
 800c478:	bf00      	nop
 800c47a:	e7fd      	b.n	800c478 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c47c:	697b      	ldr	r3, [r7, #20]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20001024 	.word	0x20001024
 800c48c:	0800e508 	.word	0x0800e508
 800c490:	0800c5d1 	.word	0x0800c5d1
 800c494:	20001028 	.word	0x20001028

0800c498 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	@ 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d10b      	bne.n	800c4c8 <xTimerGenericCommand+0x30>
	__asm volatile
 800c4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	623b      	str	r3, [r7, #32]
}
 800c4c2:	bf00      	nop
 800c4c4:	bf00      	nop
 800c4c6:	e7fd      	b.n	800c4c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4c8:	4b19      	ldr	r3, [pc, #100]	@ (800c530 <xTimerGenericCommand+0x98>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d02a      	beq.n	800c526 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b05      	cmp	r3, #5
 800c4e0:	dc18      	bgt.n	800c514 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4e2:	f7ff fead 	bl	800c240 <xTaskGetSchedulerState>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d109      	bne.n	800c500 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4ec:	4b10      	ldr	r3, [pc, #64]	@ (800c530 <xTimerGenericCommand+0x98>)
 800c4ee:	6818      	ldr	r0, [r3, #0]
 800c4f0:	f107 0110 	add.w	r1, r7, #16
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4f8:	f7fe fc5a 	bl	800adb0 <xQueueGenericSend>
 800c4fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800c4fe:	e012      	b.n	800c526 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c500:	4b0b      	ldr	r3, [pc, #44]	@ (800c530 <xTimerGenericCommand+0x98>)
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	f107 0110 	add.w	r1, r7, #16
 800c508:	2300      	movs	r3, #0
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7fe fc50 	bl	800adb0 <xQueueGenericSend>
 800c510:	6278      	str	r0, [r7, #36]	@ 0x24
 800c512:	e008      	b.n	800c526 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c514:	4b06      	ldr	r3, [pc, #24]	@ (800c530 <xTimerGenericCommand+0x98>)
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	f107 0110 	add.w	r1, r7, #16
 800c51c:	2300      	movs	r3, #0
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	f7fe fd48 	bl	800afb4 <xQueueGenericSendFromISR>
 800c524:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3728      	adds	r7, #40	@ 0x28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	20001024 	.word	0x20001024

0800c534 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af02      	add	r7, sp, #8
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c53e:	4b23      	ldr	r3, [pc, #140]	@ (800c5cc <prvProcessExpiredTimer+0x98>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	3304      	adds	r3, #4
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fe fafb 	bl	800ab48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d023      	beq.n	800c5a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	699a      	ldr	r2, [r3, #24]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	18d1      	adds	r1, r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	683a      	ldr	r2, [r7, #0]
 800c56c:	6978      	ldr	r0, [r7, #20]
 800c56e:	f000 f8d5 	bl	800c71c <prvInsertTimerInActiveList>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d020      	beq.n	800c5ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c578:	2300      	movs	r3, #0
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	2300      	movs	r3, #0
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	2100      	movs	r1, #0
 800c582:	6978      	ldr	r0, [r7, #20]
 800c584:	f7ff ff88 	bl	800c498 <xTimerGenericCommand>
 800c588:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d114      	bne.n	800c5ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60fb      	str	r3, [r7, #12]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5ae:	f023 0301 	bic.w	r3, r3, #1
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	6a1b      	ldr	r3, [r3, #32]
 800c5be:	6978      	ldr	r0, [r7, #20]
 800c5c0:	4798      	blx	r3
}
 800c5c2:	bf00      	nop
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	2000101c 	.word	0x2000101c

0800c5d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5d8:	f107 0308 	add.w	r3, r7, #8
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f000 f859 	bl	800c694 <prvGetNextExpireTime>
 800c5e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f000 f805 	bl	800c5f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5ee:	f000 f8d7 	bl	800c7a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5f2:	bf00      	nop
 800c5f4:	e7f0      	b.n	800c5d8 <prvTimerTask+0x8>
	...

0800c5f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c602:	f7ff fa29 	bl	800ba58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c606:	f107 0308 	add.w	r3, r7, #8
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 f866 	bl	800c6dc <prvSampleTimeNow>
 800c610:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d130      	bne.n	800c67a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10a      	bne.n	800c634 <prvProcessTimerOrBlockTask+0x3c>
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	429a      	cmp	r2, r3
 800c624:	d806      	bhi.n	800c634 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c626:	f7ff fa25 	bl	800ba74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c62a:	68f9      	ldr	r1, [r7, #12]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ff81 	bl	800c534 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c632:	e024      	b.n	800c67e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d008      	beq.n	800c64c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c63a:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <prvProcessTimerOrBlockTask+0x90>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <prvProcessTimerOrBlockTask+0x50>
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <prvProcessTimerOrBlockTask+0x52>
 800c648:	2300      	movs	r3, #0
 800c64a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c64c:	4b0f      	ldr	r3, [pc, #60]	@ (800c68c <prvProcessTimerOrBlockTask+0x94>)
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	4619      	mov	r1, r3
 800c65a:	f7fe ff65 	bl	800b528 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c65e:	f7ff fa09 	bl	800ba74 <xTaskResumeAll>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10a      	bne.n	800c67e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <prvProcessTimerOrBlockTask+0x98>)
 800c66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	f3bf 8f6f 	isb	sy
}
 800c678:	e001      	b.n	800c67e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c67a:	f7ff f9fb 	bl	800ba74 <xTaskResumeAll>
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20001020 	.word	0x20001020
 800c68c:	20001024 	.word	0x20001024
 800c690:	e000ed04 	.word	0xe000ed04

0800c694 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c69c:	4b0e      	ldr	r3, [pc, #56]	@ (800c6d8 <prvGetNextExpireTime+0x44>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <prvGetNextExpireTime+0x16>
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	e000      	b.n	800c6ac <prvGetNextExpireTime+0x18>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d105      	bne.n	800c6c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b8:	4b07      	ldr	r3, [pc, #28]	@ (800c6d8 <prvGetNextExpireTime+0x44>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	e001      	b.n	800c6c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	2000101c 	.word	0x2000101c

0800c6dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6e4:	f7ff fa64 	bl	800bbb0 <xTaskGetTickCount>
 800c6e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c718 <prvSampleTimeNow+0x3c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d205      	bcs.n	800c700 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6f4:	f000 f93a 	bl	800c96c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	e002      	b.n	800c706 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c706:	4a04      	ldr	r2, [pc, #16]	@ (800c718 <prvSampleTimeNow+0x3c>)
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c70c:	68fb      	ldr	r3, [r7, #12]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	2000102c 	.word	0x2000102c

0800c71c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	68fa      	ldr	r2, [r7, #12]
 800c738:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d812      	bhi.n	800c768 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	1ad2      	subs	r2, r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	699b      	ldr	r3, [r3, #24]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d302      	bcc.n	800c756 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c750:	2301      	movs	r3, #1
 800c752:	617b      	str	r3, [r7, #20]
 800c754:	e01b      	b.n	800c78e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c756:	4b10      	ldr	r3, [pc, #64]	@ (800c798 <prvInsertTimerInActiveList+0x7c>)
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4619      	mov	r1, r3
 800c760:	4610      	mov	r0, r2
 800c762:	f7fe f9b8 	bl	800aad6 <vListInsert>
 800c766:	e012      	b.n	800c78e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d206      	bcs.n	800c77e <prvInsertTimerInActiveList+0x62>
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d302      	bcc.n	800c77e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c778:	2301      	movs	r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e007      	b.n	800c78e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c77e:	4b07      	ldr	r3, [pc, #28]	@ (800c79c <prvInsertTimerInActiveList+0x80>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fe f9a4 	bl	800aad6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c78e:	697b      	ldr	r3, [r7, #20]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3718      	adds	r7, #24
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20001020 	.word	0x20001020
 800c79c:	2000101c 	.word	0x2000101c

0800c7a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08e      	sub	sp, #56	@ 0x38
 800c7a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7a6:	e0ce      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	da19      	bge.n	800c7e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7ae:	1d3b      	adds	r3, r7, #4
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10b      	bne.n	800c7d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	61fb      	str	r3, [r7, #28]
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	e7fd      	b.n	800c7ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7d8:	6850      	ldr	r0, [r2, #4]
 800c7da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7dc:	6892      	ldr	r2, [r2, #8]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f2c0 80ae 	blt.w	800c946 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d004      	beq.n	800c800 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fe f9a4 	bl	800ab48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c800:	463b      	mov	r3, r7
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff ff6a 	bl	800c6dc <prvSampleTimeNow>
 800c808:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b09      	cmp	r3, #9
 800c80e:	f200 8097 	bhi.w	800c940 <prvProcessReceivedCommands+0x1a0>
 800c812:	a201      	add	r2, pc, #4	@ (adr r2, 800c818 <prvProcessReceivedCommands+0x78>)
 800c814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c818:	0800c841 	.word	0x0800c841
 800c81c:	0800c841 	.word	0x0800c841
 800c820:	0800c841 	.word	0x0800c841
 800c824:	0800c8b7 	.word	0x0800c8b7
 800c828:	0800c8cb 	.word	0x0800c8cb
 800c82c:	0800c917 	.word	0x0800c917
 800c830:	0800c841 	.word	0x0800c841
 800c834:	0800c841 	.word	0x0800c841
 800c838:	0800c8b7 	.word	0x0800c8b7
 800c83c:	0800c8cb 	.word	0x0800c8cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c846:	f043 0301 	orr.w	r3, r3, #1
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	18d1      	adds	r1, r2, r3
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c85e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c860:	f7ff ff5c 	bl	800c71c <prvInsertTimerInActiveList>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d06c      	beq.n	800c944 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c870:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d061      	beq.n	800c944 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	441a      	add	r2, r3
 800c888:	2300      	movs	r3, #0
 800c88a:	9300      	str	r3, [sp, #0]
 800c88c:	2300      	movs	r3, #0
 800c88e:	2100      	movs	r1, #0
 800c890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c892:	f7ff fe01 	bl	800c498 <xTimerGenericCommand>
 800c896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c898:	6a3b      	ldr	r3, [r7, #32]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d152      	bne.n	800c944 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	61bb      	str	r3, [r7, #24]
}
 800c8b0:	bf00      	nop
 800c8b2:	bf00      	nop
 800c8b4:	e7fd      	b.n	800c8b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8bc:	f023 0301 	bic.w	r3, r3, #1
 800c8c0:	b2da      	uxtb	r2, r3
 800c8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c8c8:	e03d      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8d0:	f043 0301 	orr.w	r3, r3, #1
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c8dc:	68ba      	ldr	r2, [r7, #8]
 800c8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10b      	bne.n	800c902 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	617b      	str	r3, [r7, #20]
}
 800c8fc:	bf00      	nop
 800c8fe:	bf00      	nop
 800c900:	e7fd      	b.n	800c8fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c904:	699a      	ldr	r2, [r3, #24]
 800c906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c908:	18d1      	adds	r1, r2, r3
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c90e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c910:	f7ff ff04 	bl	800c71c <prvInsertTimerInActiveList>
					break;
 800c914:	e017      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c918:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c91c:	f003 0302 	and.w	r3, r3, #2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d103      	bne.n	800c92c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c924:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c926:	f000 fbe7 	bl	800d0f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c92a:	e00c      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c932:	f023 0301 	bic.w	r3, r3, #1
 800c936:	b2da      	uxtb	r2, r3
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c93e:	e002      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c940:	bf00      	nop
 800c942:	e000      	b.n	800c946 <prvProcessReceivedCommands+0x1a6>
					break;
 800c944:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c946:	4b08      	ldr	r3, [pc, #32]	@ (800c968 <prvProcessReceivedCommands+0x1c8>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	1d39      	adds	r1, r7, #4
 800c94c:	2200      	movs	r2, #0
 800c94e:	4618      	mov	r0, r3
 800c950:	f7fe fbce 	bl	800b0f0 <xQueueReceive>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	f47f af26 	bne.w	800c7a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c95c:	bf00      	nop
 800c95e:	bf00      	nop
 800c960:	3730      	adds	r7, #48	@ 0x30
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20001024 	.word	0x20001024

0800c96c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c972:	e049      	b.n	800ca08 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c974:	4b2e      	ldr	r3, [pc, #184]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c97e:	4b2c      	ldr	r3, [pc, #176]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3304      	adds	r3, #4
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7fe f8db 	bl	800ab48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d02f      	beq.n	800ca08 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	699b      	ldr	r3, [r3, #24]
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d90e      	bls.n	800c9d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	68fa      	ldr	r2, [r7, #12]
 800c9c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9c6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fe f880 	bl	800aad6 <vListInsert>
 800c9d6:	e017      	b.n	800ca08 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff fd58 	bl	800c498 <xTimerGenericCommand>
 800c9e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10b      	bne.n	800ca08 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	603b      	str	r3, [r7, #0]
}
 800ca02:	bf00      	nop
 800ca04:	bf00      	nop
 800ca06:	e7fd      	b.n	800ca04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca08:	4b09      	ldr	r3, [pc, #36]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1b0      	bne.n	800c974 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca12:	4b07      	ldr	r3, [pc, #28]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca18:	4b06      	ldr	r3, [pc, #24]	@ (800ca34 <prvSwitchTimerLists+0xc8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a04      	ldr	r2, [pc, #16]	@ (800ca30 <prvSwitchTimerLists+0xc4>)
 800ca1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca20:	4a04      	ldr	r2, [pc, #16]	@ (800ca34 <prvSwitchTimerLists+0xc8>)
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	6013      	str	r3, [r2, #0]
}
 800ca26:	bf00      	nop
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2000101c 	.word	0x2000101c
 800ca34:	20001020 	.word	0x20001020

0800ca38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca3e:	f000 f96b 	bl	800cd18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca42:	4b15      	ldr	r3, [pc, #84]	@ (800ca98 <prvCheckForValidListAndQueue+0x60>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d120      	bne.n	800ca8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca4a:	4814      	ldr	r0, [pc, #80]	@ (800ca9c <prvCheckForValidListAndQueue+0x64>)
 800ca4c:	f7fd fff2 	bl	800aa34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca50:	4813      	ldr	r0, [pc, #76]	@ (800caa0 <prvCheckForValidListAndQueue+0x68>)
 800ca52:	f7fd ffef 	bl	800aa34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca56:	4b13      	ldr	r3, [pc, #76]	@ (800caa4 <prvCheckForValidListAndQueue+0x6c>)
 800ca58:	4a10      	ldr	r2, [pc, #64]	@ (800ca9c <prvCheckForValidListAndQueue+0x64>)
 800ca5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca5c:	4b12      	ldr	r3, [pc, #72]	@ (800caa8 <prvCheckForValidListAndQueue+0x70>)
 800ca5e:	4a10      	ldr	r2, [pc, #64]	@ (800caa0 <prvCheckForValidListAndQueue+0x68>)
 800ca60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca62:	2300      	movs	r3, #0
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	4b11      	ldr	r3, [pc, #68]	@ (800caac <prvCheckForValidListAndQueue+0x74>)
 800ca68:	4a11      	ldr	r2, [pc, #68]	@ (800cab0 <prvCheckForValidListAndQueue+0x78>)
 800ca6a:	2110      	movs	r1, #16
 800ca6c:	200a      	movs	r0, #10
 800ca6e:	f7fe f8ff 	bl	800ac70 <xQueueGenericCreateStatic>
 800ca72:	4603      	mov	r3, r0
 800ca74:	4a08      	ldr	r2, [pc, #32]	@ (800ca98 <prvCheckForValidListAndQueue+0x60>)
 800ca76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca78:	4b07      	ldr	r3, [pc, #28]	@ (800ca98 <prvCheckForValidListAndQueue+0x60>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca80:	4b05      	ldr	r3, [pc, #20]	@ (800ca98 <prvCheckForValidListAndQueue+0x60>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	490b      	ldr	r1, [pc, #44]	@ (800cab4 <prvCheckForValidListAndQueue+0x7c>)
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fe fd24 	bl	800b4d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca8c:	f000 f976 	bl	800cd7c <vPortExitCritical>
}
 800ca90:	bf00      	nop
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	20001024 	.word	0x20001024
 800ca9c:	20000ff4 	.word	0x20000ff4
 800caa0:	20001008 	.word	0x20001008
 800caa4:	2000101c 	.word	0x2000101c
 800caa8:	20001020 	.word	0x20001020
 800caac:	200010d0 	.word	0x200010d0
 800cab0:	20001030 	.word	0x20001030
 800cab4:	0800e510 	.word	0x0800e510

0800cab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cab8:	b480      	push	{r7}
 800caba:	b085      	sub	sp, #20
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	3b04      	subs	r3, #4
 800cac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3b04      	subs	r3, #4
 800cad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	f023 0201 	bic.w	r2, r3, #1
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b04      	subs	r3, #4
 800cae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cae8:	4a0c      	ldr	r2, [pc, #48]	@ (800cb1c <pxPortInitialiseStack+0x64>)
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3b14      	subs	r3, #20
 800caf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3b04      	subs	r3, #4
 800cafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f06f 0202 	mvn.w	r2, #2
 800cb06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	3b20      	subs	r3, #32
 800cb0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	0800cb21 	.word	0x0800cb21

0800cb20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb2a:	4b13      	ldr	r3, [pc, #76]	@ (800cb78 <prvTaskExitError+0x58>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb32:	d00b      	beq.n	800cb4c <prvTaskExitError+0x2c>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	60fb      	str	r3, [r7, #12]
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	e7fd      	b.n	800cb48 <prvTaskExitError+0x28>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	60bb      	str	r3, [r7, #8]
}
 800cb5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb60:	bf00      	nop
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0fc      	beq.n	800cb62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	3714      	adds	r7, #20
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	200000b8 	.word	0x200000b8
 800cb7c:	00000000 	.word	0x00000000

0800cb80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb80:	4b07      	ldr	r3, [pc, #28]	@ (800cba0 <pxCurrentTCBConst2>)
 800cb82:	6819      	ldr	r1, [r3, #0]
 800cb84:	6808      	ldr	r0, [r1, #0]
 800cb86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb8a:	f380 8809 	msr	PSP, r0
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f04f 0000 	mov.w	r0, #0
 800cb96:	f380 8811 	msr	BASEPRI, r0
 800cb9a:	4770      	bx	lr
 800cb9c:	f3af 8000 	nop.w

0800cba0 <pxCurrentTCBConst2>:
 800cba0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cba4:	bf00      	nop
 800cba6:	bf00      	nop

0800cba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cba8:	4808      	ldr	r0, [pc, #32]	@ (800cbcc <prvPortStartFirstTask+0x24>)
 800cbaa:	6800      	ldr	r0, [r0, #0]
 800cbac:	6800      	ldr	r0, [r0, #0]
 800cbae:	f380 8808 	msr	MSP, r0
 800cbb2:	f04f 0000 	mov.w	r0, #0
 800cbb6:	f380 8814 	msr	CONTROL, r0
 800cbba:	b662      	cpsie	i
 800cbbc:	b661      	cpsie	f
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	f3bf 8f6f 	isb	sy
 800cbc6:	df00      	svc	0
 800cbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbca:	bf00      	nop
 800cbcc:	e000ed08 	.word	0xe000ed08

0800cbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbd6:	4b47      	ldr	r3, [pc, #284]	@ (800ccf4 <xPortStartScheduler+0x124>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a47      	ldr	r2, [pc, #284]	@ (800ccf8 <xPortStartScheduler+0x128>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d10b      	bne.n	800cbf8 <xPortStartScheduler+0x28>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	613b      	str	r3, [r7, #16]
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	e7fd      	b.n	800cbf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cbf8:	4b3e      	ldr	r3, [pc, #248]	@ (800ccf4 <xPortStartScheduler+0x124>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a3f      	ldr	r2, [pc, #252]	@ (800ccfc <xPortStartScheduler+0x12c>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d10b      	bne.n	800cc1a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	60fb      	str	r3, [r7, #12]
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop
 800cc18:	e7fd      	b.n	800cc16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc1a:	4b39      	ldr	r3, [pc, #228]	@ (800cd00 <xPortStartScheduler+0x130>)
 800cc1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b2db      	uxtb	r3, r3
 800cc24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	22ff      	movs	r2, #255	@ 0xff
 800cc2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc34:	78fb      	ldrb	r3, [r7, #3]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cc3c:	b2da      	uxtb	r2, r3
 800cc3e:	4b31      	ldr	r3, [pc, #196]	@ (800cd04 <xPortStartScheduler+0x134>)
 800cc40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc42:	4b31      	ldr	r3, [pc, #196]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc44:	2207      	movs	r2, #7
 800cc46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc48:	e009      	b.n	800cc5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cc4a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	4a2d      	ldr	r2, [pc, #180]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	005b      	lsls	r3, r3, #1
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc5e:	78fb      	ldrb	r3, [r7, #3]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc66:	2b80      	cmp	r3, #128	@ 0x80
 800cc68:	d0ef      	beq.n	800cc4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc6a:	4b27      	ldr	r3, [pc, #156]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f1c3 0307 	rsb	r3, r3, #7
 800cc72:	2b04      	cmp	r3, #4
 800cc74:	d00b      	beq.n	800cc8e <xPortStartScheduler+0xbe>
	__asm volatile
 800cc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7a:	f383 8811 	msr	BASEPRI, r3
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f3bf 8f4f 	dsb	sy
 800cc86:	60bb      	str	r3, [r7, #8]
}
 800cc88:	bf00      	nop
 800cc8a:	bf00      	nop
 800cc8c:	e7fd      	b.n	800cc8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc8e:	4b1e      	ldr	r3, [pc, #120]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	021b      	lsls	r3, r3, #8
 800cc94:	4a1c      	ldr	r2, [pc, #112]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc98:	4b1b      	ldr	r3, [pc, #108]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cca0:	4a19      	ldr	r2, [pc, #100]	@ (800cd08 <xPortStartScheduler+0x138>)
 800cca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	b2da      	uxtb	r2, r3
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccac:	4b17      	ldr	r3, [pc, #92]	@ (800cd0c <xPortStartScheduler+0x13c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a16      	ldr	r2, [pc, #88]	@ (800cd0c <xPortStartScheduler+0x13c>)
 800ccb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ccb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccb8:	4b14      	ldr	r3, [pc, #80]	@ (800cd0c <xPortStartScheduler+0x13c>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a13      	ldr	r2, [pc, #76]	@ (800cd0c <xPortStartScheduler+0x13c>)
 800ccbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ccc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccc4:	f000 f8da 	bl	800ce7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccc8:	4b11      	ldr	r3, [pc, #68]	@ (800cd10 <xPortStartScheduler+0x140>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccce:	f000 f8f9 	bl	800cec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccd2:	4b10      	ldr	r3, [pc, #64]	@ (800cd14 <xPortStartScheduler+0x144>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a0f      	ldr	r2, [pc, #60]	@ (800cd14 <xPortStartScheduler+0x144>)
 800ccd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ccdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ccde:	f7ff ff63 	bl	800cba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cce2:	f7ff f82f 	bl	800bd44 <vTaskSwitchContext>
	prvTaskExitError();
 800cce6:	f7ff ff1b 	bl	800cb20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	e000ed00 	.word	0xe000ed00
 800ccf8:	410fc271 	.word	0x410fc271
 800ccfc:	410fc270 	.word	0x410fc270
 800cd00:	e000e400 	.word	0xe000e400
 800cd04:	20001120 	.word	0x20001120
 800cd08:	20001124 	.word	0x20001124
 800cd0c:	e000ed20 	.word	0xe000ed20
 800cd10:	200000b8 	.word	0x200000b8
 800cd14:	e000ef34 	.word	0xe000ef34

0800cd18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd32:	4b10      	ldr	r3, [pc, #64]	@ (800cd74 <vPortEnterCritical+0x5c>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	3301      	adds	r3, #1
 800cd38:	4a0e      	ldr	r2, [pc, #56]	@ (800cd74 <vPortEnterCritical+0x5c>)
 800cd3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd74 <vPortEnterCritical+0x5c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d110      	bne.n	800cd66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd44:	4b0c      	ldr	r3, [pc, #48]	@ (800cd78 <vPortEnterCritical+0x60>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00b      	beq.n	800cd66 <vPortEnterCritical+0x4e>
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	603b      	str	r3, [r7, #0]
}
 800cd60:	bf00      	nop
 800cd62:	bf00      	nop
 800cd64:	e7fd      	b.n	800cd62 <vPortEnterCritical+0x4a>
	}
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	200000b8 	.word	0x200000b8
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd82:	4b12      	ldr	r3, [pc, #72]	@ (800cdcc <vPortExitCritical+0x50>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10b      	bne.n	800cda2 <vPortExitCritical+0x26>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	607b      	str	r3, [r7, #4]
}
 800cd9c:	bf00      	nop
 800cd9e:	bf00      	nop
 800cda0:	e7fd      	b.n	800cd9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cda2:	4b0a      	ldr	r3, [pc, #40]	@ (800cdcc <vPortExitCritical+0x50>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4a08      	ldr	r2, [pc, #32]	@ (800cdcc <vPortExitCritical+0x50>)
 800cdaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdac:	4b07      	ldr	r3, [pc, #28]	@ (800cdcc <vPortExitCritical+0x50>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d105      	bne.n	800cdc0 <vPortExitCritical+0x44>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	f383 8811 	msr	BASEPRI, r3
}
 800cdbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	200000b8 	.word	0x200000b8

0800cdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdd0:	f3ef 8009 	mrs	r0, PSP
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4b15      	ldr	r3, [pc, #84]	@ (800ce30 <pxCurrentTCBConst>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	f01e 0f10 	tst.w	lr, #16
 800cde0:	bf08      	it	eq
 800cde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	6010      	str	r0, [r2, #0]
 800cdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cdf4:	f380 8811 	msr	BASEPRI, r0
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f7fe ffa0 	bl	800bd44 <vTaskSwitchContext>
 800ce04:	f04f 0000 	mov.w	r0, #0
 800ce08:	f380 8811 	msr	BASEPRI, r0
 800ce0c:	bc09      	pop	{r0, r3}
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	6808      	ldr	r0, [r1, #0]
 800ce12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce16:	f01e 0f10 	tst.w	lr, #16
 800ce1a:	bf08      	it	eq
 800ce1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce20:	f380 8809 	msr	PSP, r0
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w

0800ce30 <pxCurrentTCBConst>:
 800ce30:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	607b      	str	r3, [r7, #4]
}
 800ce50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce52:	f7fe febd 	bl	800bbd0 <xTaskIncrementTick>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d003      	beq.n	800ce64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce5c:	4b06      	ldr	r3, [pc, #24]	@ (800ce78 <xPortSysTickHandler+0x40>)
 800ce5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce62:	601a      	str	r2, [r3, #0]
 800ce64:	2300      	movs	r3, #0
 800ce66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	f383 8811 	msr	BASEPRI, r3
}
 800ce6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	e000ed04 	.word	0xe000ed04

0800ce7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce80:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb0 <vPortSetupTimerInterrupt+0x34>)
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce86:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb4 <vPortSetupTimerInterrupt+0x38>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ceb8 <vPortSetupTimerInterrupt+0x3c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4a0a      	ldr	r2, [pc, #40]	@ (800cebc <vPortSetupTimerInterrupt+0x40>)
 800ce92:	fba2 2303 	umull	r2, r3, r2, r3
 800ce96:	099b      	lsrs	r3, r3, #6
 800ce98:	4a09      	ldr	r2, [pc, #36]	@ (800cec0 <vPortSetupTimerInterrupt+0x44>)
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce9e:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <vPortSetupTimerInterrupt+0x34>)
 800cea0:	2207      	movs	r2, #7
 800cea2:	601a      	str	r2, [r3, #0]
}
 800cea4:	bf00      	nop
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	e000e010 	.word	0xe000e010
 800ceb4:	e000e018 	.word	0xe000e018
 800ceb8:	20000020 	.word	0x20000020
 800cebc:	10624dd3 	.word	0x10624dd3
 800cec0:	e000e014 	.word	0xe000e014

0800cec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ced4 <vPortEnableVFP+0x10>
 800cec8:	6801      	ldr	r1, [r0, #0]
 800ceca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cece:	6001      	str	r1, [r0, #0]
 800ced0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ced2:	bf00      	nop
 800ced4:	e000ed88 	.word	0xe000ed88

0800ced8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cede:	f3ef 8305 	mrs	r3, IPSR
 800cee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2b0f      	cmp	r3, #15
 800cee8:	d915      	bls.n	800cf16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ceea:	4a18      	ldr	r2, [pc, #96]	@ (800cf4c <vPortValidateInterruptPriority+0x74>)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	4413      	add	r3, r2
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cef4:	4b16      	ldr	r3, [pc, #88]	@ (800cf50 <vPortValidateInterruptPriority+0x78>)
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	7afa      	ldrb	r2, [r7, #11]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d20b      	bcs.n	800cf16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	607b      	str	r3, [r7, #4]
}
 800cf10:	bf00      	nop
 800cf12:	bf00      	nop
 800cf14:	e7fd      	b.n	800cf12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf16:	4b0f      	ldr	r3, [pc, #60]	@ (800cf54 <vPortValidateInterruptPriority+0x7c>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf58 <vPortValidateInterruptPriority+0x80>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d90b      	bls.n	800cf3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	603b      	str	r3, [r7, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	bf00      	nop
 800cf3c:	e7fd      	b.n	800cf3a <vPortValidateInterruptPriority+0x62>
	}
 800cf3e:	bf00      	nop
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	e000e3f0 	.word	0xe000e3f0
 800cf50:	20001120 	.word	0x20001120
 800cf54:	e000ed0c 	.word	0xe000ed0c
 800cf58:	20001124 	.word	0x20001124

0800cf5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b08a      	sub	sp, #40	@ 0x28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf64:	2300      	movs	r3, #0
 800cf66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf68:	f7fe fd76 	bl	800ba58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf6c:	4b5c      	ldr	r3, [pc, #368]	@ (800d0e0 <pvPortMalloc+0x184>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf74:	f000 f924 	bl	800d1c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf78:	4b5a      	ldr	r3, [pc, #360]	@ (800d0e4 <pvPortMalloc+0x188>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4013      	ands	r3, r2
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f040 8095 	bne.w	800d0b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01e      	beq.n	800cfca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cf8c:	2208      	movs	r2, #8
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4413      	add	r3, r2
 800cf92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f003 0307 	and.w	r3, r3, #7
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d015      	beq.n	800cfca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f023 0307 	bic.w	r3, r3, #7
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f003 0307 	and.w	r3, r3, #7
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00b      	beq.n	800cfca <pvPortMalloc+0x6e>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	617b      	str	r3, [r7, #20]
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop
 800cfc8:	e7fd      	b.n	800cfc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d06f      	beq.n	800d0b0 <pvPortMalloc+0x154>
 800cfd0:	4b45      	ldr	r3, [pc, #276]	@ (800d0e8 <pvPortMalloc+0x18c>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d86a      	bhi.n	800d0b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfda:	4b44      	ldr	r3, [pc, #272]	@ (800d0ec <pvPortMalloc+0x190>)
 800cfdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfde:	4b43      	ldr	r3, [pc, #268]	@ (800d0ec <pvPortMalloc+0x190>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfe4:	e004      	b.n	800cff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d903      	bls.n	800d002 <pvPortMalloc+0xa6>
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1f1      	bne.n	800cfe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d002:	4b37      	ldr	r3, [pc, #220]	@ (800d0e0 <pvPortMalloc+0x184>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d008:	429a      	cmp	r2, r3
 800d00a:	d051      	beq.n	800d0b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2208      	movs	r2, #8
 800d012:	4413      	add	r3, r2
 800d014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d020:	685a      	ldr	r2, [r3, #4]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	1ad2      	subs	r2, r2, r3
 800d026:	2308      	movs	r3, #8
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d920      	bls.n	800d070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d02e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4413      	add	r3, r2
 800d034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	f003 0307 	and.w	r3, r3, #7
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <pvPortMalloc+0xfc>
	__asm volatile
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	613b      	str	r3, [r7, #16]
}
 800d052:	bf00      	nop
 800d054:	bf00      	nop
 800d056:	e7fd      	b.n	800d054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	1ad2      	subs	r2, r2, r3
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d06a:	69b8      	ldr	r0, [r7, #24]
 800d06c:	f000 f90a 	bl	800d284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d070:	4b1d      	ldr	r3, [pc, #116]	@ (800d0e8 <pvPortMalloc+0x18c>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	4a1b      	ldr	r2, [pc, #108]	@ (800d0e8 <pvPortMalloc+0x18c>)
 800d07c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d07e:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e8 <pvPortMalloc+0x18c>)
 800d080:	681a      	ldr	r2, [r3, #0]
 800d082:	4b1b      	ldr	r3, [pc, #108]	@ (800d0f0 <pvPortMalloc+0x194>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d203      	bcs.n	800d092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d08a:	4b17      	ldr	r3, [pc, #92]	@ (800d0e8 <pvPortMalloc+0x18c>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a18      	ldr	r2, [pc, #96]	@ (800d0f0 <pvPortMalloc+0x194>)
 800d090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	4b13      	ldr	r3, [pc, #76]	@ (800d0e4 <pvPortMalloc+0x188>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0a6:	4b13      	ldr	r3, [pc, #76]	@ (800d0f4 <pvPortMalloc+0x198>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	4a11      	ldr	r2, [pc, #68]	@ (800d0f4 <pvPortMalloc+0x198>)
 800d0ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0b0:	f7fe fce0 	bl	800ba74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00b      	beq.n	800d0d6 <pvPortMalloc+0x17a>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	60fb      	str	r3, [r7, #12]
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	e7fd      	b.n	800d0d2 <pvPortMalloc+0x176>
	return pvReturn;
 800d0d6:	69fb      	ldr	r3, [r7, #28]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3728      	adds	r7, #40	@ 0x28
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20004d30 	.word	0x20004d30
 800d0e4:	20004d44 	.word	0x20004d44
 800d0e8:	20004d34 	.word	0x20004d34
 800d0ec:	20004d28 	.word	0x20004d28
 800d0f0:	20004d38 	.word	0x20004d38
 800d0f4:	20004d3c 	.word	0x20004d3c

0800d0f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d04f      	beq.n	800d1aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d10a:	2308      	movs	r3, #8
 800d10c:	425b      	negs	r3, r3
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	4413      	add	r3, r2
 800d112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	4b25      	ldr	r3, [pc, #148]	@ (800d1b4 <vPortFree+0xbc>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4013      	ands	r3, r2
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10b      	bne.n	800d13e <vPortFree+0x46>
	__asm volatile
 800d126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12a:	f383 8811 	msr	BASEPRI, r3
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f3bf 8f4f 	dsb	sy
 800d136:	60fb      	str	r3, [r7, #12]
}
 800d138:	bf00      	nop
 800d13a:	bf00      	nop
 800d13c:	e7fd      	b.n	800d13a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00b      	beq.n	800d15e <vPortFree+0x66>
	__asm volatile
 800d146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14a:	f383 8811 	msr	BASEPRI, r3
 800d14e:	f3bf 8f6f 	isb	sy
 800d152:	f3bf 8f4f 	dsb	sy
 800d156:	60bb      	str	r3, [r7, #8]
}
 800d158:	bf00      	nop
 800d15a:	bf00      	nop
 800d15c:	e7fd      	b.n	800d15a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	685a      	ldr	r2, [r3, #4]
 800d162:	4b14      	ldr	r3, [pc, #80]	@ (800d1b4 <vPortFree+0xbc>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4013      	ands	r3, r2
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d01e      	beq.n	800d1aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d11a      	bne.n	800d1aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	4b0e      	ldr	r3, [pc, #56]	@ (800d1b4 <vPortFree+0xbc>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	43db      	mvns	r3, r3
 800d17e:	401a      	ands	r2, r3
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d184:	f7fe fc68 	bl	800ba58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b8 <vPortFree+0xc0>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4413      	add	r3, r2
 800d192:	4a09      	ldr	r2, [pc, #36]	@ (800d1b8 <vPortFree+0xc0>)
 800d194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d196:	6938      	ldr	r0, [r7, #16]
 800d198:	f000 f874 	bl	800d284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <vPortFree+0xc4>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	4a06      	ldr	r2, [pc, #24]	@ (800d1bc <vPortFree+0xc4>)
 800d1a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1a6:	f7fe fc65 	bl	800ba74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1aa:	bf00      	nop
 800d1ac:	3718      	adds	r7, #24
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	20004d44 	.word	0x20004d44
 800d1b8:	20004d34 	.word	0x20004d34
 800d1bc:	20004d40 	.word	0x20004d40

0800d1c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d1ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1cc:	4b27      	ldr	r3, [pc, #156]	@ (800d26c <prvHeapInit+0xac>)
 800d1ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f003 0307 	and.w	r3, r3, #7
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00c      	beq.n	800d1f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	3307      	adds	r3, #7
 800d1de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f023 0307 	bic.w	r3, r3, #7
 800d1e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	1ad3      	subs	r3, r2, r3
 800d1ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d26c <prvHeapInit+0xac>)
 800d1f0:	4413      	add	r3, r2
 800d1f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d270 <prvHeapInit+0xb0>)
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d270 <prvHeapInit+0xb0>)
 800d200:	2200      	movs	r2, #0
 800d202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	4413      	add	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d20c:	2208      	movs	r2, #8
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	1a9b      	subs	r3, r3, r2
 800d212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0307 	bic.w	r3, r3, #7
 800d21a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	4a15      	ldr	r2, [pc, #84]	@ (800d274 <prvHeapInit+0xb4>)
 800d220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d222:	4b14      	ldr	r3, [pc, #80]	@ (800d274 <prvHeapInit+0xb4>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2200      	movs	r2, #0
 800d228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d22a:	4b12      	ldr	r3, [pc, #72]	@ (800d274 <prvHeapInit+0xb4>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2200      	movs	r2, #0
 800d230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	1ad2      	subs	r2, r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d240:	4b0c      	ldr	r3, [pc, #48]	@ (800d274 <prvHeapInit+0xb4>)
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	4a0a      	ldr	r2, [pc, #40]	@ (800d278 <prvHeapInit+0xb8>)
 800d24e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	4a09      	ldr	r2, [pc, #36]	@ (800d27c <prvHeapInit+0xbc>)
 800d256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d258:	4b09      	ldr	r3, [pc, #36]	@ (800d280 <prvHeapInit+0xc0>)
 800d25a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d25e:	601a      	str	r2, [r3, #0]
}
 800d260:	bf00      	nop
 800d262:	3714      	adds	r7, #20
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	20001128 	.word	0x20001128
 800d270:	20004d28 	.word	0x20004d28
 800d274:	20004d30 	.word	0x20004d30
 800d278:	20004d38 	.word	0x20004d38
 800d27c:	20004d34 	.word	0x20004d34
 800d280:	20004d44 	.word	0x20004d44

0800d284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d284:	b480      	push	{r7}
 800d286:	b085      	sub	sp, #20
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d28c:	4b28      	ldr	r3, [pc, #160]	@ (800d330 <prvInsertBlockIntoFreeList+0xac>)
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	e002      	b.n	800d298 <prvInsertBlockIntoFreeList+0x14>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d8f7      	bhi.n	800d292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	687a      	ldr	r2, [r7, #4]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d108      	bne.n	800d2c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685a      	ldr	r2, [r3, #4]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	441a      	add	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	441a      	add	r2, r3
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d118      	bne.n	800d30c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	4b15      	ldr	r3, [pc, #84]	@ (800d334 <prvInsertBlockIntoFreeList+0xb0>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d00d      	beq.n	800d302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	441a      	add	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	681a      	ldr	r2, [r3, #0]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	601a      	str	r2, [r3, #0]
 800d300:	e008      	b.n	800d314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d302:	4b0c      	ldr	r3, [pc, #48]	@ (800d334 <prvInsertBlockIntoFreeList+0xb0>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	601a      	str	r2, [r3, #0]
 800d30a:	e003      	b.n	800d314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d002      	beq.n	800d322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d322:	bf00      	nop
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr
 800d32e:	bf00      	nop
 800d330:	20004d28 	.word	0x20004d28
 800d334:	20004d30 	.word	0x20004d30

0800d338 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d33c:	2200      	movs	r2, #0
 800d33e:	4912      	ldr	r1, [pc, #72]	@ (800d388 <MX_USB_DEVICE_Init+0x50>)
 800d340:	4812      	ldr	r0, [pc, #72]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d342:	f7fb ff11 	bl	8009168 <USBD_Init>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d34c:	f7f4 fd80 	bl	8001e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d350:	490f      	ldr	r1, [pc, #60]	@ (800d390 <MX_USB_DEVICE_Init+0x58>)
 800d352:	480e      	ldr	r0, [pc, #56]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d354:	f7fb ff38 	bl	80091c8 <USBD_RegisterClass>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d35e:	f7f4 fd77 	bl	8001e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d362:	490c      	ldr	r1, [pc, #48]	@ (800d394 <MX_USB_DEVICE_Init+0x5c>)
 800d364:	4809      	ldr	r0, [pc, #36]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d366:	f7fb fe2f 	bl	8008fc8 <USBD_CDC_RegisterInterface>
 800d36a:	4603      	mov	r3, r0
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d001      	beq.n	800d374 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d370:	f7f4 fd6e 	bl	8001e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d374:	4805      	ldr	r0, [pc, #20]	@ (800d38c <MX_USB_DEVICE_Init+0x54>)
 800d376:	f7fb ff5d 	bl	8009234 <USBD_Start>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d380:	f7f4 fd66 	bl	8001e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d384:	bf00      	nop
 800d386:	bd80      	pop	{r7, pc}
 800d388:	200000d0 	.word	0x200000d0
 800d38c:	20004d48 	.word	0x20004d48
 800d390:	20000038 	.word	0x20000038
 800d394:	200000bc 	.word	0x200000bc

0800d398 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d39c:	2200      	movs	r2, #0
 800d39e:	4905      	ldr	r1, [pc, #20]	@ (800d3b4 <CDC_Init_FS+0x1c>)
 800d3a0:	4805      	ldr	r0, [pc, #20]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3a2:	f7fb fe2b 	bl	8008ffc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d3a6:	4905      	ldr	r1, [pc, #20]	@ (800d3bc <CDC_Init_FS+0x24>)
 800d3a8:	4803      	ldr	r0, [pc, #12]	@ (800d3b8 <CDC_Init_FS+0x20>)
 800d3aa:	f7fb fe49 	bl	8009040 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d3ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	20005424 	.word	0x20005424
 800d3b8:	20004d48 	.word	0x20004d48
 800d3bc:	20005024 	.word	0x20005024

0800d3c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	6039      	str	r1, [r7, #0]
 800d3da:	71fb      	strb	r3, [r7, #7]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	2b23      	cmp	r3, #35	@ 0x23
 800d3e4:	d84a      	bhi.n	800d47c <CDC_Control_FS+0xac>
 800d3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <CDC_Control_FS+0x1c>)
 800d3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ec:	0800d47d 	.word	0x0800d47d
 800d3f0:	0800d47d 	.word	0x0800d47d
 800d3f4:	0800d47d 	.word	0x0800d47d
 800d3f8:	0800d47d 	.word	0x0800d47d
 800d3fc:	0800d47d 	.word	0x0800d47d
 800d400:	0800d47d 	.word	0x0800d47d
 800d404:	0800d47d 	.word	0x0800d47d
 800d408:	0800d47d 	.word	0x0800d47d
 800d40c:	0800d47d 	.word	0x0800d47d
 800d410:	0800d47d 	.word	0x0800d47d
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d47d 	.word	0x0800d47d
 800d41c:	0800d47d 	.word	0x0800d47d
 800d420:	0800d47d 	.word	0x0800d47d
 800d424:	0800d47d 	.word	0x0800d47d
 800d428:	0800d47d 	.word	0x0800d47d
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d47d 	.word	0x0800d47d
 800d434:	0800d47d 	.word	0x0800d47d
 800d438:	0800d47d 	.word	0x0800d47d
 800d43c:	0800d47d 	.word	0x0800d47d
 800d440:	0800d47d 	.word	0x0800d47d
 800d444:	0800d47d 	.word	0x0800d47d
 800d448:	0800d47d 	.word	0x0800d47d
 800d44c:	0800d47d 	.word	0x0800d47d
 800d450:	0800d47d 	.word	0x0800d47d
 800d454:	0800d47d 	.word	0x0800d47d
 800d458:	0800d47d 	.word	0x0800d47d
 800d45c:	0800d47d 	.word	0x0800d47d
 800d460:	0800d47d 	.word	0x0800d47d
 800d464:	0800d47d 	.word	0x0800d47d
 800d468:	0800d47d 	.word	0x0800d47d
 800d46c:	0800d47d 	.word	0x0800d47d
 800d470:	0800d47d 	.word	0x0800d47d
 800d474:	0800d47d 	.word	0x0800d47d
 800d478:	0800d47d 	.word	0x0800d47d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d47c:	bf00      	nop
  }

  return (USBD_OK);
 800d47e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d480:	4618      	mov	r0, r3
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr

0800d48c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	4805      	ldr	r0, [pc, #20]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d49a:	f7fb fdd1 	bl	8009040 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d49e:	4804      	ldr	r0, [pc, #16]	@ (800d4b0 <CDC_Receive_FS+0x24>)
 800d4a0:	f7fb fe2c 	bl	80090fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d4a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20004d48 	.word	0x20004d48

0800d4b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d4c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d4ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d001      	beq.n	800d4da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e00b      	b.n	800d4f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d4da:	887b      	ldrh	r3, [r7, #2]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	6879      	ldr	r1, [r7, #4]
 800d4e0:	4806      	ldr	r0, [pc, #24]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4e2:	f7fb fd8b 	bl	8008ffc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d4e6:	4805      	ldr	r0, [pc, #20]	@ (800d4fc <CDC_Transmit_FS+0x48>)
 800d4e8:	f7fb fdc8 	bl	800907c <USBD_CDC_TransmitPacket>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20004d48 	.word	0x20004d48

0800d500 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	4613      	mov	r3, r2
 800d50c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d50e:	2300      	movs	r3, #0
 800d510:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d516:	4618      	mov	r0, r3
 800d518:	371c      	adds	r7, #28
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	6039      	str	r1, [r7, #0]
 800d52e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2212      	movs	r2, #18
 800d534:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d536:	4b03      	ldr	r3, [pc, #12]	@ (800d544 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr
 800d544:	200000ec 	.word	0x200000ec

0800d548 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d548:	b480      	push	{r7}
 800d54a:	b083      	sub	sp, #12
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2204      	movs	r2, #4
 800d558:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d55a:	4b03      	ldr	r3, [pc, #12]	@ (800d568 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	20000100 	.word	0x20000100

0800d56c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	4603      	mov	r3, r0
 800d574:	6039      	str	r1, [r7, #0]
 800d576:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d578:	79fb      	ldrb	r3, [r7, #7]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d105      	bne.n	800d58a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d57e:	683a      	ldr	r2, [r7, #0]
 800d580:	4907      	ldr	r1, [pc, #28]	@ (800d5a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d582:	4808      	ldr	r0, [pc, #32]	@ (800d5a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d584:	f7fd f806 	bl	800a594 <USBD_GetString>
 800d588:	e004      	b.n	800d594 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	4904      	ldr	r1, [pc, #16]	@ (800d5a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800d58e:	4805      	ldr	r0, [pc, #20]	@ (800d5a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800d590:	f7fd f800 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d594:	4b02      	ldr	r3, [pc, #8]	@ (800d5a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20005824 	.word	0x20005824
 800d5a4:	0800e518 	.word	0x0800e518

0800d5a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	6039      	str	r1, [r7, #0]
 800d5b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d5b4:	683a      	ldr	r2, [r7, #0]
 800d5b6:	4904      	ldr	r1, [pc, #16]	@ (800d5c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d5b8:	4804      	ldr	r0, [pc, #16]	@ (800d5cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d5ba:	f7fc ffeb 	bl	800a594 <USBD_GetString>
  return USBD_StrDesc;
 800d5be:	4b02      	ldr	r3, [pc, #8]	@ (800d5c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	20005824 	.word	0x20005824
 800d5cc:	0800e530 	.word	0x0800e530

0800d5d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	221a      	movs	r2, #26
 800d5e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d5e2:	f000 f843 	bl	800d66c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d5e6:	4b02      	ldr	r3, [pc, #8]	@ (800d5f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	20000104 	.word	0x20000104

0800d5f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d600:	79fb      	ldrb	r3, [r7, #7]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d105      	bne.n	800d612 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	4907      	ldr	r1, [pc, #28]	@ (800d628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d60a:	4808      	ldr	r0, [pc, #32]	@ (800d62c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d60c:	f7fc ffc2 	bl	800a594 <USBD_GetString>
 800d610:	e004      	b.n	800d61c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	4904      	ldr	r1, [pc, #16]	@ (800d628 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d616:	4805      	ldr	r0, [pc, #20]	@ (800d62c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d618:	f7fc ffbc 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d61c:	4b02      	ldr	r3, [pc, #8]	@ (800d628 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3708      	adds	r7, #8
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20005824 	.word	0x20005824
 800d62c:	0800e544 	.word	0x0800e544

0800d630 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	6039      	str	r1, [r7, #0]
 800d63a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d105      	bne.n	800d64e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	4907      	ldr	r1, [pc, #28]	@ (800d664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d646:	4808      	ldr	r0, [pc, #32]	@ (800d668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d648:	f7fc ffa4 	bl	800a594 <USBD_GetString>
 800d64c:	e004      	b.n	800d658 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	4904      	ldr	r1, [pc, #16]	@ (800d664 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d652:	4805      	ldr	r0, [pc, #20]	@ (800d668 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d654:	f7fc ff9e 	bl	800a594 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d658:	4b02      	ldr	r3, [pc, #8]	@ (800d664 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20005824 	.word	0x20005824
 800d668:	0800e550 	.word	0x0800e550

0800d66c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d672:	4b0f      	ldr	r3, [pc, #60]	@ (800d6b0 <Get_SerialNum+0x44>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d678:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b4 <Get_SerialNum+0x48>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d67e:	4b0e      	ldr	r3, [pc, #56]	@ (800d6b8 <Get_SerialNum+0x4c>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4413      	add	r3, r2
 800d68a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d009      	beq.n	800d6a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d692:	2208      	movs	r2, #8
 800d694:	4909      	ldr	r1, [pc, #36]	@ (800d6bc <Get_SerialNum+0x50>)
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 f814 	bl	800d6c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d69c:	2204      	movs	r2, #4
 800d69e:	4908      	ldr	r1, [pc, #32]	@ (800d6c0 <Get_SerialNum+0x54>)
 800d6a0:	68b8      	ldr	r0, [r7, #8]
 800d6a2:	f000 f80f 	bl	800d6c4 <IntToUnicode>
  }
}
 800d6a6:	bf00      	nop
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	1fff7a10 	.word	0x1fff7a10
 800d6b4:	1fff7a14 	.word	0x1fff7a14
 800d6b8:	1fff7a18 	.word	0x1fff7a18
 800d6bc:	20000106 	.word	0x20000106
 800d6c0:	20000116 	.word	0x20000116

0800d6c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	60f8      	str	r0, [r7, #12]
 800d6cc:	60b9      	str	r1, [r7, #8]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	75fb      	strb	r3, [r7, #23]
 800d6da:	e027      	b.n	800d72c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	0f1b      	lsrs	r3, r3, #28
 800d6e0:	2b09      	cmp	r3, #9
 800d6e2:	d80b      	bhi.n	800d6fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	0f1b      	lsrs	r3, r3, #28
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	440b      	add	r3, r1
 800d6f4:	3230      	adds	r2, #48	@ 0x30
 800d6f6:	b2d2      	uxtb	r2, r2
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	e00a      	b.n	800d712 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	0f1b      	lsrs	r3, r3, #28
 800d700:	b2da      	uxtb	r2, r3
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4619      	mov	r1, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	440b      	add	r3, r1
 800d70c:	3237      	adds	r2, #55	@ 0x37
 800d70e:	b2d2      	uxtb	r2, r2
 800d710:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	011b      	lsls	r3, r3, #4
 800d716:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	3301      	adds	r3, #1
 800d71e:	68ba      	ldr	r2, [r7, #8]
 800d720:	4413      	add	r3, r2
 800d722:	2200      	movs	r2, #0
 800d724:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d726:	7dfb      	ldrb	r3, [r7, #23]
 800d728:	3301      	adds	r3, #1
 800d72a:	75fb      	strb	r3, [r7, #23]
 800d72c:	7dfa      	ldrb	r2, [r7, #23]
 800d72e:	79fb      	ldrb	r3, [r7, #7]
 800d730:	429a      	cmp	r2, r3
 800d732:	d3d3      	bcc.n	800d6dc <IntToUnicode+0x18>
  }
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	371c      	adds	r7, #28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
	...

0800d744 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b08a      	sub	sp, #40	@ 0x28
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d74c:	f107 0314 	add.w	r3, r7, #20
 800d750:	2200      	movs	r2, #0
 800d752:	601a      	str	r2, [r3, #0]
 800d754:	605a      	str	r2, [r3, #4]
 800d756:	609a      	str	r2, [r3, #8]
 800d758:	60da      	str	r2, [r3, #12]
 800d75a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d764:	d13a      	bne.n	800d7dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d766:	2300      	movs	r3, #0
 800d768:	613b      	str	r3, [r7, #16]
 800d76a:	4b1e      	ldr	r3, [pc, #120]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d76c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d76e:	4a1d      	ldr	r2, [pc, #116]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d770:	f043 0301 	orr.w	r3, r3, #1
 800d774:	6313      	str	r3, [r2, #48]	@ 0x30
 800d776:	4b1b      	ldr	r3, [pc, #108]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	613b      	str	r3, [r7, #16]
 800d780:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d782:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d788:	2302      	movs	r3, #2
 800d78a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d790:	2303      	movs	r3, #3
 800d792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d794:	230a      	movs	r3, #10
 800d796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d798:	f107 0314 	add.w	r3, r7, #20
 800d79c:	4619      	mov	r1, r3
 800d79e:	4812      	ldr	r0, [pc, #72]	@ (800d7e8 <HAL_PCD_MspInit+0xa4>)
 800d7a0:	f7f5 fa34 	bl	8002c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d7a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d7a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7a8:	4a0e      	ldr	r2, [pc, #56]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7ae:	6353      	str	r3, [r2, #52]	@ 0x34
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	60fb      	str	r3, [r7, #12]
 800d7b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d7b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d7ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d7be:	6453      	str	r3, [r2, #68]	@ 0x44
 800d7c0:	4b08      	ldr	r3, [pc, #32]	@ (800d7e4 <HAL_PCD_MspInit+0xa0>)
 800d7c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7c8:	60fb      	str	r3, [r7, #12]
 800d7ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2105      	movs	r1, #5
 800d7d0:	2043      	movs	r0, #67	@ 0x43
 800d7d2:	f7f5 f9f1 	bl	8002bb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d7d6:	2043      	movs	r0, #67	@ 0x43
 800d7d8:	f7f5 fa0a 	bl	8002bf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d7dc:	bf00      	nop
 800d7de:	3728      	adds	r7, #40	@ 0x28
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	40023800 	.word	0x40023800
 800d7e8:	40020000 	.word	0x40020000

0800d7ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fb fd63 	bl	80092ce <USBD_LL_SetupStage>
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d822:	78fa      	ldrb	r2, [r7, #3]
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	4413      	add	r3, r2
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	440b      	add	r3, r1
 800d830:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	78fb      	ldrb	r3, [r7, #3]
 800d838:	4619      	mov	r1, r3
 800d83a:	f7fb fd9d 	bl	8009378 <USBD_LL_DataOutStage>
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b082      	sub	sp, #8
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d858:	78fa      	ldrb	r2, [r7, #3]
 800d85a:	6879      	ldr	r1, [r7, #4]
 800d85c:	4613      	mov	r3, r2
 800d85e:	00db      	lsls	r3, r3, #3
 800d860:	4413      	add	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	440b      	add	r3, r1
 800d866:	3320      	adds	r3, #32
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	4619      	mov	r1, r3
 800d86e:	f7fb fe36 	bl	80094de <USBD_LL_DataInStage>
}
 800d872:	bf00      	nop
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fb ff70 	bl	800976e <USBD_LL_SOF>
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	79db      	ldrb	r3, [r3, #7]
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d001      	beq.n	800d8ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d8aa:	f7f4 fad1 	bl	8001e50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8b4:	7bfa      	ldrb	r2, [r7, #15]
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fb ff14 	bl	80096e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fb febc 	bl	8009642 <USBD_LL_Reset>
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fb ff0f 	bl	8009706 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6812      	ldr	r2, [r2, #0]
 800d8f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8fa:	f043 0301 	orr.w	r3, r3, #1
 800d8fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7adb      	ldrb	r3, [r3, #11]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d005      	beq.n	800d914 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d908:	4b04      	ldr	r3, [pc, #16]	@ (800d91c <HAL_PCD_SuspendCallback+0x48>)
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	4a03      	ldr	r2, [pc, #12]	@ (800d91c <HAL_PCD_SuspendCallback+0x48>)
 800d90e:	f043 0306 	orr.w	r3, r3, #6
 800d912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	e000ed00 	.word	0xe000ed00

0800d920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fb ff05 	bl	800973e <USBD_LL_Resume>
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d94e:	78fa      	ldrb	r2, [r7, #3]
 800d950:	4611      	mov	r1, r2
 800d952:	4618      	mov	r0, r3
 800d954:	f7fb ff5d 	bl	8009812 <USBD_LL_IsoOUTIncomplete>
}
 800d958:	bf00      	nop
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d972:	78fa      	ldrb	r2, [r7, #3]
 800d974:	4611      	mov	r1, r2
 800d976:	4618      	mov	r0, r3
 800d978:	f7fb ff19 	bl	80097ae <USBD_LL_IsoINIncomplete>
}
 800d97c:	bf00      	nop
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b082      	sub	sp, #8
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d992:	4618      	mov	r0, r3
 800d994:	f7fb ff6f 	bl	8009876 <USBD_LL_DevConnected>
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7fb ff6c 	bl	800988c <USBD_LL_DevDisconnected>
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d13c      	bne.n	800da46 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d9cc:	4a20      	ldr	r2, [pc, #128]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a1e      	ldr	r2, [pc, #120]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d9dc:	4b1c      	ldr	r3, [pc, #112]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d9e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9e6:	2204      	movs	r2, #4
 800d9e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d9ea:	4b19      	ldr	r3, [pc, #100]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9ec:	2202      	movs	r2, #2
 800d9ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9f0:	4b17      	ldr	r3, [pc, #92]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9f6:	4b16      	ldr	r3, [pc, #88]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9fc:	4b14      	ldr	r3, [pc, #80]	@ (800da50 <USBD_LL_Init+0x94>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800da02:	4b13      	ldr	r3, [pc, #76]	@ (800da50 <USBD_LL_Init+0x94>)
 800da04:	2200      	movs	r2, #0
 800da06:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800da08:	4b11      	ldr	r3, [pc, #68]	@ (800da50 <USBD_LL_Init+0x94>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800da0e:	4b10      	ldr	r3, [pc, #64]	@ (800da50 <USBD_LL_Init+0x94>)
 800da10:	2200      	movs	r2, #0
 800da12:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800da14:	4b0e      	ldr	r3, [pc, #56]	@ (800da50 <USBD_LL_Init+0x94>)
 800da16:	2200      	movs	r2, #0
 800da18:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800da1a:	480d      	ldr	r0, [pc, #52]	@ (800da50 <USBD_LL_Init+0x94>)
 800da1c:	f7f6 ff38 	bl	8004890 <HAL_PCD_Init>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d001      	beq.n	800da2a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800da26:	f7f4 fa13 	bl	8001e50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800da2a:	2180      	movs	r1, #128	@ 0x80
 800da2c:	4808      	ldr	r0, [pc, #32]	@ (800da50 <USBD_LL_Init+0x94>)
 800da2e:	f7f8 f962 	bl	8005cf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800da32:	2240      	movs	r2, #64	@ 0x40
 800da34:	2100      	movs	r1, #0
 800da36:	4806      	ldr	r0, [pc, #24]	@ (800da50 <USBD_LL_Init+0x94>)
 800da38:	f7f8 f916 	bl	8005c68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800da3c:	2280      	movs	r2, #128	@ 0x80
 800da3e:	2101      	movs	r1, #1
 800da40:	4803      	ldr	r0, [pc, #12]	@ (800da50 <USBD_LL_Init+0x94>)
 800da42:	f7f8 f911 	bl	8005c68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}
 800da50:	20005a24 	.word	0x20005a24

0800da54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b084      	sub	sp, #16
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7f7 f81f 	bl	8004aae <HAL_PCD_Start>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f942 	bl	800dd00 <USBD_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	461a      	mov	r2, r3
 800da98:	4603      	mov	r3, r0
 800da9a:	70fb      	strb	r3, [r7, #3]
 800da9c:	460b      	mov	r3, r1
 800da9e:	70bb      	strb	r3, [r7, #2]
 800daa0:	4613      	mov	r3, r2
 800daa2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dab2:	78bb      	ldrb	r3, [r7, #2]
 800dab4:	883a      	ldrh	r2, [r7, #0]
 800dab6:	78f9      	ldrb	r1, [r7, #3]
 800dab8:	f7f7 fcf3 	bl	80054a2 <HAL_PCD_EP_Open>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 f91c 	bl	800dd00 <USBD_Get_USB_Status>
 800dac8:	4603      	mov	r3, r0
 800daca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae2:	2300      	movs	r3, #0
 800dae4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daf0:	78fa      	ldrb	r2, [r7, #3]
 800daf2:	4611      	mov	r1, r2
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7f7 fd3c 	bl	8005572 <HAL_PCD_EP_Close>
 800dafa:	4603      	mov	r3, r0
 800dafc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
 800db00:	4618      	mov	r0, r3
 800db02:	f000 f8fd 	bl	800dd00 <USBD_Get_USB_Status>
 800db06:	4603      	mov	r3, r0
 800db08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db20:	2300      	movs	r3, #0
 800db22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db2e:	78fa      	ldrb	r2, [r7, #3]
 800db30:	4611      	mov	r1, r2
 800db32:	4618      	mov	r0, r3
 800db34:	f7f7 fdf4 	bl	8005720 <HAL_PCD_EP_SetStall>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	4618      	mov	r0, r3
 800db40:	f000 f8de 	bl	800dd00 <USBD_Get_USB_Status>
 800db44:	4603      	mov	r3, r0
 800db46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db48:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db5e:	2300      	movs	r3, #0
 800db60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	4611      	mov	r1, r2
 800db70:	4618      	mov	r0, r3
 800db72:	f7f7 fe38 	bl	80057e6 <HAL_PCD_EP_ClrStall>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7a:	7bfb      	ldrb	r3, [r7, #15]
 800db7c:	4618      	mov	r0, r3
 800db7e:	f000 f8bf 	bl	800dd00 <USBD_Get_USB_Status>
 800db82:	4603      	mov	r3, r0
 800db84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db86:	7bbb      	ldrb	r3, [r7, #14]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dba2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	da0b      	bge.n	800dbc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbb2:	68f9      	ldr	r1, [r7, #12]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	4413      	add	r3, r2
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	440b      	add	r3, r1
 800dbbe:	3316      	adds	r3, #22
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	e00b      	b.n	800dbdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dbc4:	78fb      	ldrb	r3, [r7, #3]
 800dbc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dbca:	68f9      	ldr	r1, [r7, #12]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	440b      	add	r3, r1
 800dbd6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dbda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3714      	adds	r7, #20
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7f7 fc27 	bl	800545a <HAL_PCD_SetAddress>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 f874 	bl	800dd00 <USBD_Get_USB_Status>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b086      	sub	sp, #24
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
 800dc32:	460b      	mov	r3, r1
 800dc34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc36:	2300      	movs	r3, #0
 800dc38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc44:	7af9      	ldrb	r1, [r7, #11]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	f7f7 fd2f 	bl	80056ac <HAL_PCD_EP_Transmit>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc52:	7dfb      	ldrb	r3, [r7, #23]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f853 	bl	800dd00 <USBD_Get_USB_Status>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	607a      	str	r2, [r7, #4]
 800dc72:	603b      	str	r3, [r7, #0]
 800dc74:	460b      	mov	r3, r1
 800dc76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc86:	7af9      	ldrb	r1, [r7, #11]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	f7f7 fcbb 	bl	8005606 <HAL_PCD_EP_Receive>
 800dc90:	4603      	mov	r3, r0
 800dc92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f832 	bl	800dd00 <USBD_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dca0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b082      	sub	sp, #8
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dcbc:	78fa      	ldrb	r2, [r7, #3]
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7f7 fcdb 	bl	800567c <HAL_PCD_EP_GetRxCount>
 800dcc6:	4603      	mov	r3, r0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dcd8:	4b03      	ldr	r3, [pc, #12]	@ (800dce8 <USBD_static_malloc+0x18>)
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20005f08 	.word	0x20005f08

0800dcec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]

}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	2b03      	cmp	r3, #3
 800dd12:	d817      	bhi.n	800dd44 <USBD_Get_USB_Status+0x44>
 800dd14:	a201      	add	r2, pc, #4	@ (adr r2, 800dd1c <USBD_Get_USB_Status+0x1c>)
 800dd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1a:	bf00      	nop
 800dd1c:	0800dd2d 	.word	0x0800dd2d
 800dd20:	0800dd33 	.word	0x0800dd33
 800dd24:	0800dd39 	.word	0x0800dd39
 800dd28:	0800dd3f 	.word	0x0800dd3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd30:	e00b      	b.n	800dd4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd32:	2303      	movs	r3, #3
 800dd34:	73fb      	strb	r3, [r7, #15]
    break;
 800dd36:	e008      	b.n	800dd4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3c:	e005      	b.n	800dd4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	73fb      	strb	r3, [r7, #15]
    break;
 800dd42:	e002      	b.n	800dd4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd44:	2303      	movs	r3, #3
 800dd46:	73fb      	strb	r3, [r7, #15]
    break;
 800dd48:	bf00      	nop
  }
  return usb_status;
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr

0800dd58 <memset>:
 800dd58:	4402      	add	r2, r0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d100      	bne.n	800dd62 <memset+0xa>
 800dd60:	4770      	bx	lr
 800dd62:	f803 1b01 	strb.w	r1, [r3], #1
 800dd66:	e7f9      	b.n	800dd5c <memset+0x4>

0800dd68 <_reclaim_reent>:
 800dd68:	4b29      	ldr	r3, [pc, #164]	@ (800de10 <_reclaim_reent+0xa8>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4283      	cmp	r3, r0
 800dd6e:	b570      	push	{r4, r5, r6, lr}
 800dd70:	4604      	mov	r4, r0
 800dd72:	d04b      	beq.n	800de0c <_reclaim_reent+0xa4>
 800dd74:	69c3      	ldr	r3, [r0, #28]
 800dd76:	b1ab      	cbz	r3, 800dda4 <_reclaim_reent+0x3c>
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	b16b      	cbz	r3, 800dd98 <_reclaim_reent+0x30>
 800dd7c:	2500      	movs	r5, #0
 800dd7e:	69e3      	ldr	r3, [r4, #28]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	5959      	ldr	r1, [r3, r5]
 800dd84:	2900      	cmp	r1, #0
 800dd86:	d13b      	bne.n	800de00 <_reclaim_reent+0x98>
 800dd88:	3504      	adds	r5, #4
 800dd8a:	2d80      	cmp	r5, #128	@ 0x80
 800dd8c:	d1f7      	bne.n	800dd7e <_reclaim_reent+0x16>
 800dd8e:	69e3      	ldr	r3, [r4, #28]
 800dd90:	4620      	mov	r0, r4
 800dd92:	68d9      	ldr	r1, [r3, #12]
 800dd94:	f000 f878 	bl	800de88 <_free_r>
 800dd98:	69e3      	ldr	r3, [r4, #28]
 800dd9a:	6819      	ldr	r1, [r3, #0]
 800dd9c:	b111      	cbz	r1, 800dda4 <_reclaim_reent+0x3c>
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f872 	bl	800de88 <_free_r>
 800dda4:	6961      	ldr	r1, [r4, #20]
 800dda6:	b111      	cbz	r1, 800ddae <_reclaim_reent+0x46>
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 f86d 	bl	800de88 <_free_r>
 800ddae:	69e1      	ldr	r1, [r4, #28]
 800ddb0:	b111      	cbz	r1, 800ddb8 <_reclaim_reent+0x50>
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 f868 	bl	800de88 <_free_r>
 800ddb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ddba:	b111      	cbz	r1, 800ddc2 <_reclaim_reent+0x5a>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 f863 	bl	800de88 <_free_r>
 800ddc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddc4:	b111      	cbz	r1, 800ddcc <_reclaim_reent+0x64>
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 f85e 	bl	800de88 <_free_r>
 800ddcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ddce:	b111      	cbz	r1, 800ddd6 <_reclaim_reent+0x6e>
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 f859 	bl	800de88 <_free_r>
 800ddd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ddd8:	b111      	cbz	r1, 800dde0 <_reclaim_reent+0x78>
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f854 	bl	800de88 <_free_r>
 800dde0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dde2:	b111      	cbz	r1, 800ddea <_reclaim_reent+0x82>
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 f84f 	bl	800de88 <_free_r>
 800ddea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ddec:	b111      	cbz	r1, 800ddf4 <_reclaim_reent+0x8c>
 800ddee:	4620      	mov	r0, r4
 800ddf0:	f000 f84a 	bl	800de88 <_free_r>
 800ddf4:	6a23      	ldr	r3, [r4, #32]
 800ddf6:	b14b      	cbz	r3, 800de0c <_reclaim_reent+0xa4>
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddfe:	4718      	bx	r3
 800de00:	680e      	ldr	r6, [r1, #0]
 800de02:	4620      	mov	r0, r4
 800de04:	f000 f840 	bl	800de88 <_free_r>
 800de08:	4631      	mov	r1, r6
 800de0a:	e7bb      	b.n	800dd84 <_reclaim_reent+0x1c>
 800de0c:	bd70      	pop	{r4, r5, r6, pc}
 800de0e:	bf00      	nop
 800de10:	20000120 	.word	0x20000120

0800de14 <__errno>:
 800de14:	4b01      	ldr	r3, [pc, #4]	@ (800de1c <__errno+0x8>)
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	20000120 	.word	0x20000120

0800de20 <__libc_init_array>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4d0d      	ldr	r5, [pc, #52]	@ (800de58 <__libc_init_array+0x38>)
 800de24:	4c0d      	ldr	r4, [pc, #52]	@ (800de5c <__libc_init_array+0x3c>)
 800de26:	1b64      	subs	r4, r4, r5
 800de28:	10a4      	asrs	r4, r4, #2
 800de2a:	2600      	movs	r6, #0
 800de2c:	42a6      	cmp	r6, r4
 800de2e:	d109      	bne.n	800de44 <__libc_init_array+0x24>
 800de30:	4d0b      	ldr	r5, [pc, #44]	@ (800de60 <__libc_init_array+0x40>)
 800de32:	4c0c      	ldr	r4, [pc, #48]	@ (800de64 <__libc_init_array+0x44>)
 800de34:	f000 fb4a 	bl	800e4cc <_init>
 800de38:	1b64      	subs	r4, r4, r5
 800de3a:	10a4      	asrs	r4, r4, #2
 800de3c:	2600      	movs	r6, #0
 800de3e:	42a6      	cmp	r6, r4
 800de40:	d105      	bne.n	800de4e <__libc_init_array+0x2e>
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	f855 3b04 	ldr.w	r3, [r5], #4
 800de48:	4798      	blx	r3
 800de4a:	3601      	adds	r6, #1
 800de4c:	e7ee      	b.n	800de2c <__libc_init_array+0xc>
 800de4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de52:	4798      	blx	r3
 800de54:	3601      	adds	r6, #1
 800de56:	e7f2      	b.n	800de3e <__libc_init_array+0x1e>
 800de58:	0800e618 	.word	0x0800e618
 800de5c:	0800e618 	.word	0x0800e618
 800de60:	0800e618 	.word	0x0800e618
 800de64:	0800e61c 	.word	0x0800e61c

0800de68 <__retarget_lock_acquire_recursive>:
 800de68:	4770      	bx	lr

0800de6a <__retarget_lock_release_recursive>:
 800de6a:	4770      	bx	lr

0800de6c <memcpy>:
 800de6c:	440a      	add	r2, r1
 800de6e:	4291      	cmp	r1, r2
 800de70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de74:	d100      	bne.n	800de78 <memcpy+0xc>
 800de76:	4770      	bx	lr
 800de78:	b510      	push	{r4, lr}
 800de7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de82:	4291      	cmp	r1, r2
 800de84:	d1f9      	bne.n	800de7a <memcpy+0xe>
 800de86:	bd10      	pop	{r4, pc}

0800de88 <_free_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4605      	mov	r5, r0
 800de8c:	2900      	cmp	r1, #0
 800de8e:	d041      	beq.n	800df14 <_free_r+0x8c>
 800de90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de94:	1f0c      	subs	r4, r1, #4
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfb8      	it	lt
 800de9a:	18e4      	addlt	r4, r4, r3
 800de9c:	f000 f83e 	bl	800df1c <__malloc_lock>
 800dea0:	4a1d      	ldr	r2, [pc, #116]	@ (800df18 <_free_r+0x90>)
 800dea2:	6813      	ldr	r3, [r2, #0]
 800dea4:	b933      	cbnz	r3, 800deb4 <_free_r+0x2c>
 800dea6:	6063      	str	r3, [r4, #4]
 800dea8:	6014      	str	r4, [r2, #0]
 800deaa:	4628      	mov	r0, r5
 800deac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deb0:	f000 b83a 	b.w	800df28 <__malloc_unlock>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d908      	bls.n	800deca <_free_r+0x42>
 800deb8:	6820      	ldr	r0, [r4, #0]
 800deba:	1821      	adds	r1, r4, r0
 800debc:	428b      	cmp	r3, r1
 800debe:	bf01      	itttt	eq
 800dec0:	6819      	ldreq	r1, [r3, #0]
 800dec2:	685b      	ldreq	r3, [r3, #4]
 800dec4:	1809      	addeq	r1, r1, r0
 800dec6:	6021      	streq	r1, [r4, #0]
 800dec8:	e7ed      	b.n	800dea6 <_free_r+0x1e>
 800deca:	461a      	mov	r2, r3
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	b10b      	cbz	r3, 800ded4 <_free_r+0x4c>
 800ded0:	42a3      	cmp	r3, r4
 800ded2:	d9fa      	bls.n	800deca <_free_r+0x42>
 800ded4:	6811      	ldr	r1, [r2, #0]
 800ded6:	1850      	adds	r0, r2, r1
 800ded8:	42a0      	cmp	r0, r4
 800deda:	d10b      	bne.n	800def4 <_free_r+0x6c>
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	4401      	add	r1, r0
 800dee0:	1850      	adds	r0, r2, r1
 800dee2:	4283      	cmp	r3, r0
 800dee4:	6011      	str	r1, [r2, #0]
 800dee6:	d1e0      	bne.n	800deaa <_free_r+0x22>
 800dee8:	6818      	ldr	r0, [r3, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	6053      	str	r3, [r2, #4]
 800deee:	4408      	add	r0, r1
 800def0:	6010      	str	r0, [r2, #0]
 800def2:	e7da      	b.n	800deaa <_free_r+0x22>
 800def4:	d902      	bls.n	800defc <_free_r+0x74>
 800def6:	230c      	movs	r3, #12
 800def8:	602b      	str	r3, [r5, #0]
 800defa:	e7d6      	b.n	800deaa <_free_r+0x22>
 800defc:	6820      	ldr	r0, [r4, #0]
 800defe:	1821      	adds	r1, r4, r0
 800df00:	428b      	cmp	r3, r1
 800df02:	bf04      	itt	eq
 800df04:	6819      	ldreq	r1, [r3, #0]
 800df06:	685b      	ldreq	r3, [r3, #4]
 800df08:	6063      	str	r3, [r4, #4]
 800df0a:	bf04      	itt	eq
 800df0c:	1809      	addeq	r1, r1, r0
 800df0e:	6021      	streq	r1, [r4, #0]
 800df10:	6054      	str	r4, [r2, #4]
 800df12:	e7ca      	b.n	800deaa <_free_r+0x22>
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	bf00      	nop
 800df18:	20006264 	.word	0x20006264

0800df1c <__malloc_lock>:
 800df1c:	4801      	ldr	r0, [pc, #4]	@ (800df24 <__malloc_lock+0x8>)
 800df1e:	f7ff bfa3 	b.w	800de68 <__retarget_lock_acquire_recursive>
 800df22:	bf00      	nop
 800df24:	20006260 	.word	0x20006260

0800df28 <__malloc_unlock>:
 800df28:	4801      	ldr	r0, [pc, #4]	@ (800df30 <__malloc_unlock+0x8>)
 800df2a:	f7ff bf9e 	b.w	800de6a <__retarget_lock_release_recursive>
 800df2e:	bf00      	nop
 800df30:	20006260 	.word	0x20006260

0800df34 <sqrt>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	ed2d 8b02 	vpush	{d8}
 800df3a:	ec55 4b10 	vmov	r4, r5, d0
 800df3e:	f000 f9c7 	bl	800e2d0 <__ieee754_sqrt>
 800df42:	4622      	mov	r2, r4
 800df44:	462b      	mov	r3, r5
 800df46:	4620      	mov	r0, r4
 800df48:	4629      	mov	r1, r5
 800df4a:	eeb0 8a40 	vmov.f32	s16, s0
 800df4e:	eef0 8a60 	vmov.f32	s17, s1
 800df52:	f7f2 fd9b 	bl	8000a8c <__aeabi_dcmpun>
 800df56:	b990      	cbnz	r0, 800df7e <sqrt+0x4a>
 800df58:	2200      	movs	r2, #0
 800df5a:	2300      	movs	r3, #0
 800df5c:	4620      	mov	r0, r4
 800df5e:	4629      	mov	r1, r5
 800df60:	f7f2 fd6c 	bl	8000a3c <__aeabi_dcmplt>
 800df64:	b158      	cbz	r0, 800df7e <sqrt+0x4a>
 800df66:	f7ff ff55 	bl	800de14 <__errno>
 800df6a:	2321      	movs	r3, #33	@ 0x21
 800df6c:	6003      	str	r3, [r0, #0]
 800df6e:	2200      	movs	r2, #0
 800df70:	2300      	movs	r3, #0
 800df72:	4610      	mov	r0, r2
 800df74:	4619      	mov	r1, r3
 800df76:	f7f2 fc19 	bl	80007ac <__aeabi_ddiv>
 800df7a:	ec41 0b18 	vmov	d8, r0, r1
 800df7e:	eeb0 0a48 	vmov.f32	s0, s16
 800df82:	eef0 0a68 	vmov.f32	s1, s17
 800df86:	ecbd 8b02 	vpop	{d8}
 800df8a:	bd38      	pop	{r3, r4, r5, pc}
 800df8c:	0000      	movs	r0, r0
	...

0800df90 <atan>:
 800df90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df94:	ec55 4b10 	vmov	r4, r5, d0
 800df98:	4bbf      	ldr	r3, [pc, #764]	@ (800e298 <atan+0x308>)
 800df9a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800df9e:	429e      	cmp	r6, r3
 800dfa0:	46ab      	mov	fp, r5
 800dfa2:	d918      	bls.n	800dfd6 <atan+0x46>
 800dfa4:	4bbd      	ldr	r3, [pc, #756]	@ (800e29c <atan+0x30c>)
 800dfa6:	429e      	cmp	r6, r3
 800dfa8:	d801      	bhi.n	800dfae <atan+0x1e>
 800dfaa:	d109      	bne.n	800dfc0 <atan+0x30>
 800dfac:	b144      	cbz	r4, 800dfc0 <atan+0x30>
 800dfae:	4622      	mov	r2, r4
 800dfb0:	462b      	mov	r3, r5
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7f2 f919 	bl	80001ec <__adddf3>
 800dfba:	4604      	mov	r4, r0
 800dfbc:	460d      	mov	r5, r1
 800dfbe:	e006      	b.n	800dfce <atan+0x3e>
 800dfc0:	f1bb 0f00 	cmp.w	fp, #0
 800dfc4:	f340 812b 	ble.w	800e21e <atan+0x28e>
 800dfc8:	a597      	add	r5, pc, #604	@ (adr r5, 800e228 <atan+0x298>)
 800dfca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfce:	ec45 4b10 	vmov	d0, r4, r5
 800dfd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	4bb2      	ldr	r3, [pc, #712]	@ (800e2a0 <atan+0x310>)
 800dfd8:	429e      	cmp	r6, r3
 800dfda:	d813      	bhi.n	800e004 <atan+0x74>
 800dfdc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dfe0:	429e      	cmp	r6, r3
 800dfe2:	d80c      	bhi.n	800dffe <atan+0x6e>
 800dfe4:	a392      	add	r3, pc, #584	@ (adr r3, 800e230 <atan+0x2a0>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	4620      	mov	r0, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	f7f2 f8fd 	bl	80001ec <__adddf3>
 800dff2:	4bac      	ldr	r3, [pc, #688]	@ (800e2a4 <atan+0x314>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	f7f2 fd3f 	bl	8000a78 <__aeabi_dcmpgt>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d1e7      	bne.n	800dfce <atan+0x3e>
 800dffe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e002:	e029      	b.n	800e058 <atan+0xc8>
 800e004:	f000 f95c 	bl	800e2c0 <fabs>
 800e008:	4ba7      	ldr	r3, [pc, #668]	@ (800e2a8 <atan+0x318>)
 800e00a:	429e      	cmp	r6, r3
 800e00c:	ec55 4b10 	vmov	r4, r5, d0
 800e010:	f200 80bc 	bhi.w	800e18c <atan+0x1fc>
 800e014:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e018:	429e      	cmp	r6, r3
 800e01a:	f200 809e 	bhi.w	800e15a <atan+0x1ca>
 800e01e:	4622      	mov	r2, r4
 800e020:	462b      	mov	r3, r5
 800e022:	4620      	mov	r0, r4
 800e024:	4629      	mov	r1, r5
 800e026:	f7f2 f8e1 	bl	80001ec <__adddf3>
 800e02a:	4b9e      	ldr	r3, [pc, #632]	@ (800e2a4 <atan+0x314>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	f7f2 f8db 	bl	80001e8 <__aeabi_dsub>
 800e032:	2200      	movs	r2, #0
 800e034:	4606      	mov	r6, r0
 800e036:	460f      	mov	r7, r1
 800e038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e03c:	4620      	mov	r0, r4
 800e03e:	4629      	mov	r1, r5
 800e040:	f7f2 f8d4 	bl	80001ec <__adddf3>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4630      	mov	r0, r6
 800e04a:	4639      	mov	r1, r7
 800e04c:	f7f2 fbae 	bl	80007ac <__aeabi_ddiv>
 800e050:	f04f 0a00 	mov.w	sl, #0
 800e054:	4604      	mov	r4, r0
 800e056:	460d      	mov	r5, r1
 800e058:	4622      	mov	r2, r4
 800e05a:	462b      	mov	r3, r5
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	f7f2 fa7a 	bl	8000558 <__aeabi_dmul>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	4680      	mov	r8, r0
 800e06a:	4689      	mov	r9, r1
 800e06c:	f7f2 fa74 	bl	8000558 <__aeabi_dmul>
 800e070:	a371      	add	r3, pc, #452	@ (adr r3, 800e238 <atan+0x2a8>)
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	4606      	mov	r6, r0
 800e078:	460f      	mov	r7, r1
 800e07a:	f7f2 fa6d 	bl	8000558 <__aeabi_dmul>
 800e07e:	a370      	add	r3, pc, #448	@ (adr r3, 800e240 <atan+0x2b0>)
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f7f2 f8b2 	bl	80001ec <__adddf3>
 800e088:	4632      	mov	r2, r6
 800e08a:	463b      	mov	r3, r7
 800e08c:	f7f2 fa64 	bl	8000558 <__aeabi_dmul>
 800e090:	a36d      	add	r3, pc, #436	@ (adr r3, 800e248 <atan+0x2b8>)
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f7f2 f8a9 	bl	80001ec <__adddf3>
 800e09a:	4632      	mov	r2, r6
 800e09c:	463b      	mov	r3, r7
 800e09e:	f7f2 fa5b 	bl	8000558 <__aeabi_dmul>
 800e0a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800e250 <atan+0x2c0>)
 800e0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a8:	f7f2 f8a0 	bl	80001ec <__adddf3>
 800e0ac:	4632      	mov	r2, r6
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	f7f2 fa52 	bl	8000558 <__aeabi_dmul>
 800e0b4:	a368      	add	r3, pc, #416	@ (adr r3, 800e258 <atan+0x2c8>)
 800e0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ba:	f7f2 f897 	bl	80001ec <__adddf3>
 800e0be:	4632      	mov	r2, r6
 800e0c0:	463b      	mov	r3, r7
 800e0c2:	f7f2 fa49 	bl	8000558 <__aeabi_dmul>
 800e0c6:	a366      	add	r3, pc, #408	@ (adr r3, 800e260 <atan+0x2d0>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	f7f2 f88e 	bl	80001ec <__adddf3>
 800e0d0:	4642      	mov	r2, r8
 800e0d2:	464b      	mov	r3, r9
 800e0d4:	f7f2 fa40 	bl	8000558 <__aeabi_dmul>
 800e0d8:	a363      	add	r3, pc, #396	@ (adr r3, 800e268 <atan+0x2d8>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	4680      	mov	r8, r0
 800e0e0:	4689      	mov	r9, r1
 800e0e2:	4630      	mov	r0, r6
 800e0e4:	4639      	mov	r1, r7
 800e0e6:	f7f2 fa37 	bl	8000558 <__aeabi_dmul>
 800e0ea:	a361      	add	r3, pc, #388	@ (adr r3, 800e270 <atan+0x2e0>)
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f7f2 f87a 	bl	80001e8 <__aeabi_dsub>
 800e0f4:	4632      	mov	r2, r6
 800e0f6:	463b      	mov	r3, r7
 800e0f8:	f7f2 fa2e 	bl	8000558 <__aeabi_dmul>
 800e0fc:	a35e      	add	r3, pc, #376	@ (adr r3, 800e278 <atan+0x2e8>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 f871 	bl	80001e8 <__aeabi_dsub>
 800e106:	4632      	mov	r2, r6
 800e108:	463b      	mov	r3, r7
 800e10a:	f7f2 fa25 	bl	8000558 <__aeabi_dmul>
 800e10e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e280 <atan+0x2f0>)
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f7f2 f868 	bl	80001e8 <__aeabi_dsub>
 800e118:	4632      	mov	r2, r6
 800e11a:	463b      	mov	r3, r7
 800e11c:	f7f2 fa1c 	bl	8000558 <__aeabi_dmul>
 800e120:	a359      	add	r3, pc, #356	@ (adr r3, 800e288 <atan+0x2f8>)
 800e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e126:	f7f2 f85f 	bl	80001e8 <__aeabi_dsub>
 800e12a:	4632      	mov	r2, r6
 800e12c:	463b      	mov	r3, r7
 800e12e:	f7f2 fa13 	bl	8000558 <__aeabi_dmul>
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	4640      	mov	r0, r8
 800e138:	4649      	mov	r1, r9
 800e13a:	f7f2 f857 	bl	80001ec <__adddf3>
 800e13e:	4622      	mov	r2, r4
 800e140:	462b      	mov	r3, r5
 800e142:	f7f2 fa09 	bl	8000558 <__aeabi_dmul>
 800e146:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	d148      	bne.n	800e1e2 <atan+0x252>
 800e150:	4620      	mov	r0, r4
 800e152:	4629      	mov	r1, r5
 800e154:	f7f2 f848 	bl	80001e8 <__aeabi_dsub>
 800e158:	e72f      	b.n	800dfba <atan+0x2a>
 800e15a:	4b52      	ldr	r3, [pc, #328]	@ (800e2a4 <atan+0x314>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	4620      	mov	r0, r4
 800e160:	4629      	mov	r1, r5
 800e162:	f7f2 f841 	bl	80001e8 <__aeabi_dsub>
 800e166:	4b4f      	ldr	r3, [pc, #316]	@ (800e2a4 <atan+0x314>)
 800e168:	4606      	mov	r6, r0
 800e16a:	460f      	mov	r7, r1
 800e16c:	2200      	movs	r2, #0
 800e16e:	4620      	mov	r0, r4
 800e170:	4629      	mov	r1, r5
 800e172:	f7f2 f83b 	bl	80001ec <__adddf3>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 fb15 	bl	80007ac <__aeabi_ddiv>
 800e182:	f04f 0a01 	mov.w	sl, #1
 800e186:	4604      	mov	r4, r0
 800e188:	460d      	mov	r5, r1
 800e18a:	e765      	b.n	800e058 <atan+0xc8>
 800e18c:	4b47      	ldr	r3, [pc, #284]	@ (800e2ac <atan+0x31c>)
 800e18e:	429e      	cmp	r6, r3
 800e190:	d21c      	bcs.n	800e1cc <atan+0x23c>
 800e192:	4b47      	ldr	r3, [pc, #284]	@ (800e2b0 <atan+0x320>)
 800e194:	2200      	movs	r2, #0
 800e196:	4620      	mov	r0, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 f825 	bl	80001e8 <__aeabi_dsub>
 800e19e:	4b44      	ldr	r3, [pc, #272]	@ (800e2b0 <atan+0x320>)
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	460f      	mov	r7, r1
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	f7f2 f9d5 	bl	8000558 <__aeabi_dmul>
 800e1ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e2a4 <atan+0x314>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f7f2 f81b 	bl	80001ec <__adddf3>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	4639      	mov	r1, r7
 800e1be:	f7f2 faf5 	bl	80007ac <__aeabi_ddiv>
 800e1c2:	f04f 0a02 	mov.w	sl, #2
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	460d      	mov	r5, r1
 800e1ca:	e745      	b.n	800e058 <atan+0xc8>
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	4938      	ldr	r1, [pc, #224]	@ (800e2b4 <atan+0x324>)
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	f7f2 faea 	bl	80007ac <__aeabi_ddiv>
 800e1d8:	f04f 0a03 	mov.w	sl, #3
 800e1dc:	4604      	mov	r4, r0
 800e1de:	460d      	mov	r5, r1
 800e1e0:	e73a      	b.n	800e058 <atan+0xc8>
 800e1e2:	4b35      	ldr	r3, [pc, #212]	@ (800e2b8 <atan+0x328>)
 800e1e4:	4e35      	ldr	r6, [pc, #212]	@ (800e2bc <atan+0x32c>)
 800e1e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ee:	f7f1 fffb 	bl	80001e8 <__aeabi_dsub>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	f7f1 fff7 	bl	80001e8 <__aeabi_dsub>
 800e1fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e206:	f7f1 ffef 	bl	80001e8 <__aeabi_dsub>
 800e20a:	f1bb 0f00 	cmp.w	fp, #0
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	f6bf aedc 	bge.w	800dfce <atan+0x3e>
 800e216:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e21a:	461d      	mov	r5, r3
 800e21c:	e6d7      	b.n	800dfce <atan+0x3e>
 800e21e:	a51c      	add	r5, pc, #112	@ (adr r5, 800e290 <atan+0x300>)
 800e220:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e224:	e6d3      	b.n	800dfce <atan+0x3e>
 800e226:	bf00      	nop
 800e228:	54442d18 	.word	0x54442d18
 800e22c:	3ff921fb 	.word	0x3ff921fb
 800e230:	8800759c 	.word	0x8800759c
 800e234:	7e37e43c 	.word	0x7e37e43c
 800e238:	e322da11 	.word	0xe322da11
 800e23c:	3f90ad3a 	.word	0x3f90ad3a
 800e240:	24760deb 	.word	0x24760deb
 800e244:	3fa97b4b 	.word	0x3fa97b4b
 800e248:	a0d03d51 	.word	0xa0d03d51
 800e24c:	3fb10d66 	.word	0x3fb10d66
 800e250:	c54c206e 	.word	0xc54c206e
 800e254:	3fb745cd 	.word	0x3fb745cd
 800e258:	920083ff 	.word	0x920083ff
 800e25c:	3fc24924 	.word	0x3fc24924
 800e260:	5555550d 	.word	0x5555550d
 800e264:	3fd55555 	.word	0x3fd55555
 800e268:	2c6a6c2f 	.word	0x2c6a6c2f
 800e26c:	bfa2b444 	.word	0xbfa2b444
 800e270:	52defd9a 	.word	0x52defd9a
 800e274:	3fadde2d 	.word	0x3fadde2d
 800e278:	af749a6d 	.word	0xaf749a6d
 800e27c:	3fb3b0f2 	.word	0x3fb3b0f2
 800e280:	fe231671 	.word	0xfe231671
 800e284:	3fbc71c6 	.word	0x3fbc71c6
 800e288:	9998ebc4 	.word	0x9998ebc4
 800e28c:	3fc99999 	.word	0x3fc99999
 800e290:	54442d18 	.word	0x54442d18
 800e294:	bff921fb 	.word	0xbff921fb
 800e298:	440fffff 	.word	0x440fffff
 800e29c:	7ff00000 	.word	0x7ff00000
 800e2a0:	3fdbffff 	.word	0x3fdbffff
 800e2a4:	3ff00000 	.word	0x3ff00000
 800e2a8:	3ff2ffff 	.word	0x3ff2ffff
 800e2ac:	40038000 	.word	0x40038000
 800e2b0:	3ff80000 	.word	0x3ff80000
 800e2b4:	bff00000 	.word	0xbff00000
 800e2b8:	0800e5d0 	.word	0x0800e5d0
 800e2bc:	0800e5f0 	.word	0x0800e5f0

0800e2c0 <fabs>:
 800e2c0:	ec51 0b10 	vmov	r0, r1, d0
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e2ca:	ec43 2b10 	vmov	d0, r2, r3
 800e2ce:	4770      	bx	lr

0800e2d0 <__ieee754_sqrt>:
 800e2d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	4a68      	ldr	r2, [pc, #416]	@ (800e478 <__ieee754_sqrt+0x1a8>)
 800e2d6:	ec55 4b10 	vmov	r4, r5, d0
 800e2da:	43aa      	bics	r2, r5
 800e2dc:	462b      	mov	r3, r5
 800e2de:	4621      	mov	r1, r4
 800e2e0:	d110      	bne.n	800e304 <__ieee754_sqrt+0x34>
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	4629      	mov	r1, r5
 800e2e8:	f7f2 f936 	bl	8000558 <__aeabi_dmul>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f1 ff7a 	bl	80001ec <__adddf3>
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	ec45 4b10 	vmov	d0, r4, r5
 800e300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e304:	2d00      	cmp	r5, #0
 800e306:	dc0e      	bgt.n	800e326 <__ieee754_sqrt+0x56>
 800e308:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e30c:	4322      	orrs	r2, r4
 800e30e:	d0f5      	beq.n	800e2fc <__ieee754_sqrt+0x2c>
 800e310:	b19d      	cbz	r5, 800e33a <__ieee754_sqrt+0x6a>
 800e312:	4622      	mov	r2, r4
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f1 ff66 	bl	80001e8 <__aeabi_dsub>
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	f7f2 fa44 	bl	80007ac <__aeabi_ddiv>
 800e324:	e7e8      	b.n	800e2f8 <__ieee754_sqrt+0x28>
 800e326:	152a      	asrs	r2, r5, #20
 800e328:	d115      	bne.n	800e356 <__ieee754_sqrt+0x86>
 800e32a:	2000      	movs	r0, #0
 800e32c:	e009      	b.n	800e342 <__ieee754_sqrt+0x72>
 800e32e:	0acb      	lsrs	r3, r1, #11
 800e330:	3a15      	subs	r2, #21
 800e332:	0549      	lsls	r1, r1, #21
 800e334:	2b00      	cmp	r3, #0
 800e336:	d0fa      	beq.n	800e32e <__ieee754_sqrt+0x5e>
 800e338:	e7f7      	b.n	800e32a <__ieee754_sqrt+0x5a>
 800e33a:	462a      	mov	r2, r5
 800e33c:	e7fa      	b.n	800e334 <__ieee754_sqrt+0x64>
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	3001      	adds	r0, #1
 800e342:	02dc      	lsls	r4, r3, #11
 800e344:	d5fb      	bpl.n	800e33e <__ieee754_sqrt+0x6e>
 800e346:	1e44      	subs	r4, r0, #1
 800e348:	1b12      	subs	r2, r2, r4
 800e34a:	f1c0 0420 	rsb	r4, r0, #32
 800e34e:	fa21 f404 	lsr.w	r4, r1, r4
 800e352:	4323      	orrs	r3, r4
 800e354:	4081      	lsls	r1, r0
 800e356:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e35a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e35e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e362:	07d2      	lsls	r2, r2, #31
 800e364:	bf5c      	itt	pl
 800e366:	005b      	lslpl	r3, r3, #1
 800e368:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e36c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e370:	bf58      	it	pl
 800e372:	0049      	lslpl	r1, r1, #1
 800e374:	2600      	movs	r6, #0
 800e376:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e37a:	106d      	asrs	r5, r5, #1
 800e37c:	0049      	lsls	r1, r1, #1
 800e37e:	2016      	movs	r0, #22
 800e380:	4632      	mov	r2, r6
 800e382:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e386:	1917      	adds	r7, r2, r4
 800e388:	429f      	cmp	r7, r3
 800e38a:	bfde      	ittt	le
 800e38c:	193a      	addle	r2, r7, r4
 800e38e:	1bdb      	suble	r3, r3, r7
 800e390:	1936      	addle	r6, r6, r4
 800e392:	0fcf      	lsrs	r7, r1, #31
 800e394:	3801      	subs	r0, #1
 800e396:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e39a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e39e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e3a2:	d1f0      	bne.n	800e386 <__ieee754_sqrt+0xb6>
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	2720      	movs	r7, #32
 800e3a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	eb00 0e0c 	add.w	lr, r0, ip
 800e3b2:	db02      	blt.n	800e3ba <__ieee754_sqrt+0xea>
 800e3b4:	d113      	bne.n	800e3de <__ieee754_sqrt+0x10e>
 800e3b6:	458e      	cmp	lr, r1
 800e3b8:	d811      	bhi.n	800e3de <__ieee754_sqrt+0x10e>
 800e3ba:	f1be 0f00 	cmp.w	lr, #0
 800e3be:	eb0e 000c 	add.w	r0, lr, ip
 800e3c2:	da42      	bge.n	800e44a <__ieee754_sqrt+0x17a>
 800e3c4:	2800      	cmp	r0, #0
 800e3c6:	db40      	blt.n	800e44a <__ieee754_sqrt+0x17a>
 800e3c8:	f102 0801 	add.w	r8, r2, #1
 800e3cc:	1a9b      	subs	r3, r3, r2
 800e3ce:	458e      	cmp	lr, r1
 800e3d0:	bf88      	it	hi
 800e3d2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800e3d6:	eba1 010e 	sub.w	r1, r1, lr
 800e3da:	4464      	add	r4, ip
 800e3dc:	4642      	mov	r2, r8
 800e3de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e3e2:	3f01      	subs	r7, #1
 800e3e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e3e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e3ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e3f0:	d1dc      	bne.n	800e3ac <__ieee754_sqrt+0xdc>
 800e3f2:	4319      	orrs	r1, r3
 800e3f4:	d01b      	beq.n	800e42e <__ieee754_sqrt+0x15e>
 800e3f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e47c <__ieee754_sqrt+0x1ac>
 800e3fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e480 <__ieee754_sqrt+0x1b0>
 800e3fe:	e9da 0100 	ldrd	r0, r1, [sl]
 800e402:	e9db 2300 	ldrd	r2, r3, [fp]
 800e406:	f7f1 feef 	bl	80001e8 <__aeabi_dsub>
 800e40a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e40e:	4602      	mov	r2, r0
 800e410:	460b      	mov	r3, r1
 800e412:	4640      	mov	r0, r8
 800e414:	4649      	mov	r1, r9
 800e416:	f7f2 fb1b 	bl	8000a50 <__aeabi_dcmple>
 800e41a:	b140      	cbz	r0, 800e42e <__ieee754_sqrt+0x15e>
 800e41c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800e420:	e9da 0100 	ldrd	r0, r1, [sl]
 800e424:	e9db 2300 	ldrd	r2, r3, [fp]
 800e428:	d111      	bne.n	800e44e <__ieee754_sqrt+0x17e>
 800e42a:	3601      	adds	r6, #1
 800e42c:	463c      	mov	r4, r7
 800e42e:	1072      	asrs	r2, r6, #1
 800e430:	0863      	lsrs	r3, r4, #1
 800e432:	07f1      	lsls	r1, r6, #31
 800e434:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e438:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e43c:	bf48      	it	mi
 800e43e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e442:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e446:	4618      	mov	r0, r3
 800e448:	e756      	b.n	800e2f8 <__ieee754_sqrt+0x28>
 800e44a:	4690      	mov	r8, r2
 800e44c:	e7be      	b.n	800e3cc <__ieee754_sqrt+0xfc>
 800e44e:	f7f1 fecd 	bl	80001ec <__adddf3>
 800e452:	e9da 8900 	ldrd	r8, r9, [sl]
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	4640      	mov	r0, r8
 800e45c:	4649      	mov	r1, r9
 800e45e:	f7f2 faed 	bl	8000a3c <__aeabi_dcmplt>
 800e462:	b120      	cbz	r0, 800e46e <__ieee754_sqrt+0x19e>
 800e464:	1ca0      	adds	r0, r4, #2
 800e466:	bf08      	it	eq
 800e468:	3601      	addeq	r6, #1
 800e46a:	3402      	adds	r4, #2
 800e46c:	e7df      	b.n	800e42e <__ieee754_sqrt+0x15e>
 800e46e:	1c63      	adds	r3, r4, #1
 800e470:	f023 0401 	bic.w	r4, r3, #1
 800e474:	e7db      	b.n	800e42e <__ieee754_sqrt+0x15e>
 800e476:	bf00      	nop
 800e478:	7ff00000 	.word	0x7ff00000
 800e47c:	20000178 	.word	0x20000178
 800e480:	20000170 	.word	0x20000170

0800e484 <roundf>:
 800e484:	ee10 0a10 	vmov	r0, s0
 800e488:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e48c:	3a7f      	subs	r2, #127	@ 0x7f
 800e48e:	2a16      	cmp	r2, #22
 800e490:	dc15      	bgt.n	800e4be <roundf+0x3a>
 800e492:	2a00      	cmp	r2, #0
 800e494:	da08      	bge.n	800e4a8 <roundf+0x24>
 800e496:	3201      	adds	r2, #1
 800e498:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800e49c:	d101      	bne.n	800e4a2 <roundf+0x1e>
 800e49e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800e4a2:	ee00 3a10 	vmov	s0, r3
 800e4a6:	4770      	bx	lr
 800e4a8:	4907      	ldr	r1, [pc, #28]	@ (800e4c8 <roundf+0x44>)
 800e4aa:	4111      	asrs	r1, r2
 800e4ac:	4201      	tst	r1, r0
 800e4ae:	d0fa      	beq.n	800e4a6 <roundf+0x22>
 800e4b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800e4b4:	4113      	asrs	r3, r2
 800e4b6:	4403      	add	r3, r0
 800e4b8:	ea23 0301 	bic.w	r3, r3, r1
 800e4bc:	e7f1      	b.n	800e4a2 <roundf+0x1e>
 800e4be:	2a80      	cmp	r2, #128	@ 0x80
 800e4c0:	d1f1      	bne.n	800e4a6 <roundf+0x22>
 800e4c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e4c6:	4770      	bx	lr
 800e4c8:	007fffff 	.word	0x007fffff

0800e4cc <_init>:
 800e4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ce:	bf00      	nop
 800e4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4d2:	bc08      	pop	{r3}
 800e4d4:	469e      	mov	lr, r3
 800e4d6:	4770      	bx	lr

0800e4d8 <_fini>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	bf00      	nop
 800e4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4de:	bc08      	pop	{r3}
 800e4e0:	469e      	mov	lr, r3
 800e4e2:	4770      	bx	lr
